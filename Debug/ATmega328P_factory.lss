
ATmega328P_factory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016c  00800100  000024ec  00002580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  0080026c  0080026c  000026ec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000026ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b0  00000000  00000000  00002788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008f22  00000000  00000000  00002c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000243e  00000000  00000000  0000bb5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002568  00000000  00000000  0000df98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fe4  00000000  00000000  00010500  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d64  00000000  00000000  000114e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004342  00000000  00000000  00015248  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000468  00000000  00000000  0001958a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__dtors_end>
       4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       c:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_3>
      10:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_4>
      14:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_5>
      18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      24:	0c 94 b2 02 	jmp	0x564	; 0x564 <__vector_9>
      28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      2c:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__vector_11>
      30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      40:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__vector_16>
      44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

00000068 <__ctors_start>:
      68:	6c 01       	movw	r12, r24
      6a:	e1 02       	muls	r30, r17
      6c:	a9 07       	cpc	r26, r25

0000006e <__ctors_end>:
      6e:	73 01       	movw	r14, r6
      70:	e8 02       	muls	r30, r24

00000072 <__dtors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf ef       	ldi	r28, 0xFF	; 255
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	12 e0       	ldi	r17, 0x02	; 2
      80:	a0 e0       	ldi	r26, 0x00	; 0
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	ec ee       	ldi	r30, 0xEC	; 236
      86:	f4 e2       	ldi	r31, 0x24	; 36
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	ac 36       	cpi	r26, 0x6C	; 108
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	22 e0       	ldi	r18, 0x02	; 2
      96:	ac e6       	ldi	r26, 0x6C	; 108
      98:	b2 e0       	ldi	r27, 0x02	; 2
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a6 39       	cpi	r26, 0x96	; 150
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>

000000a4 <__do_global_ctors>:
      a4:	10 e0       	ldi	r17, 0x00	; 0
      a6:	c7 e3       	ldi	r28, 0x37	; 55
      a8:	d0 e0       	ldi	r29, 0x00	; 0
      aa:	04 c0       	rjmp	.+8      	; 0xb4 <__do_global_ctors+0x10>
      ac:	21 97       	sbiw	r28, 0x01	; 1
      ae:	fe 01       	movw	r30, r28
      b0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__tablejump2__>
      b4:	c4 33       	cpi	r28, 0x34	; 52
      b6:	d1 07       	cpc	r29, r17
      b8:	c9 f7       	brne	.-14     	; 0xac <__do_global_ctors+0x8>
      ba:	0e 94 03 06 	call	0xc06	; 0xc06 <main>
      be:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <atexit_fini>

000000c2 <__bad_interrupt>:
      c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <atexit_finido>:
      c6:	a0 91 6c 02 	lds	r26, 0x026C	; 0x80026c <__data_end>
      ca:	b0 91 6d 02 	lds	r27, 0x026D	; 0x80026d <__data_end+0x1>
      ce:	10 97       	sbiw	r26, 0x00	; 0
      d0:	69 f0       	breq	.+26     	; 0xec <atexit_finido+0x26>
      d2:	ed 91       	ld	r30, X+
      d4:	fc 91       	ld	r31, X
      d6:	11 97       	sbiw	r26, 0x01	; 1
      d8:	12 96       	adiw	r26, 0x02	; 2
      da:	8d 91       	ld	r24, X+
      dc:	9c 91       	ld	r25, X
      de:	13 97       	sbiw	r26, 0x03	; 3
      e0:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <__data_end+0x1>
      e4:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <__data_end>
      e8:	09 95       	icall
      ea:	ed cf       	rjmp	.-38     	; 0xc6 <atexit_finido>
      ec:	08 95       	ret

000000ee <atexit>:
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	ec 01       	movw	r28, r24
      f4:	84 e0       	ldi	r24, 0x04	; 4
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <malloc>
      fc:	00 97       	sbiw	r24, 0x00	; 0
      fe:	81 f0       	breq	.+32     	; 0x120 <atexit+0x32>
     100:	fc 01       	movw	r30, r24
     102:	d1 83       	std	Z+1, r29	; 0x01
     104:	c0 83       	st	Z, r28
     106:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <__data_end>
     10a:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <__data_end+0x1>
     10e:	33 83       	std	Z+3, r19	; 0x03
     110:	22 83       	std	Z+2, r18	; 0x02
     112:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <__data_end+0x1>
     116:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <__data_end>
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	02 c0       	rjmp	.+4      	; 0x124 <atexit+0x36>
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <time>:
     12a:	fc 01       	movw	r30, r24
     12c:	0f b6       	in	r0, 0x3f	; 63
     12e:	f8 94       	cli
     130:	60 91 92 02 	lds	r22, 0x0292	; 0x800292 <__system_time>
     134:	70 91 93 02 	lds	r23, 0x0293	; 0x800293 <__system_time+0x1>
     138:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__system_time+0x2>
     13c:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <__system_time+0x3>
     140:	0f be       	out	0x3f, r0	; 63
     142:	30 97       	sbiw	r30, 0x00	; 0
     144:	21 f0       	breq	.+8      	; 0x14e <time+0x24>
     146:	60 83       	st	Z, r22
     148:	71 83       	std	Z+1, r23	; 0x01
     14a:	82 83       	std	Z+2, r24	; 0x02
     14c:	93 83       	std	Z+3, r25	; 0x03
     14e:	08 95       	ret

00000150 <_ZN9container5ArrayIPFvvELj3EEC1Ev>:
 *        This class is non-copyable and non-movable.
 * 
 * @tparam Size The array size. Must be greater than 0.
 */
template <size_t Size>
class CallbackArray : public Array<void (*)(), Size>
     150:	26 e0       	ldi	r18, 0x06	; 6
     152:	fc 01       	movw	r30, r24
     154:	11 92       	st	Z+, r1
     156:	2a 95       	dec	r18
     158:	e9 f7       	brne	.-6      	; 0x154 <_ZN9container5ArrayIPFvvELj3EEC1Ev+0x4>
     15a:	08 95       	ret

0000015c <_ZN9container13CallbackArrayILj3EEC1Ev>:
     15c:	0e 94 a8 00 	call	0x150	; 0x150 <_ZN9container5ArrayIPFvvELj3EEC1Ev>
     160:	08 95       	ret

00000162 <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj>:
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	63 30       	cpi	r22, 0x03	; 3
     166:	71 05       	cpc	r23, r1
     168:	08 f0       	brcs	.+2      	; 0x16c <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj+0xa>
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	08 95       	ret

0000016e <_ZNK9container13CallbackArrayILj3EE17isCallbackDefinedEj>:
     16e:	66 0f       	add	r22, r22
     170:	77 1f       	adc	r23, r23
     172:	86 0f       	add	r24, r22
     174:	97 1f       	adc	r25, r23
     176:	fc 01       	movw	r30, r24
     178:	20 81       	ld	r18, Z
     17a:	31 81       	ldd	r19, Z+1	; 0x01
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	23 2b       	or	r18, r19
     180:	09 f4       	brne	.+2      	; 0x184 <_ZNK9container13CallbackArrayILj3EE17isCallbackDefinedEj+0x16>
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	08 95       	ret

00000186 <_ZN9container13CallbackArrayILj3EE6invokeEj>:
     186:	ef 92       	push	r14
     188:	ff 92       	push	r15
     18a:	1f 93       	push	r17
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	7c 01       	movw	r14, r24
     192:	eb 01       	movw	r28, r22
     194:	0e 94 b1 00 	call	0x162	; 0x162 <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj>
     198:	18 2f       	mov	r17, r24
     19a:	88 23       	and	r24, r24
     19c:	41 f0       	breq	.+16     	; 0x1ae <_ZN9container13CallbackArrayILj3EE6invokeEj+0x28>
     19e:	be 01       	movw	r22, r28
     1a0:	c7 01       	movw	r24, r14
     1a2:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZNK9container13CallbackArrayILj3EE17isCallbackDefinedEj>
     1a6:	88 23       	and	r24, r24
     1a8:	19 f0       	breq	.+6      	; 0x1b0 <_ZN9container13CallbackArrayILj3EE6invokeEj+0x2a>
     1aa:	10 e0       	ldi	r17, 0x00	; 0
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <_ZN9container13CallbackArrayILj3EE6invokeEj+0x2a>
     1ae:	11 e0       	ldi	r17, 0x01	; 1
     1b0:	11 11       	cpse	r17, r1
     1b2:	09 c0       	rjmp	.+18     	; 0x1c6 <_ZN9container13CallbackArrayILj3EE6invokeEj+0x40>
     1b4:	cc 0f       	add	r28, r28
     1b6:	dd 1f       	adc	r29, r29
     1b8:	ce 0d       	add	r28, r14
     1ba:	df 1d       	adc	r29, r15
     1bc:	e8 81       	ld	r30, Y
     1be:	f9 81       	ldd	r31, Y+1	; 0x01
     1c0:	09 95       	icall
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <_ZN9container13CallbackArrayILj3EE6invokeEj+0x42>
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	1f 91       	pop	r17
     1ce:	ff 90       	pop	r15
     1d0:	ef 90       	pop	r14
     1d2:	08 95       	ret

000001d4 <__vector_3>:
     1d4:	1f 92       	push	r1
     1d6:	0f 92       	push	r0
     1d8:	0f b6       	in	r0, 0x3f	; 63
     1da:	0f 92       	push	r0
     1dc:	11 24       	eor	r1, r1
     1de:	2f 93       	push	r18
     1e0:	3f 93       	push	r19
     1e2:	4f 93       	push	r20
     1e4:	5f 93       	push	r21
     1e6:	6f 93       	push	r22
     1e8:	7f 93       	push	r23
     1ea:	8f 93       	push	r24
     1ec:	9f 93       	push	r25
     1ee:	af 93       	push	r26
     1f0:	bf 93       	push	r27
     1f2:	ef 93       	push	r30
     1f4:	ff 93       	push	r31
     1f6:	60 e0       	ldi	r22, 0x00	; 0
     1f8:	70 e0       	ldi	r23, 0x00	; 0
     1fa:	8e e6       	ldi	r24, 0x6E	; 110
     1fc:	92 e0       	ldi	r25, 0x02	; 2
     1fe:	0e 94 c3 00 	call	0x186	; 0x186 <_ZN9container13CallbackArrayILj3EE6invokeEj>
     202:	ff 91       	pop	r31
     204:	ef 91       	pop	r30
     206:	bf 91       	pop	r27
     208:	af 91       	pop	r26
     20a:	9f 91       	pop	r25
     20c:	8f 91       	pop	r24
     20e:	7f 91       	pop	r23
     210:	6f 91       	pop	r22
     212:	5f 91       	pop	r21
     214:	4f 91       	pop	r20
     216:	3f 91       	pop	r19
     218:	2f 91       	pop	r18
     21a:	0f 90       	pop	r0
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	0f 90       	pop	r0
     220:	1f 90       	pop	r1
     222:	18 95       	reti

00000224 <__vector_4>:
     224:	1f 92       	push	r1
     226:	0f 92       	push	r0
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	0f 92       	push	r0
     22c:	11 24       	eor	r1, r1
     22e:	2f 93       	push	r18
     230:	3f 93       	push	r19
     232:	4f 93       	push	r20
     234:	5f 93       	push	r21
     236:	6f 93       	push	r22
     238:	7f 93       	push	r23
     23a:	8f 93       	push	r24
     23c:	9f 93       	push	r25
     23e:	af 93       	push	r26
     240:	bf 93       	push	r27
     242:	ef 93       	push	r30
     244:	ff 93       	push	r31
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	8e e6       	ldi	r24, 0x6E	; 110
     24c:	92 e0       	ldi	r25, 0x02	; 2
     24e:	0e 94 c3 00 	call	0x186	; 0x186 <_ZN9container13CallbackArrayILj3EE6invokeEj>
     252:	ff 91       	pop	r31
     254:	ef 91       	pop	r30
     256:	bf 91       	pop	r27
     258:	af 91       	pop	r26
     25a:	9f 91       	pop	r25
     25c:	8f 91       	pop	r24
     25e:	7f 91       	pop	r23
     260:	6f 91       	pop	r22
     262:	5f 91       	pop	r21
     264:	4f 91       	pop	r20
     266:	3f 91       	pop	r19
     268:	2f 91       	pop	r18
     26a:	0f 90       	pop	r0
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	0f 90       	pop	r0
     270:	1f 90       	pop	r1
     272:	18 95       	reti

00000274 <__vector_5>:
     274:	1f 92       	push	r1
     276:	0f 92       	push	r0
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	0f 92       	push	r0
     27c:	11 24       	eor	r1, r1
     27e:	2f 93       	push	r18
     280:	3f 93       	push	r19
     282:	4f 93       	push	r20
     284:	5f 93       	push	r21
     286:	6f 93       	push	r22
     288:	7f 93       	push	r23
     28a:	8f 93       	push	r24
     28c:	9f 93       	push	r25
     28e:	af 93       	push	r26
     290:	bf 93       	push	r27
     292:	ef 93       	push	r30
     294:	ff 93       	push	r31
     296:	62 e0       	ldi	r22, 0x02	; 2
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	8e e6       	ldi	r24, 0x6E	; 110
     29c:	92 e0       	ldi	r25, 0x02	; 2
     29e:	0e 94 c3 00 	call	0x186	; 0x186 <_ZN9container13CallbackArrayILj3EE6invokeEj>
     2a2:	ff 91       	pop	r31
     2a4:	ef 91       	pop	r30
     2a6:	bf 91       	pop	r27
     2a8:	af 91       	pop	r26
     2aa:	9f 91       	pop	r25
     2ac:	8f 91       	pop	r24
     2ae:	7f 91       	pop	r23
     2b0:	6f 91       	pop	r22
     2b2:	5f 91       	pop	r21
     2b4:	4f 91       	pop	r20
     2b6:	3f 91       	pop	r19
     2b8:	2f 91       	pop	r18
     2ba:	0f 90       	pop	r0
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	0f 90       	pop	r0
     2c0:	1f 90       	pop	r1
     2c2:	18 95       	reti

000002c4 <_Z41__static_initialization_and_destruction_0ii>:

// -----------------------------------------------------------------------------
ISR (PCINT2_vect) { invokeCallback(CallbackIndex::PortD); }

} // namespace atmega328p
} // namespace driver
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	39 f4       	brne	.+14     	; 0x2d6 <_Z41__static_initialization_and_destruction_0ii+0x12>
     2c8:	6f 3f       	cpi	r22, 0xFF	; 255
     2ca:	7f 4f       	sbci	r23, 0xFF	; 255
     2cc:	21 f4       	brne	.+8      	; 0x2d6 <_Z41__static_initialization_and_destruction_0ii+0x12>
    /** Pin registry (1 = reserved, 0 = free). */
    static uint32_t pinRegistry;
};

/** Pointers to callbacks. */
container::CallbackArray<GpioParam::IoPortCount> GpioParam::callbacks{};
     2ce:	8e e6       	ldi	r24, 0x6E	; 110
     2d0:	92 e0       	ldi	r25, 0x02	; 2
     2d2:	0e 94 ae 00 	call	0x15c	; 0x15c <_ZN9container13CallbackArrayILj3EEC1Ev>
     2d6:	08 95       	ret

000002d8 <_GLOBAL__sub_I__ZN6driver10atmega328p4Gpio9myHwPortBE>:

// -----------------------------------------------------------------------------
ISR (PCINT2_vect) { invokeCallback(CallbackIndex::PortD); }

} // namespace atmega328p
} // namespace driver
     2d8:	6f ef       	ldi	r22, 0xFF	; 255
     2da:	7f ef       	ldi	r23, 0xFF	; 255
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z41__static_initialization_and_destruction_0ii>
     2e4:	08 95       	ret

000002e6 <_GLOBAL__sub_D__ZN6driver10atmega328p4Gpio9myHwPortBE>:
     2e6:	6f ef       	ldi	r22, 0xFF	; 255
     2e8:	7f ef       	ldi	r23, 0xFF	; 255
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z41__static_initialization_and_destruction_0ii>
     2f2:	08 95       	ret

000002f4 <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc>:
    static constexpr char NewLine{'\n'};
};

// -----------------------------------------------------------------------------
void transmitChar(const char character) noexcept
{
     2f4:	0f 93       	push	r16
     2f6:	e8 2f       	mov	r30, r24
// -----------------------------------------------------------------------------
template <typename T>
constexpr bool read(const volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    return reg & (1ULL << bit);
     2f8:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	50 e0       	ldi	r21, 0x00	; 0
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	05 e0       	ldi	r16, 0x05	; 5
     30c:	0e 94 92 0c 	call	0x1924	; 0x1924 <__lshrdi3>
     310:	21 70       	andi	r18, 0x01	; 1
    // Wait until the previous character has been sent.
    while (!utils::read(UCSR0A, UDRE0));
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	a0 e0       	ldi	r26, 0x00	; 0
     322:	0e 94 ae 0c 	call	0x195c	; 0x195c <__cmpdi2_s8>
     326:	41 f3       	breq	.-48     	; 0x2f8 <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc+0x4>

    // Put the new character in the transmission register.
    UDR0 = character;
     328:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
     32c:	0f 91       	pop	r16
     32e:	08 95       	ret

00000330 <__tcf_0>:
{
public:
    /**
     * @brief Delete the serial device.
     */
    virtual ~SerialInterface() noexcept = default;
     330:	8e e0       	ldi	r24, 0x0E	; 14
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <_ZZN6driver10atmega328p6Serial11getInstanceEvE10myInstance+0x1>
     338:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <_ZZN6driver10atmega328p6Serial11getInstanceEvE10myInstance>
     33c:	08 95       	ret

0000033e <_ZNK6driver10atmega328p6Serial12baudRate_bpsEv>:
    // Return a reference to the singleton serial instance, cast to the corresponding interface.
    return myInstance; 
}

// -----------------------------------------------------------------------------
uint32_t Serial::baudRate_bps() const { return Param::BaudRate_bps; }
     33e:	60 e8       	ldi	r22, 0x80	; 128
     340:	75 e2       	ldi	r23, 0x25	; 37
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	08 95       	ret

00000348 <_ZNK6driver10atmega328p6Serial13isInitializedEv>:

// -----------------------------------------------------------------------------
bool Serial::isInitialized() const noexcept { return true; }
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	08 95       	ret

0000034c <_ZNK6driver10atmega328p6Serial9isEnabledEv>:

// -----------------------------------------------------------------------------
bool Serial::isEnabled() const noexcept { return myEnabled; }
     34c:	fc 01       	movw	r30, r24
     34e:	82 81       	ldd	r24, Z+2	; 0x02
     350:	08 95       	ret

00000352 <_ZN6driver10atmega328p6Serial10setEnabledEb>:

// -----------------------------------------------------------------------------
void Serial::setEnabled(const bool enable) noexcept { myEnabled = enable; }
     352:	fc 01       	movw	r30, r24
     354:	62 83       	std	Z+2, r22	; 0x02
     356:	08 95       	ret

00000358 <_ZNK6driver10atmega328p6Serial5printEPKc>:
    UDR0 = Param::CarriageReturn;
}

// -----------------------------------------------------------------------------
void Serial::print(const char* message) const noexcept
{
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	eb 01       	movw	r28, r22
    // Terminate the function if serial transmission isn't enabled.
    if (!myEnabled) { return; }
     35e:	fc 01       	movw	r30, r24
     360:	82 81       	ldd	r24, Z+2	; 0x02
     362:	88 23       	and	r24, r24
     364:	69 f0       	breq	.+26     	; 0x380 <_ZNK6driver10atmega328p6Serial5printEPKc+0x28>

    // Transmit each character of the string one by one.
    for (const char* it{message}; *it; ++it)
     366:	88 81       	ld	r24, Y
     368:	88 23       	and	r24, r24
     36a:	51 f0       	breq	.+20     	; 0x380 <_ZNK6driver10atmega328p6Serial5printEPKc+0x28>
    {
        transmitChar(*it);
     36c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc>
        
        // Send new line characters instead of carriage returns.
        if (Param::CarriageReturn == *it) 
     370:	88 81       	ld	r24, Y
     372:	8d 30       	cpi	r24, 0x0D	; 13
     374:	19 f4       	brne	.+6      	; 0x37c <_ZNK6driver10atmega328p6Serial5printEPKc+0x24>
        { 
            transmitChar(Param::NewLine); 
     376:	8a e0       	ldi	r24, 0x0A	; 10
     378:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc>
{
    // Terminate the function if serial transmission isn't enabled.
    if (!myEnabled) { return; }

    // Transmit each character of the string one by one.
    for (const char* it{message}; *it; ++it)
     37c:	21 96       	adiw	r28, 0x01	; 1
     37e:	f3 cf       	rjmp	.-26     	; 0x366 <_ZNK6driver10atmega328p6Serial5printEPKc+0xe>
        if (Param::CarriageReturn == *it) 
        { 
            transmitChar(Param::NewLine); 
        }
    }
}
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <_ZN6driver10atmega328p6SerialD1Ev>:
     386:	2e e0       	ldi	r18, 0x0E	; 14
     388:	31 e0       	ldi	r19, 0x01	; 1
     38a:	fc 01       	movw	r30, r24
     38c:	31 83       	std	Z+1, r19	; 0x01
     38e:	20 83       	st	Z, r18
     390:	08 95       	ret

00000392 <_ZN6driver10atmega328p6SerialD0Ev>:
     392:	2e e0       	ldi	r18, 0x0E	; 14
     394:	31 e0       	ldi	r19, 0x01	; 1
     396:	fc 01       	movw	r30, r24
     398:	31 83       	std	Z+1, r19	; 0x01
     39a:	20 83       	st	Z, r18
    Serial() noexcept;

    /**
     * @brief Delete the serial device.
     */
    ~Serial() noexcept override = default;
     39c:	63 e0       	ldi	r22, 0x03	; 3
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZdlPvj>
     3a4:	08 95       	ret

000003a6 <_ZN6driver10atmega328p6SerialC1Ev>:
// -----------------------------------------------------------------------------
void Serial::setEnabled(const bool enable) noexcept { myEnabled = enable; }

// -----------------------------------------------------------------------------
Serial::Serial() noexcept 
    : myEnabled{false}
     3a6:	20 e2       	ldi	r18, 0x20	; 32
     3a8:	31 e0       	ldi	r19, 0x01	; 1
     3aa:	fc 01       	movw	r30, r24
     3ac:	31 83       	std	Z+1, r19	; 0x01
     3ae:	20 83       	st	Z, r18
     3b0:	12 82       	std	Z+2, r1	; 0x02
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     3b2:	e1 ec       	ldi	r30, 0xC1	; 193
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	80 81       	ld	r24, Z
     3b8:	88 60       	ori	r24, 0x08	; 8
     3ba:	80 83       	st	Z, r24
     3bc:	e2 ec       	ldi	r30, 0xC2	; 194
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	80 81       	ld	r24, Z
     3c2:	82 60       	ori	r24, 0x02	; 2
     3c4:	80 83       	st	Z, r24
     3c6:	80 81       	ld	r24, Z
     3c8:	84 60       	ori	r24, 0x04	; 4
     3ca:	80 83       	st	Z, r24

    // Set the data size to eight bits per byte.
    utils::set(UCSR0C, UCSZ00, UCSZ01);

    // Set the baud rate to 9600 kbps.
    UBRR0 = baudRateValue;
     3cc:	87 e6       	ldi	r24, 0x67	; 103
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     3d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

    // Send carriage return to align the first message left.
    UDR0 = Param::CarriageReturn;
     3d8:	8d e0       	ldi	r24, 0x0D	; 13
     3da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     3de:	08 95       	ret

000003e0 <_ZN6driver10atmega328p6Serial11getInstanceEv>:

// -----------------------------------------------------------------------------
SerialInterface& Serial::getInstance() noexcept
{ 
    // Create and initialize the singleton serial instance (once only).
    static Serial myInstance{};
     3e0:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <_ZGVZN6driver10atmega328p6Serial11getInstanceEvE10myInstance>
     3e4:	81 11       	cpse	r24, r1
     3e6:	12 c0       	rjmp	.+36     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     3e8:	87 e7       	ldi	r24, 0x77	; 119
     3ea:	92 e0       	ldi	r25, 0x02	; 2
     3ec:	0e 94 31 0a 	call	0x1462	; 0x1462 <__cxa_guard_acquire>
     3f0:	89 2b       	or	r24, r25
     3f2:	61 f0       	breq	.+24     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     3f4:	84 e7       	ldi	r24, 0x74	; 116
     3f6:	92 e0       	ldi	r25, 0x02	; 2
     3f8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN6driver10atmega328p6SerialC1Ev>
     3fc:	87 e7       	ldi	r24, 0x77	; 119
     3fe:	92 e0       	ldi	r25, 0x02	; 2
     400:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__cxa_guard_release>
     404:	88 e9       	ldi	r24, 0x98	; 152
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	0e 94 77 00 	call	0xee	; 0xee <atexit>

    // Return a reference to the singleton serial instance, cast to the corresponding interface.
    return myInstance; 
}
     40c:	84 e7       	ldi	r24, 0x74	; 116
     40e:	92 e0       	ldi	r25, 0x02	; 2
     410:	08 95       	ret

00000412 <_ZN6driver10atmega328p5Timer11hasTimedOutEv>:
     412:	0f 93       	push	r16
     414:	1f 93       	push	r17
     416:	fc 01       	movw	r30, r24
     418:	90 85       	ldd	r25, Z+8	; 0x08
     41a:	99 23       	and	r25, r25
     41c:	81 f0       	breq	.+32     	; 0x43e <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x2c>
     41e:	a2 81       	ldd	r26, Z+2	; 0x02
     420:	b3 81       	ldd	r27, Z+3	; 0x03
     422:	0d 91       	ld	r16, X+
     424:	1d 91       	ld	r17, X+
     426:	2d 91       	ld	r18, X+
     428:	3c 91       	ld	r19, X
     42a:	44 81       	ldd	r20, Z+4	; 0x04
     42c:	55 81       	ldd	r21, Z+5	; 0x05
     42e:	66 81       	ldd	r22, Z+6	; 0x06
     430:	77 81       	ldd	r23, Z+7	; 0x07
     432:	04 17       	cp	r16, r20
     434:	15 07       	cpc	r17, r21
     436:	26 07       	cpc	r18, r22
     438:	37 07       	cpc	r19, r23
     43a:	18 f4       	brcc	.+6      	; 0x442 <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x30>
     43c:	03 c0       	rjmp	.+6      	; 0x444 <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x32>
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	01 c0       	rjmp	.+2      	; 0x444 <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x32>
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	91 11       	cpse	r25, r1
     446:	09 c0       	rjmp	.+18     	; 0x45a <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x48>
     448:	02 80       	ldd	r0, Z+2	; 0x02
     44a:	f3 81       	ldd	r31, Z+3	; 0x03
     44c:	e0 2d       	mov	r30, r0
     44e:	10 82       	st	Z, r1
     450:	11 82       	std	Z+1, r1	; 0x01
     452:	12 82       	std	Z+2, r1	; 0x02
     454:	13 82       	std	Z+3, r1	; 0x03
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	01 c0       	rjmp	.+2      	; 0x45c <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x4a>
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	08 95       	ret

00000462 <_ZN6driver10atmega328p5Timer9incrementEv>:
     462:	fc 01       	movw	r30, r24
     464:	80 85       	ldd	r24, Z+8	; 0x08
     466:	88 23       	and	r24, r24
     468:	79 f0       	breq	.+30     	; 0x488 <_ZN6driver10atmega328p5Timer9incrementEv+0x26>
     46a:	02 80       	ldd	r0, Z+2	; 0x02
     46c:	f3 81       	ldd	r31, Z+3	; 0x03
     46e:	e0 2d       	mov	r30, r0
     470:	40 81       	ld	r20, Z
     472:	51 81       	ldd	r21, Z+1	; 0x01
     474:	62 81       	ldd	r22, Z+2	; 0x02
     476:	73 81       	ldd	r23, Z+3	; 0x03
     478:	4f 5f       	subi	r20, 0xFF	; 255
     47a:	5f 4f       	sbci	r21, 0xFF	; 255
     47c:	6f 4f       	sbci	r22, 0xFF	; 255
     47e:	7f 4f       	sbci	r23, 0xFF	; 255
     480:	40 83       	st	Z, r20
     482:	51 83       	std	Z+1, r21	; 0x01
     484:	62 83       	std	Z+2, r22	; 0x02
     486:	73 83       	std	Z+3, r23	; 0x03
     488:	08 95       	ret

0000048a <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>:
     48a:	0f 93       	push	r16
     48c:	1f 93       	push	r17
     48e:	cf 93       	push	r28
     490:	83 30       	cpi	r24, 0x03	; 3
     492:	d0 f4       	brcc	.+52     	; 0x4c8 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh+0x3e>
     494:	e8 2f       	mov	r30, r24
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	ee 0f       	add	r30, r30
     49a:	ff 1f       	adc	r31, r31
     49c:	eb 57       	subi	r30, 0x7B	; 123
     49e:	fd 4f       	sbci	r31, 0xFD	; 253
     4a0:	00 81       	ld	r16, Z
     4a2:	11 81       	ldd	r17, Z+1	; 0x01
     4a4:	01 15       	cp	r16, r1
     4a6:	11 05       	cpc	r17, r1
     4a8:	79 f0       	breq	.+30     	; 0x4c8 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh+0x3e>
     4aa:	c8 2f       	mov	r28, r24
     4ac:	c8 01       	movw	r24, r16
     4ae:	0e 94 31 02 	call	0x462	; 0x462 <_ZN6driver10atmega328p5Timer9incrementEv>
     4b2:	c8 01       	movw	r24, r16
     4b4:	0e 94 09 02 	call	0x412	; 0x412 <_ZN6driver10atmega328p5Timer11hasTimedOutEv>
     4b8:	88 23       	and	r24, r24
     4ba:	31 f0       	breq	.+12     	; 0x4c8 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh+0x3e>
     4bc:	6c 2f       	mov	r22, r28
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	8f e7       	ldi	r24, 0x7F	; 127
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	0e 94 c3 00 	call	0x186	; 0x186 <_ZN9container13CallbackArrayILj3EE6invokeEj>
     4c8:	cf 91       	pop	r28
     4ca:	1f 91       	pop	r17
     4cc:	0f 91       	pop	r16
     4ce:	08 95       	ret

000004d0 <__vector_16>:
     4d0:	1f 92       	push	r1
     4d2:	0f 92       	push	r0
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	0f 92       	push	r0
     4d8:	11 24       	eor	r1, r1
     4da:	2f 93       	push	r18
     4dc:	3f 93       	push	r19
     4de:	4f 93       	push	r20
     4e0:	5f 93       	push	r21
     4e2:	6f 93       	push	r22
     4e4:	7f 93       	push	r23
     4e6:	8f 93       	push	r24
     4e8:	9f 93       	push	r25
     4ea:	af 93       	push	r26
     4ec:	bf 93       	push	r27
     4ee:	ef 93       	push	r30
     4f0:	ff 93       	push	r31
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>
     4f8:	ff 91       	pop	r31
     4fa:	ef 91       	pop	r30
     4fc:	bf 91       	pop	r27
     4fe:	af 91       	pop	r26
     500:	9f 91       	pop	r25
     502:	8f 91       	pop	r24
     504:	7f 91       	pop	r23
     506:	6f 91       	pop	r22
     508:	5f 91       	pop	r21
     50a:	4f 91       	pop	r20
     50c:	3f 91       	pop	r19
     50e:	2f 91       	pop	r18
     510:	0f 90       	pop	r0
     512:	0f be       	out	0x3f, r0	; 63
     514:	0f 90       	pop	r0
     516:	1f 90       	pop	r1
     518:	18 95       	reti

0000051a <__vector_11>:
     51a:	1f 92       	push	r1
     51c:	0f 92       	push	r0
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	0f 92       	push	r0
     522:	11 24       	eor	r1, r1
     524:	2f 93       	push	r18
     526:	3f 93       	push	r19
     528:	4f 93       	push	r20
     52a:	5f 93       	push	r21
     52c:	6f 93       	push	r22
     52e:	7f 93       	push	r23
     530:	8f 93       	push	r24
     532:	9f 93       	push	r25
     534:	af 93       	push	r26
     536:	bf 93       	push	r27
     538:	ef 93       	push	r30
     53a:	ff 93       	push	r31
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>
     542:	ff 91       	pop	r31
     544:	ef 91       	pop	r30
     546:	bf 91       	pop	r27
     548:	af 91       	pop	r26
     54a:	9f 91       	pop	r25
     54c:	8f 91       	pop	r24
     54e:	7f 91       	pop	r23
     550:	6f 91       	pop	r22
     552:	5f 91       	pop	r21
     554:	4f 91       	pop	r20
     556:	3f 91       	pop	r19
     558:	2f 91       	pop	r18
     55a:	0f 90       	pop	r0
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	0f 90       	pop	r0
     560:	1f 90       	pop	r1
     562:	18 95       	reti

00000564 <__vector_9>:
     564:	1f 92       	push	r1
     566:	0f 92       	push	r0
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	0f 92       	push	r0
     56c:	11 24       	eor	r1, r1
     56e:	2f 93       	push	r18
     570:	3f 93       	push	r19
     572:	4f 93       	push	r20
     574:	5f 93       	push	r21
     576:	6f 93       	push	r22
     578:	7f 93       	push	r23
     57a:	8f 93       	push	r24
     57c:	9f 93       	push	r25
     57e:	af 93       	push	r26
     580:	bf 93       	push	r27
     582:	ef 93       	push	r30
     584:	ff 93       	push	r31
     586:	82 e0       	ldi	r24, 0x02	; 2
     588:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>
     58c:	ff 91       	pop	r31
     58e:	ef 91       	pop	r30
     590:	bf 91       	pop	r27
     592:	af 91       	pop	r26
     594:	9f 91       	pop	r25
     596:	8f 91       	pop	r24
     598:	7f 91       	pop	r23
     59a:	6f 91       	pop	r22
     59c:	5f 91       	pop	r21
     59e:	4f 91       	pop	r20
     5a0:	3f 91       	pop	r19
     5a2:	2f 91       	pop	r18
     5a4:	0f 90       	pop	r0
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	0f 90       	pop	r0
     5aa:	1f 90       	pop	r1
     5ac:	18 95       	reti

000005ae <_Z41__static_initialization_and_destruction_0ii>:

// -----------------------------------------------------------------------------
ISR (TIMER2_OVF_vect) { invokeCallback(TimerIndex::timer2); }

} // namespace atmega328p
} // namespace driver
     5ae:	01 97       	sbiw	r24, 0x01	; 1
     5b0:	39 f4       	brne	.+14     	; 0x5c0 <_Z41__static_initialization_and_destruction_0ii+0x12>
     5b2:	6f 3f       	cpi	r22, 0xFF	; 255
     5b4:	7f 4f       	sbci	r23, 0xFF	; 255
     5b6:	21 f4       	brne	.+8      	; 0x5c0 <_Z41__static_initialization_and_destruction_0ii+0x12>

/** Array holding pointers to TimerParam::timers. */
Timer* TimerParam::TimerParam::timers[TimerParam::circuitCount]{};  

/** Array holding pointers to callbacks. */
CallbackArray<TimerParam::circuitCount> TimerParam::callbacks{};
     5b8:	8f e7       	ldi	r24, 0x7F	; 127
     5ba:	92 e0       	ldi	r25, 0x02	; 2
     5bc:	0e 94 ae 00 	call	0x15c	; 0x15c <_ZN9container13CallbackArrayILj3EEC1Ev>
     5c0:	08 95       	ret

000005c2 <_GLOBAL__sub_I__ZN6driver10atmega328p5TimerC2EmPFvvEb>:

// -----------------------------------------------------------------------------
ISR (TIMER2_OVF_vect) { invokeCallback(TimerIndex::timer2); }

} // namespace atmega328p
} // namespace driver
     5c2:	6f ef       	ldi	r22, 0xFF	; 255
     5c4:	7f ef       	ldi	r23, 0xFF	; 255
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z41__static_initialization_and_destruction_0ii>
     5ce:	08 95       	ret

000005d0 <_GLOBAL__sub_D__ZN6driver10atmega328p5TimerC2EmPFvvEb>:
     5d0:	6f ef       	ldi	r22, 0xFF	; 255
     5d2:	7f ef       	ldi	r23, 0xFF	; 255
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z41__static_initialization_and_destruction_0ii>
     5dc:	08 95       	ret

000005de <_Z41__static_initialization_and_destruction_0ii>:
    // Run the system perpetually on the target MCU.
    mySys->run();

    // This point should never be reached; the system is intended to run indefinitely on the target MCU.
    return 0;
}
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	49 f4       	brne	.+18     	; 0x5f4 <_Z41__static_initialization_and_destruction_0ii+0x16>
     5e2:	6f 3f       	cpi	r22, 0xFF	; 255
     5e4:	7f 4f       	sbci	r23, 0xFF	; 255
     5e6:	31 f4       	brne	.+12     	; 0x5f4 <_Z41__static_initialization_and_destruction_0ii+0x16>
{
/** Pointer to the system implementation. */
target::System* mySys{nullptr};
    
// Obtain a reference to the singleton serial device instance.
auto& serial{Serial::getInstance()};
     5e8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN6driver10atmega328p6Serial11getInstanceEv>
     5ec:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <_ZN12_GLOBAL__N_16serialE+0x1>
     5f0:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <_ZN12_GLOBAL__N_16serialE>
     5f4:	08 95       	ret

000005f6 <_ZNK9container6VectorIdE5emptyEv>:
template <typename T>
size_t Vector<T>::size() const noexcept { return mySize; }

// -----------------------------------------------------------------------------
template <typename T>
bool Vector<T>::empty() const noexcept { return mySize == 0U; }
     5f6:	fc 01       	movw	r30, r24
     5f8:	22 81       	ldd	r18, Z+2	; 0x02
     5fa:	33 81       	ldd	r19, Z+3	; 0x03
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	23 2b       	or	r18, r19
     600:	09 f0       	breq	.+2      	; 0x604 <_ZNK9container6VectorIdE5emptyEv+0xe>
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	08 95       	ret

00000606 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>:

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
{
    if (nullptr == format) { return false; }
     606:	61 15       	cp	r22, r1
     608:	71 05       	cpc	r23, r1
     60a:	49 f0       	breq	.+18     	; 0x61e <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_+0x18>
        char buffer[length]{'\0'};
        (void) snprintf(buffer, length, format, args...);
        print(buffer);
    }
    // Print the string.
    else { print(format); }
     60c:	dc 01       	movw	r26, r24
     60e:	ed 91       	ld	r30, X+
     610:	fc 91       	ld	r31, X
     612:	04 84       	ldd	r0, Z+12	; 0x0c
     614:	f5 85       	ldd	r31, Z+13	; 0x0d
     616:	e0 2d       	mov	r30, r0
     618:	09 95       	icall
    return true;
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	08 95       	ret

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
{
    if (nullptr == format) { return false; }
     61e:	80 e0       	ldi	r24, 0x00	; 0
        print(buffer);
    }
    // Print the string.
    else { print(format); }
    return true;
}
     620:	08 95       	ret

00000622 <_ZNK9container6VectorIdE5beginEv>:

// -----------------------------------------------------------------------------
template <typename T>
typename Vector<T>::ConstIterator Vector<T>::begin() const noexcept 
{ 
    return ConstIterator{myData};
     622:	fb 01       	movw	r30, r22
     624:	20 81       	ld	r18, Z
     626:	31 81       	ldd	r19, Z+1	; 0x01
     * @brief Create iterator pointing at given data.
     *
     * @param[in] data Pointer to data the iterator is set to point at.
     */
    ConstIterator(const T* data) noexcept
        : myData{data} {}
     628:	fc 01       	movw	r30, r24
     62a:	31 83       	std	Z+1, r19	; 0x01
     62c:	20 83       	st	Z, r18
}
     62e:	08 95       	ret

00000630 <_ZNK9container6VectorIdE3endEv>:

// -----------------------------------------------------------------------------
template <typename T>
typename Vector<T>::ConstIterator Vector<T>::end() const noexcept  
{ 
    return ConstIterator{myData + mySize};
     630:	fb 01       	movw	r30, r22
     632:	40 81       	ld	r20, Z
     634:	51 81       	ldd	r21, Z+1	; 0x01
     636:	22 81       	ldd	r18, Z+2	; 0x02
     638:	33 81       	ldd	r19, Z+3	; 0x03
     63a:	22 0f       	add	r18, r18
     63c:	33 1f       	adc	r19, r19
     63e:	22 0f       	add	r18, r18
     640:	33 1f       	adc	r19, r19
     642:	24 0f       	add	r18, r20
     644:	35 1f       	adc	r19, r21
     646:	fc 01       	movw	r30, r24
     648:	31 83       	std	Z+1, r19	; 0x01
     64a:	20 83       	st	Z, r18
}
     64c:	08 95       	ret

0000064e <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_>:
    virtual void print(const char* str) const = 0;
};

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
     64e:	cf 92       	push	r12
     650:	df 92       	push	r13
     652:	ef 92       	push	r14
     654:	ff 92       	push	r15
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
     662:	c5 56       	subi	r28, 0x65	; 101
     664:	d1 09       	sbc	r29, r1
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	f8 94       	cli
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	cd bf       	out	0x3d, r28	; 61
{
    if (nullptr == format) { return false; }
     670:	61 15       	cp	r22, r1
     672:	71 05       	cpc	r23, r1
     674:	81 f1       	breq	.+96     	; 0x6d6 <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_+0x88>
     676:	d9 01       	movw	r26, r18
     678:	6a 01       	movw	r12, r20
     67a:	8c 01       	movw	r16, r24

    // Format and insert given additional arguments (if any).
    if (0U < sizeof...(args))
    {
        constexpr size_t length{101U};
        char buffer[length]{'\0'};
     67c:	85 e6       	ldi	r24, 0x65	; 101
     67e:	9e 01       	movw	r18, r28
     680:	2f 5f       	subi	r18, 0xFF	; 255
     682:	3f 4f       	sbci	r19, 0xFF	; 255
     684:	79 01       	movw	r14, r18
     686:	f9 01       	movw	r30, r18
     688:	28 2f       	mov	r18, r24
     68a:	11 92       	st	Z+, r1
     68c:	2a 95       	dec	r18
     68e:	e9 f7       	brne	.-6      	; 0x68a <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_+0x3c>
        (void) snprintf(buffer, length, format, args...);
     690:	3c 91       	ld	r19, X
     692:	11 96       	adiw	r26, 0x01	; 1
     694:	4c 91       	ld	r20, X
     696:	d6 01       	movw	r26, r12
     698:	9c 91       	ld	r25, X
     69a:	11 96       	adiw	r26, 0x01	; 1
     69c:	2c 91       	ld	r18, X
     69e:	4f 93       	push	r20
     6a0:	3f 93       	push	r19
     6a2:	2f 93       	push	r18
     6a4:	9f 93       	push	r25
     6a6:	7f 93       	push	r23
     6a8:	6f 93       	push	r22
     6aa:	1f 92       	push	r1
     6ac:	8f 93       	push	r24
     6ae:	ff 92       	push	r15
     6b0:	ef 92       	push	r14
     6b2:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <snprintf>
        print(buffer);
     6b6:	d8 01       	movw	r26, r16
     6b8:	ed 91       	ld	r30, X+
     6ba:	fc 91       	ld	r31, X
     6bc:	04 84       	ldd	r0, Z+12	; 0x0c
     6be:	f5 85       	ldd	r31, Z+13	; 0x0d
     6c0:	e0 2d       	mov	r30, r0
     6c2:	b7 01       	movw	r22, r14
     6c4:	c8 01       	movw	r24, r16
     6c6:	09 95       	icall
    }
    // Print the string.
    else { print(format); }
    return true;
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	de bf       	out	0x3e, r29	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	cd bf       	out	0x3d, r28	; 61
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	01 c0       	rjmp	.+2      	; 0x6d8 <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_+0x8a>

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
{
    if (nullptr == format) { return false; }
     6d6:	80 e0       	ldi	r24, 0x00	; 0
        print(buffer);
    }
    // Print the string.
    else { print(format); }
    return true;
}
     6d8:	cb 59       	subi	r28, 0x9B	; 155
     6da:	df 4f       	sbci	r29, 0xFF	; 255
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	ff 90       	pop	r15
     6f0:	ef 90       	pop	r14
     6f2:	df 90       	pop	r13
     6f4:	cf 90       	pop	r12
     6f6:	08 95       	ret

000006f8 <_ZNK6driver15SerialInterface6printfIIiEEEbPKcDpRKT_>:
    virtual void print(const char* str) const = 0;
};

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
     6f8:	ef 92       	push	r14
     6fa:	ff 92       	push	r15
     6fc:	0f 93       	push	r16
     6fe:	1f 93       	push	r17
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
     708:	c5 56       	subi	r28, 0x65	; 101
     70a:	d1 09       	sbc	r29, r1
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	de bf       	out	0x3e, r29	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	cd bf       	out	0x3d, r28	; 61
{
    if (nullptr == format) { return false; }
     716:	61 15       	cp	r22, r1
     718:	71 05       	cpc	r23, r1
     71a:	41 f1       	breq	.+80     	; 0x76c <_ZNK6driver15SerialInterface6printfIIiEEEbPKcDpRKT_+0x74>
     71c:	fa 01       	movw	r30, r20
     71e:	8c 01       	movw	r16, r24

    // Format and insert given additional arguments (if any).
    if (0U < sizeof...(args))
    {
        constexpr size_t length{101U};
        char buffer[length]{'\0'};
     720:	85 e6       	ldi	r24, 0x65	; 101
     722:	9e 01       	movw	r18, r28
     724:	2f 5f       	subi	r18, 0xFF	; 255
     726:	3f 4f       	sbci	r19, 0xFF	; 255
     728:	79 01       	movw	r14, r18
     72a:	d9 01       	movw	r26, r18
     72c:	28 2f       	mov	r18, r24
     72e:	1d 92       	st	X+, r1
     730:	2a 95       	dec	r18
     732:	e9 f7       	brne	.-6      	; 0x72e <_ZNK6driver15SerialInterface6printfIIiEEEbPKcDpRKT_+0x36>
        (void) snprintf(buffer, length, format, args...);
     734:	90 81       	ld	r25, Z
     736:	21 81       	ldd	r18, Z+1	; 0x01
     738:	2f 93       	push	r18
     73a:	9f 93       	push	r25
     73c:	7f 93       	push	r23
     73e:	6f 93       	push	r22
     740:	1f 92       	push	r1
     742:	8f 93       	push	r24
     744:	ff 92       	push	r15
     746:	ef 92       	push	r14
     748:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <snprintf>
        print(buffer);
     74c:	d8 01       	movw	r26, r16
     74e:	ed 91       	ld	r30, X+
     750:	fc 91       	ld	r31, X
     752:	04 84       	ldd	r0, Z+12	; 0x0c
     754:	f5 85       	ldd	r31, Z+13	; 0x0d
     756:	e0 2d       	mov	r30, r0
     758:	b7 01       	movw	r22, r14
     75a:	c8 01       	movw	r24, r16
     75c:	09 95       	icall
    }
    // Print the string.
    else { print(format); }
    return true;
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	f8 94       	cli
     762:	de bf       	out	0x3e, r29	; 62
     764:	0f be       	out	0x3f, r0	; 63
     766:	cd bf       	out	0x3d, r28	; 61
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	01 c0       	rjmp	.+2      	; 0x76e <_ZNK6driver15SerialInterface6printfIIiEEEbPKcDpRKT_+0x76>

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
{
    if (nullptr == format) { return false; }
     76c:	80 e0       	ldi	r24, 0x00	; 0
        print(buffer);
    }
    // Print the string.
    else { print(format); }
    return true;
}
     76e:	cb 59       	subi	r28, 0x9B	; 155
     770:	df 4f       	sbci	r29, 0xFF	; 255
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	08 95       	ret

0000078a <_ZN12_GLOBAL__N_116printPredictionsERKN2ml6linreg9InterfaceERKN9container6VectorIdEE>:
 * 
 * @param[in] linreg Linear regression model to predict with.
 * @param[in] inputData Input data to predict with.
 */
void printPredictions(const ml::linreg::Interface& linReg, const container::Vector<double>& inputData) noexcept
{
     78a:	4f 92       	push	r4
     78c:	5f 92       	push	r5
     78e:	6f 92       	push	r6
     790:	7f 92       	push	r7
     792:	8f 92       	push	r8
     794:	9f 92       	push	r9
     796:	af 92       	push	r10
     798:	bf 92       	push	r11
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	2a 97       	sbiw	r28, 0x0a	; 10
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	de bf       	out	0x3e, r29	; 62
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	cd bf       	out	0x3d, r28	; 61
     7b6:	7c 01       	movw	r14, r24
     7b8:	8b 01       	movw	r16, r22
    // Terminate the function if no input data is provided.
    if (inputData.empty())
     7ba:	cb 01       	movw	r24, r22
     7bc:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZNK9container6VectorIdE5emptyEv>
     7c0:	88 23       	and	r24, r24
     7c2:	49 f0       	breq	.+18     	; 0x7d6 <_ZN12_GLOBAL__N_116printPredictionsERKN2ml6linreg9InterfaceERKN9container6VectorIdEE+0x4c>
    {
        serial.printf("No input data!\n");
     7c4:	6e e2       	ldi	r22, 0x2E	; 46
     7c6:	71 e0       	ldi	r23, 0x01	; 1
     7c8:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_ZN12_GLOBAL__N_16serialE>
     7cc:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <_ZN12_GLOBAL__N_16serialE+0x1>
     7d0:	0e 94 03 03 	call	0x606	; 0x606 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
        return;
     7d4:	a7 c0       	rjmp	.+334    	; 0x924 <__stack+0x25>
    }
    serial.printf("--------------------------------------------------------------------------------\n");
     7d6:	6e e3       	ldi	r22, 0x3E	; 62
     7d8:	71 e0       	ldi	r23, 0x01	; 1
     7da:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_ZN12_GLOBAL__N_16serialE>
     7de:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <_ZN12_GLOBAL__N_16serialE+0x1>
     7e2:	0e 94 03 03 	call	0x606	; 0x606 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
    // Perform prediction with each input value, print the result in the terminal.
    for (const auto& input : inputData)
     7e6:	b8 01       	movw	r22, r16
     7e8:	ce 01       	movw	r24, r28
     7ea:	09 96       	adiw	r24, 0x09	; 9
     7ec:	0e 94 11 03 	call	0x622	; 0x622 <_ZNK9container6VectorIdE5beginEv>
     7f0:	b8 01       	movw	r22, r16
     7f2:	ce 01       	movw	r24, r28
     7f4:	07 96       	adiw	r24, 0x07	; 7
     7f6:	0e 94 18 03 	call	0x630	; 0x630 <_ZNK9container6VectorIdE3endEv>
     *
     * @param[in] other Reference to other iterator.
     * 
     * @return True if the iterators point at the different addresses, false otherwise.
     */
    bool operator!=(const ConstIterator& other) const noexcept { return myData != other.myData; }
     7fa:	09 85       	ldd	r16, Y+9	; 0x09
     7fc:	1a 85       	ldd	r17, Y+10	; 0x0a
     7fe:	8f 81       	ldd	r24, Y+7	; 0x07
     800:	98 85       	ldd	r25, Y+8	; 0x08
     802:	80 17       	cp	r24, r16
     804:	91 07       	cpc	r25, r17
     806:	09 f4       	brne	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     808:	70 c0       	rjmp	.+224    	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
    {
        const auto prediction{linReg.predict(input)};
     80a:	d7 01       	movw	r26, r14
     80c:	ed 91       	ld	r30, X+
     80e:	fc 91       	ld	r31, X
     810:	06 80       	ldd	r0, Z+6	; 0x06
     812:	f7 81       	ldd	r31, Z+7	; 0x07
     814:	e0 2d       	mov	r30, r0
     816:	d8 01       	movw	r26, r16
     818:	4d 91       	ld	r20, X+
     81a:	5d 91       	ld	r21, X+
     81c:	6d 91       	ld	r22, X+
     81e:	7c 91       	ld	r23, X
     820:	c7 01       	movw	r24, r14
     822:	09 95       	icall
     824:	2b 01       	movw	r4, r22
     826:	3c 01       	movw	r6, r24
        const auto mV{input * 1000.0};
     828:	f8 01       	movw	r30, r16
     82a:	60 81       	ld	r22, Z
     82c:	71 81       	ldd	r23, Z+1	; 0x01
     82e:	82 81       	ldd	r24, Z+2	; 0x02
     830:	93 81       	ldd	r25, Z+3	; 0x03
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	4a e7       	ldi	r20, 0x7A	; 122
     838:	54 e4       	ldi	r21, 0x44	; 68
     83a:	0e 94 0f 0c 	call	0x181e	; 0x181e <__mulsf3>
     83e:	4b 01       	movw	r8, r22
     840:	5c 01       	movw	r10, r24
{
    // Case 1: number = 2.7 => we cast 2.7 + 0.5 to int => 3.2 is converted to 3.
    // Case 2: number = 2.3 => we cast 2.3 + 0.5 to int => 2.8 is converted to 2.
    // Case 3: number = -4.7 => we cast -4.7 - 0.5 to int => -5.2 is converted to -5.
    // Case 4: number = -4.2 => we cast -4.2 - 0.5 to int => -4.7 is converted to -4.
    return 0.0 <= number ? static_cast<int>(number + 0.5) : static_cast<int>(number - 0.5);
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	a9 01       	movw	r20, r18
     848:	c3 01       	movw	r24, r6
     84a:	b2 01       	movw	r22, r4
     84c:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__gesf2>
     850:	88 23       	and	r24, r24
     852:	5c f0       	brlt	.+22     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	5f e3       	ldi	r21, 0x3F	; 63
     85c:	c3 01       	movw	r24, r6
     85e:	b2 01       	movw	r22, r4
     860:	0e 94 3f 0a 	call	0x147e	; 0x147e <__addsf3>
     864:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fixsfsi>
     868:	0a c0       	rjmp	.+20     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	5f e3       	ldi	r21, 0x3F	; 63
     872:	c3 01       	movw	r24, r6
     874:	b2 01       	movw	r22, r4
     876:	0e 94 3e 0a 	call	0x147c	; 0x147c <__subsf3>
     87a:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fixsfsi>
    // Perform prediction with each input value, print the result in the terminal.
    for (const auto& input : inputData)
    {
        const auto prediction{linReg.predict(input)};
        const auto mV{input * 1000.0};
        serial.printf("Input: %d, predicted output: %d mV\n", round(mV), round(prediction));
     87e:	7e 83       	std	Y+6, r23	; 0x06
     880:	6d 83       	std	Y+5, r22	; 0x05
{
    // Case 1: number = 2.7 => we cast 2.7 + 0.5 to int => 3.2 is converted to 3.
    // Case 2: number = 2.3 => we cast 2.3 + 0.5 to int => 2.8 is converted to 2.
    // Case 3: number = -4.7 => we cast -4.7 - 0.5 to int => -5.2 is converted to -5.
    // Case 4: number = -4.2 => we cast -4.2 - 0.5 to int => -4.7 is converted to -4.
    return 0.0 <= number ? static_cast<int>(number + 0.5) : static_cast<int>(number - 0.5);
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	a9 01       	movw	r20, r18
     888:	c5 01       	movw	r24, r10
     88a:	b4 01       	movw	r22, r8
     88c:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__gesf2>
     890:	88 23       	and	r24, r24
     892:	5c f0       	brlt	.+22     	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	40 e0       	ldi	r20, 0x00	; 0
     89a:	5f e3       	ldi	r21, 0x3F	; 63
     89c:	c5 01       	movw	r24, r10
     89e:	b4 01       	movw	r22, r8
     8a0:	0e 94 3f 0a 	call	0x147e	; 0x147e <__addsf3>
     8a4:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fixsfsi>
     8a8:	0a c0       	rjmp	.+20     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	40 e0       	ldi	r20, 0x00	; 0
     8b0:	5f e3       	ldi	r21, 0x3F	; 63
     8b2:	c5 01       	movw	r24, r10
     8b4:	b4 01       	movw	r22, r8
     8b6:	0e 94 3e 0a 	call	0x147c	; 0x147c <__subsf3>
     8ba:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fixsfsi>
    // Perform prediction with each input value, print the result in the terminal.
    for (const auto& input : inputData)
    {
        const auto prediction{linReg.predict(input)};
        const auto mV{input * 1000.0};
        serial.printf("Input: %d, predicted output: %d mV\n", round(mV), round(prediction));
     8be:	7c 83       	std	Y+4, r23	; 0x04
     8c0:	6b 83       	std	Y+3, r22	; 0x03
     8c2:	9e 01       	movw	r18, r28
     8c4:	2b 5f       	subi	r18, 0xFB	; 251
     8c6:	3f 4f       	sbci	r19, 0xFF	; 255
     8c8:	ae 01       	movw	r20, r28
     8ca:	4d 5f       	subi	r20, 0xFD	; 253
     8cc:	5f 4f       	sbci	r21, 0xFF	; 255
     8ce:	60 e9       	ldi	r22, 0x90	; 144
     8d0:	71 e0       	ldi	r23, 0x01	; 1
     8d2:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_ZN12_GLOBAL__N_16serialE>
     8d6:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <_ZN12_GLOBAL__N_16serialE+0x1>
     8da:	0e 94 27 03 	call	0x64e	; 0x64e <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_>
     * 
     * @return Reference to this iterator.
     */
    ConstIterator& operator++() noexcept
    {
        ++myData;
     8de:	89 85       	ldd	r24, Y+9	; 0x09
     8e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     8e2:	04 96       	adiw	r24, 0x04	; 4
     8e4:	9a 87       	std	Y+10, r25	; 0x0a
     8e6:	89 87       	std	Y+9, r24	; 0x09
     8e8:	88 cf       	rjmp	.-240    	; 0x7fa <_ZN12_GLOBAL__N_116printPredictionsERKN2ml6linreg9InterfaceERKN9container6VectorIdEE+0x70>
    }
    serial.printf("Epochs used: %d\n", linReg.getEpochsUsed());
     8ea:	d7 01       	movw	r26, r14
     8ec:	ed 91       	ld	r30, X+
     8ee:	fc 91       	ld	r31, X
     8f0:	04 80       	ldd	r0, Z+4	; 0x04
     8f2:	f5 81       	ldd	r31, Z+5	; 0x05
     8f4:	e0 2d       	mov	r30, r0
     8f6:	c7 01       	movw	r24, r14
     8f8:	09 95       	icall
     8fa:	9a 83       	std	Y+2, r25	; 0x02
     8fc:	89 83       	std	Y+1, r24	; 0x01
     8fe:	ae 01       	movw	r20, r28
     900:	4f 5f       	subi	r20, 0xFF	; 255
     902:	5f 4f       	sbci	r21, 0xFF	; 255
     904:	64 eb       	ldi	r22, 0xB4	; 180
     906:	71 e0       	ldi	r23, 0x01	; 1
     908:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_ZN12_GLOBAL__N_16serialE>
     90c:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <_ZN12_GLOBAL__N_16serialE+0x1>
     910:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZNK6driver15SerialInterface6printfIIiEEEbPKcDpRKT_>
    serial.printf("--------------------------------------------------------------------------------\n\n");
     914:	65 ec       	ldi	r22, 0xC5	; 197
     916:	71 e0       	ldi	r23, 0x01	; 1
     918:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_ZN12_GLOBAL__N_16serialE>
     91c:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <_ZN12_GLOBAL__N_16serialE+0x1>
     920:	0e 94 03 03 	call	0x606	; 0x606 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
}
     924:	2a 96       	adiw	r28, 0x0a	; 10
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	bf 90       	pop	r11
     93e:	af 90       	pop	r10
     940:	9f 90       	pop	r9
     942:	8f 90       	pop	r8
     944:	7f 90       	pop	r7
     946:	6f 90       	pop	r6
     948:	5f 90       	pop	r5
     94a:	4f 90       	pop	r4
     94c:	08 95       	ret

0000094e <_ZN9container6VectorIdEC1Ev>:
{
// -----------------------------------------------------------------------------
template <typename T>
Vector<T>::Vector() noexcept
    : myData{nullptr}
    , mySize{} {}
     94e:	fc 01       	movw	r30, r24
     950:	11 82       	std	Z+1, r1	; 0x01
     952:	10 82       	st	Z, r1
     954:	13 82       	std	Z+3, r1	; 0x03
     956:	12 82       	std	Z+2, r1	; 0x02
     958:	08 95       	ret

0000095a <_ZN9container6VectorIdE5clearEv>:
template <typename T>
const T* Vector<T>::last() const noexcept { return mySize > 0U ? end() - 1U : nullptr; }

// -----------------------------------------------------------------------------
template <typename T>
void Vector<T>::clear() noexcept 
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	ec 01       	movw	r28, r24

// -----------------------------------------------------------------------------
template <typename T>
inline void deleteMemory(T* &block) noexcept
{
    free(block);
     960:	88 81       	ld	r24, Y
     962:	99 81       	ldd	r25, Y+1	; 0x01
     964:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <free>
    block = nullptr;
     968:	19 82       	std	Y+1, r1	; 0x01
     96a:	18 82       	st	Y, r1
{
    utils::deleteMemory<T>(myData);
    myData = nullptr;
    mySize = 0U;
     96c:	1b 82       	std	Y+3, r1	; 0x03
     96e:	1a 82       	std	Y+2, r1	; 0x02
}
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <_ZN9container6VectorIdED1Ev>:

// -----------------------------------------------------------------------------
template <typename T>
Vector<T>::~Vector() noexcept 
{ 
    clear(); 
     976:	0e 94 ad 04 	call	0x95a	; 0x95a <_ZN9container6VectorIdE5clearEv>
     97a:	08 95       	ret

0000097c <_ZN9container6VectorIdE6resizeEj>:
    mySize = 0U;
}

// -----------------------------------------------------------------------------
template <typename T>
bool Vector<T>::resize(const size_t newSize) noexcept 
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	ec 01       	movw	r28, r24
     986:	8b 01       	movw	r16, r22

// -----------------------------------------------------------------------------
template <typename T>
inline T* reallocMemory(T* block, const size_t newSize) noexcept
{
    return static_cast<T*>(realloc(block, sizeof(T) * newSize));
     988:	66 0f       	add	r22, r22
     98a:	77 1f       	adc	r23, r23
     98c:	66 0f       	add	r22, r22
     98e:	77 1f       	adc	r23, r23
     990:	88 81       	ld	r24, Y
     992:	99 81       	ldd	r25, Y+1	; 0x01
     994:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <realloc>
{
    auto copy{utils::reallocMemory<T>(myData, newSize)};
    if (copy == nullptr) { return false; }
     998:	00 97       	sbiw	r24, 0x00	; 0
     99a:	31 f0       	breq	.+12     	; 0x9a8 <_ZN9container6VectorIdE6resizeEj+0x2c>
    myData = copy;
     99c:	99 83       	std	Y+1, r25	; 0x01
     99e:	88 83       	st	Y, r24
    mySize = newSize;
     9a0:	1b 83       	std	Y+3, r17	; 0x03
     9a2:	0a 83       	std	Y+2, r16	; 0x02
    return true;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	01 c0       	rjmp	.+2      	; 0x9aa <_ZN9container6VectorIdE6resizeEj+0x2e>
// -----------------------------------------------------------------------------
template <typename T>
bool Vector<T>::resize(const size_t newSize) noexcept 
{
    auto copy{utils::reallocMemory<T>(myData, newSize)};
    if (copy == nullptr) { return false; }
     9a8:	80 e0       	ldi	r24, 0x00	; 0
    myData = copy;
    mySize = newSize;
    return true;
}
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	08 95       	ret

000009b4 <_ZN9container6VectorIdE6assignILj11EEEvRAT__Kdj>:
}

// -----------------------------------------------------------------------------
template <typename T>
template <size_t ValueCount>
void Vector<T>::assign(const T (&values)[ValueCount], const size_t offset) noexcept 
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
{
    for (size_t i{}; i < ValueCount && offset + i < mySize; ++i) 
     9bc:	a0 e0       	ldi	r26, 0x00	; 0
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	ab 30       	cpi	r26, 0x0B	; 11
     9c2:	b1 05       	cpc	r27, r1
     9c4:	10 f5       	brcc	.+68     	; 0xa0a <_ZN9container6VectorIdE6assignILj11EEEvRAT__Kdj+0x56>
     9c6:	9d 01       	movw	r18, r26
     9c8:	24 0f       	add	r18, r20
     9ca:	35 1f       	adc	r19, r21
     9cc:	ec 01       	movw	r28, r24
     9ce:	ea 81       	ldd	r30, Y+2	; 0x02
     9d0:	fb 81       	ldd	r31, Y+3	; 0x03
     9d2:	2e 17       	cp	r18, r30
     9d4:	3f 07       	cpc	r19, r31
     9d6:	c8 f4       	brcc	.+50     	; 0xa0a <_ZN9container6VectorIdE6assignILj11EEEvRAT__Kdj+0x56>
    {
        myData[offset + i] = values[i];
     9d8:	22 0f       	add	r18, r18
     9da:	33 1f       	adc	r19, r19
     9dc:	22 0f       	add	r18, r18
     9de:	33 1f       	adc	r19, r19
     9e0:	e8 81       	ld	r30, Y
     9e2:	f9 81       	ldd	r31, Y+1	; 0x01
     9e4:	e2 0f       	add	r30, r18
     9e6:	f3 1f       	adc	r31, r19
     9e8:	ed 01       	movw	r28, r26
     9ea:	cc 0f       	add	r28, r28
     9ec:	dd 1f       	adc	r29, r29
     9ee:	cc 0f       	add	r28, r28
     9f0:	dd 1f       	adc	r29, r29
     9f2:	c6 0f       	add	r28, r22
     9f4:	d7 1f       	adc	r29, r23
     9f6:	08 81       	ld	r16, Y
     9f8:	19 81       	ldd	r17, Y+1	; 0x01
     9fa:	2a 81       	ldd	r18, Y+2	; 0x02
     9fc:	3b 81       	ldd	r19, Y+3	; 0x03
     9fe:	00 83       	st	Z, r16
     a00:	11 83       	std	Z+1, r17	; 0x01
     a02:	22 83       	std	Z+2, r18	; 0x02
     a04:	33 83       	std	Z+3, r19	; 0x03
// -----------------------------------------------------------------------------
template <typename T>
template <size_t ValueCount>
void Vector<T>::assign(const T (&values)[ValueCount], const size_t offset) noexcept 
{
    for (size_t i{}; i < ValueCount && offset + i < mySize; ++i) 
     a06:	11 96       	adiw	r26, 0x01	; 1
     a08:	db cf       	rjmp	.-74     	; 0x9c0 <_ZN9container6VectorIdE6assignILj11EEEvRAT__Kdj+0xc>
    {
        myData[offset + i] = values[i];
    }
}
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	08 95       	ret

00000a14 <_ZN9container6VectorIdE9addValuesILj11EEEbRAT__Kd>:
}

// -----------------------------------------------------------------------------
template <typename T>
template <size_t ValueCount>
bool Vector<T>::addValues(const T (&values)[ValueCount]) noexcept 
     a14:	cf 92       	push	r12
     a16:	df 92       	push	r13
     a18:	ef 92       	push	r14
     a1a:	ff 92       	push	r15
     a1c:	1f 93       	push	r17
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	ec 01       	movw	r28, r24
     a24:	6b 01       	movw	r12, r22
{
    const auto offset{mySize};
     a26:	ea 80       	ldd	r14, Y+2	; 0x02
     a28:	fb 80       	ldd	r15, Y+3	; 0x03
    if (!resize(mySize + ValueCount)) { return false; }
     a2a:	b7 01       	movw	r22, r14
     a2c:	65 5f       	subi	r22, 0xF5	; 245
     a2e:	7f 4f       	sbci	r23, 0xFF	; 255
     a30:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN9container6VectorIdE6resizeEj>
     a34:	18 2f       	mov	r17, r24
     a36:	88 23       	and	r24, r24
     a38:	29 f0       	breq	.+10     	; 0xa44 <_ZN9container6VectorIdE9addValuesILj11EEEbRAT__Kd+0x30>
    assign(values, offset);
     a3a:	a7 01       	movw	r20, r14
     a3c:	b6 01       	movw	r22, r12
     a3e:	ce 01       	movw	r24, r28
     a40:	0e 94 da 04 	call	0x9b4	; 0x9b4 <_ZN9container6VectorIdE6assignILj11EEEvRAT__Kdj>
    return true;
}
     a44:	81 2f       	mov	r24, r17
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	df 90       	pop	r13
     a52:	cf 90       	pop	r12
     a54:	08 95       	ret

00000a56 <_ZN9container6VectorIdEC1IIdddddddddddEEEDpOKT_>:
}

// -----------------------------------------------------------------------------
template <typename T>
template <typename... Values>
Vector<T>::Vector(const Values&&... values) noexcept
     a56:	2f 92       	push	r2
     a58:	3f 92       	push	r3
     a5a:	4f 92       	push	r4
     a5c:	5f 92       	push	r5
     a5e:	6f 92       	push	r6
     a60:	7f 92       	push	r7
     a62:	8f 92       	push	r8
     a64:	9f 92       	push	r9
     a66:	af 92       	push	r10
     a68:	bf 92       	push	r11
     a6a:	cf 92       	push	r12
     a6c:	df 92       	push	r13
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
     a7e:	ae 97       	sbiw	r28, 0x2e	; 46
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
     a8a:	3c 01       	movw	r6, r24
     a8c:	2b 01       	movw	r4, r22
     a8e:	1a 01       	movw	r2, r20
     a90:	3e a7       	std	Y+46, r19	; 0x2e
     a92:	2d a7       	std	Y+45, r18	; 0x2d
    : Vector()
     a94:	0e 94 a7 04 	call	0x94e	; 0x94e <_ZN9container6VectorIdEC1Ev>
{
    const T array[sizeof...(values)]{(values)...};
     a98:	f2 01       	movw	r30, r4
     a9a:	80 81       	ld	r24, Z
     a9c:	91 81       	ldd	r25, Z+1	; 0x01
     a9e:	a2 81       	ldd	r26, Z+2	; 0x02
     aa0:	b3 81       	ldd	r27, Z+3	; 0x03
     aa2:	89 83       	std	Y+1, r24	; 0x01
     aa4:	9a 83       	std	Y+2, r25	; 0x02
     aa6:	ab 83       	std	Y+3, r26	; 0x03
     aa8:	bc 83       	std	Y+4, r27	; 0x04
     aaa:	f1 01       	movw	r30, r2
     aac:	80 81       	ld	r24, Z
     aae:	91 81       	ldd	r25, Z+1	; 0x01
     ab0:	a2 81       	ldd	r26, Z+2	; 0x02
     ab2:	b3 81       	ldd	r27, Z+3	; 0x03
     ab4:	8d 83       	std	Y+5, r24	; 0x05
     ab6:	9e 83       	std	Y+6, r25	; 0x06
     ab8:	af 83       	std	Y+7, r26	; 0x07
     aba:	b8 87       	std	Y+8, r27	; 0x08
     abc:	ed a5       	ldd	r30, Y+45	; 0x2d
     abe:	fe a5       	ldd	r31, Y+46	; 0x2e
     ac0:	80 81       	ld	r24, Z
     ac2:	91 81       	ldd	r25, Z+1	; 0x01
     ac4:	a2 81       	ldd	r26, Z+2	; 0x02
     ac6:	b3 81       	ldd	r27, Z+3	; 0x03
     ac8:	89 87       	std	Y+9, r24	; 0x09
     aca:	9a 87       	std	Y+10, r25	; 0x0a
     acc:	ab 87       	std	Y+11, r26	; 0x0b
     ace:	bc 87       	std	Y+12, r27	; 0x0c
     ad0:	f8 01       	movw	r30, r16
     ad2:	80 81       	ld	r24, Z
     ad4:	91 81       	ldd	r25, Z+1	; 0x01
     ad6:	a2 81       	ldd	r26, Z+2	; 0x02
     ad8:	b3 81       	ldd	r27, Z+3	; 0x03
     ada:	8d 87       	std	Y+13, r24	; 0x0d
     adc:	9e 87       	std	Y+14, r25	; 0x0e
     ade:	af 87       	std	Y+15, r26	; 0x0f
     ae0:	b8 8b       	std	Y+16, r27	; 0x10
     ae2:	f7 01       	movw	r30, r14
     ae4:	80 81       	ld	r24, Z
     ae6:	91 81       	ldd	r25, Z+1	; 0x01
     ae8:	a2 81       	ldd	r26, Z+2	; 0x02
     aea:	b3 81       	ldd	r27, Z+3	; 0x03
     aec:	89 8b       	std	Y+17, r24	; 0x11
     aee:	9a 8b       	std	Y+18, r25	; 0x12
     af0:	ab 8b       	std	Y+19, r26	; 0x13
     af2:	bc 8b       	std	Y+20, r27	; 0x14
     af4:	f6 01       	movw	r30, r12
     af6:	80 81       	ld	r24, Z
     af8:	91 81       	ldd	r25, Z+1	; 0x01
     afa:	a2 81       	ldd	r26, Z+2	; 0x02
     afc:	b3 81       	ldd	r27, Z+3	; 0x03
     afe:	8d 8b       	std	Y+21, r24	; 0x15
     b00:	9e 8b       	std	Y+22, r25	; 0x16
     b02:	af 8b       	std	Y+23, r26	; 0x17
     b04:	b8 8f       	std	Y+24, r27	; 0x18
     b06:	f5 01       	movw	r30, r10
     b08:	80 81       	ld	r24, Z
     b0a:	91 81       	ldd	r25, Z+1	; 0x01
     b0c:	a2 81       	ldd	r26, Z+2	; 0x02
     b0e:	b3 81       	ldd	r27, Z+3	; 0x03
     b10:	89 8f       	std	Y+25, r24	; 0x19
     b12:	9a 8f       	std	Y+26, r25	; 0x1a
     b14:	ab 8f       	std	Y+27, r26	; 0x1b
     b16:	bc 8f       	std	Y+28, r27	; 0x1c
     b18:	f4 01       	movw	r30, r8
     b1a:	80 81       	ld	r24, Z
     b1c:	91 81       	ldd	r25, Z+1	; 0x01
     b1e:	a2 81       	ldd	r26, Z+2	; 0x02
     b20:	b3 81       	ldd	r27, Z+3	; 0x03
     b22:	8d 8f       	std	Y+29, r24	; 0x1d
     b24:	9e 8f       	std	Y+30, r25	; 0x1e
     b26:	af 8f       	std	Y+31, r26	; 0x1f
     b28:	b8 a3       	std	Y+32, r27	; 0x20
     b2a:	25 96       	adiw	r28, 0x05	; 5
     b2c:	ee ad       	ldd	r30, Y+62	; 0x3e
     b2e:	ff ad       	ldd	r31, Y+63	; 0x3f
     b30:	25 97       	sbiw	r28, 0x05	; 5
     b32:	80 81       	ld	r24, Z
     b34:	91 81       	ldd	r25, Z+1	; 0x01
     b36:	a2 81       	ldd	r26, Z+2	; 0x02
     b38:	b3 81       	ldd	r27, Z+3	; 0x03
     b3a:	89 a3       	std	Y+33, r24	; 0x21
     b3c:	9a a3       	std	Y+34, r25	; 0x22
     b3e:	ab a3       	std	Y+35, r26	; 0x23
     b40:	bc a3       	std	Y+36, r27	; 0x24
     b42:	27 96       	adiw	r28, 0x07	; 7
     b44:	ee ad       	ldd	r30, Y+62	; 0x3e
     b46:	ff ad       	ldd	r31, Y+63	; 0x3f
     b48:	27 97       	sbiw	r28, 0x07	; 7
     b4a:	80 81       	ld	r24, Z
     b4c:	91 81       	ldd	r25, Z+1	; 0x01
     b4e:	a2 81       	ldd	r26, Z+2	; 0x02
     b50:	b3 81       	ldd	r27, Z+3	; 0x03
     b52:	8d a3       	std	Y+37, r24	; 0x25
     b54:	9e a3       	std	Y+38, r25	; 0x26
     b56:	af a3       	std	Y+39, r26	; 0x27
     b58:	b8 a7       	std	Y+40, r27	; 0x28
     b5a:	29 96       	adiw	r28, 0x09	; 9
     b5c:	ee ad       	ldd	r30, Y+62	; 0x3e
     b5e:	ff ad       	ldd	r31, Y+63	; 0x3f
     b60:	29 97       	sbiw	r28, 0x09	; 9
     b62:	80 81       	ld	r24, Z
     b64:	91 81       	ldd	r25, Z+1	; 0x01
     b66:	a2 81       	ldd	r26, Z+2	; 0x02
     b68:	b3 81       	ldd	r27, Z+3	; 0x03
     b6a:	89 a7       	std	Y+41, r24	; 0x29
     b6c:	9a a7       	std	Y+42, r25	; 0x2a
     b6e:	ab a7       	std	Y+43, r26	; 0x2b
     b70:	bc a7       	std	Y+44, r27	; 0x2c
    addValues(array);
     b72:	be 01       	movw	r22, r28
     b74:	6f 5f       	subi	r22, 0xFF	; 255
     b76:	7f 4f       	sbci	r23, 0xFF	; 255
     b78:	c3 01       	movw	r24, r6
     b7a:	0e 94 0a 05 	call	0xa14	; 0xa14 <_ZN9container6VectorIdE9addValuesILj11EEEbRAT__Kd>
}
     b7e:	ae 96       	adiw	r28, 0x2e	; 46
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	de bf       	out	0x3e, r29	; 62
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	df 90       	pop	r13
     b98:	cf 90       	pop	r12
     b9a:	bf 90       	pop	r11
     b9c:	af 90       	pop	r10
     b9e:	9f 90       	pop	r9
     ba0:	8f 90       	pop	r8
     ba2:	7f 90       	pop	r7
     ba4:	6f 90       	pop	r6
     ba6:	5f 90       	pop	r5
     ba8:	4f 90       	pop	r4
     baa:	3f 90       	pop	r3
     bac:	2f 90       	pop	r2
     bae:	08 95       	ret

00000bb0 <_ZN9container6VectorIjE5clearEv>:
template <typename T>
const T* Vector<T>::last() const noexcept { return mySize > 0U ? end() - 1U : nullptr; }

// -----------------------------------------------------------------------------
template <typename T>
void Vector<T>::clear() noexcept 
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	ec 01       	movw	r28, r24

// -----------------------------------------------------------------------------
template <typename T>
inline void deleteMemory(T* &block) noexcept
{
    free(block);
     bb6:	88 81       	ld	r24, Y
     bb8:	99 81       	ldd	r25, Y+1	; 0x01
     bba:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <free>
    block = nullptr;
     bbe:	19 82       	std	Y+1, r1	; 0x01
     bc0:	18 82       	st	Y, r1
{
    utils::deleteMemory<T>(myData);
    myData = nullptr;
    mySize = 0U;
     bc2:	1b 82       	std	Y+3, r1	; 0x03
     bc4:	1a 82       	std	Y+2, r1	; 0x02
}
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	08 95       	ret

00000bcc <_ZN9container6VectorIjED1Ev>:

// -----------------------------------------------------------------------------
template <typename T>
Vector<T>::~Vector() noexcept 
{ 
    clear(); 
     bcc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN9container6VectorIjE5clearEv>
     bd0:	08 95       	ret

00000bd2 <_ZN2ml6linreg6LinRegD1Ev>:
                    const container::Vector<double>& trainOutput) noexcept;

    /**
     * @brief Delete the constructor as default.
     */
    ~LinReg() noexcept override = default;
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	ec 01       	movw	r28, r24
     bd8:	8f e5       	ldi	r24, 0x5F	; 95
     bda:	92 e0       	ldi	r25, 0x02	; 2
     bdc:	99 83       	std	Y+1, r25	; 0x01
     bde:	88 83       	st	Y, r24
     be0:	ce 01       	movw	r24, r28
     be2:	4c 96       	adiw	r24, 0x1c	; 28
     be4:	0e 94 e6 05 	call	0xbcc	; 0xbcc <_ZN9container6VectorIjED1Ev>
     be8:	ce 01       	movw	r24, r28
     bea:	46 96       	adiw	r24, 0x16	; 22
     bec:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN9container6VectorIdED1Ev>
     bf0:	ce 01       	movw	r24, r28
     bf2:	40 96       	adiw	r24, 0x10	; 16
     bf4:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN9container6VectorIdED1Ev>
{
public:
    /**
     * @brief Delete the constructor.
     */     
    virtual ~Interface() noexcept = default;
     bf8:	8f e4       	ldi	r24, 0x4F	; 79
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	99 83       	std	Y+1, r25	; 0x01
     bfe:	88 83       	st	Y, r24
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <main>:
 * 
 * @return 0 on termination of the program (should never occur).
 */

int main()
{
     c06:	8f 92       	push	r8
     c08:	9f 92       	push	r9
     c0a:	af 92       	push	r10
     c0c:	bf 92       	push	r11
     c0e:	cf 92       	push	r12
     c10:	df 92       	push	r13
     c12:	ef 92       	push	r14
     c14:	ff 92       	push	r15
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	c0 58       	subi	r28, 0x80	; 128
     c24:	d1 09       	sbc	r29, r1
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
    serial.setEnabled(true);
     c30:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_ZN12_GLOBAL__N_16serialE>
     c34:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <_ZN12_GLOBAL__N_16serialE+0x1>
     c38:	dc 01       	movw	r26, r24
     c3a:	ed 91       	ld	r30, X+
     c3c:	fc 91       	ld	r31, X
     c3e:	02 84       	ldd	r0, Z+10	; 0x0a
     c40:	f3 85       	ldd	r31, Z+11	; 0x0b
     c42:	e0 2d       	mov	r30, r0
     c44:	61 e0       	ldi	r22, 0x01	; 1
     c46:	09 95       	icall
    
    serial.printf("Hello there!");
     c48:	68 e1       	ldi	r22, 0x18	; 24
     c4a:	72 e0       	ldi	r23, 0x02	; 2
     c4c:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_ZN12_GLOBAL__N_16serialE>
     c50:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <_ZN12_GLOBAL__N_16serialE+0x1>
     c54:	0e 94 03 03 	call	0x606	; 0x606 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
        
    // Learingrate for the training.
    constexpr double learningRate{0.225};

    // The data we want to train our model with.
    const container::Vector<double> trainInput{0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0};
     c58:	69 96       	adiw	r28, 0x19	; 25
     c5a:	1c ae       	std	Y+60, r1	; 0x3c
     c5c:	1d ae       	std	Y+61, r1	; 0x3d
     c5e:	1e ae       	std	Y+62, r1	; 0x3e
     c60:	1f ae       	std	Y+63, r1	; 0x3f
     c62:	69 97       	sbiw	r28, 0x19	; 25
     c64:	8d ec       	ldi	r24, 0xCD	; 205
     c66:	9c ec       	ldi	r25, 0xCC	; 204
     c68:	ac ec       	ldi	r26, 0xCC	; 204
     c6a:	bd e3       	ldi	r27, 0x3D	; 61
     c6c:	65 96       	adiw	r28, 0x15	; 21
     c6e:	8c af       	std	Y+60, r24	; 0x3c
     c70:	9d af       	std	Y+61, r25	; 0x3d
     c72:	ae af       	std	Y+62, r26	; 0x3e
     c74:	bf af       	std	Y+63, r27	; 0x3f
     c76:	65 97       	sbiw	r28, 0x15	; 21
     c78:	8d ec       	ldi	r24, 0xCD	; 205
     c7a:	9c ec       	ldi	r25, 0xCC	; 204
     c7c:	ac e4       	ldi	r26, 0x4C	; 76
     c7e:	be e3       	ldi	r27, 0x3E	; 62
     c80:	61 96       	adiw	r28, 0x11	; 17
     c82:	8c af       	std	Y+60, r24	; 0x3c
     c84:	9d af       	std	Y+61, r25	; 0x3d
     c86:	ae af       	std	Y+62, r26	; 0x3e
     c88:	bf af       	std	Y+63, r27	; 0x3f
     c8a:	61 97       	sbiw	r28, 0x11	; 17
     c8c:	8a e9       	ldi	r24, 0x9A	; 154
     c8e:	99 e9       	ldi	r25, 0x99	; 153
     c90:	a9 e9       	ldi	r26, 0x99	; 153
     c92:	be e3       	ldi	r27, 0x3E	; 62
     c94:	2d 96       	adiw	r28, 0x0d	; 13
     c96:	8c af       	std	Y+60, r24	; 0x3c
     c98:	9d af       	std	Y+61, r25	; 0x3d
     c9a:	ae af       	std	Y+62, r26	; 0x3e
     c9c:	bf af       	std	Y+63, r27	; 0x3f
     c9e:	2d 97       	sbiw	r28, 0x0d	; 13
     ca0:	8d ec       	ldi	r24, 0xCD	; 205
     ca2:	9c ec       	ldi	r25, 0xCC	; 204
     ca4:	ac ec       	ldi	r26, 0xCC	; 204
     ca6:	be e3       	ldi	r27, 0x3E	; 62
     ca8:	29 96       	adiw	r28, 0x09	; 9
     caa:	8c af       	std	Y+60, r24	; 0x3c
     cac:	9d af       	std	Y+61, r25	; 0x3d
     cae:	ae af       	std	Y+62, r26	; 0x3e
     cb0:	bf af       	std	Y+63, r27	; 0x3f
     cb2:	29 97       	sbiw	r28, 0x09	; 9
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	bf e3       	ldi	r27, 0x3F	; 63
     cbc:	25 96       	adiw	r28, 0x05	; 5
     cbe:	8c af       	std	Y+60, r24	; 0x3c
     cc0:	9d af       	std	Y+61, r25	; 0x3d
     cc2:	ae af       	std	Y+62, r26	; 0x3e
     cc4:	bf af       	std	Y+63, r27	; 0x3f
     cc6:	25 97       	sbiw	r28, 0x05	; 5
     cc8:	8a e9       	ldi	r24, 0x9A	; 154
     cca:	99 e9       	ldi	r25, 0x99	; 153
     ccc:	a9 e1       	ldi	r26, 0x19	; 25
     cce:	bf e3       	ldi	r27, 0x3F	; 63
     cd0:	21 96       	adiw	r28, 0x01	; 1
     cd2:	8c af       	std	Y+60, r24	; 0x3c
     cd4:	9d af       	std	Y+61, r25	; 0x3d
     cd6:	ae af       	std	Y+62, r26	; 0x3e
     cd8:	bf af       	std	Y+63, r27	; 0x3f
     cda:	21 97       	sbiw	r28, 0x01	; 1
     cdc:	83 e3       	ldi	r24, 0x33	; 51
     cde:	93 e3       	ldi	r25, 0x33	; 51
     ce0:	a3 e3       	ldi	r26, 0x33	; 51
     ce2:	bf e3       	ldi	r27, 0x3F	; 63
     ce4:	89 af       	std	Y+57, r24	; 0x39
     ce6:	9a af       	std	Y+58, r25	; 0x3a
     ce8:	ab af       	std	Y+59, r26	; 0x3b
     cea:	bc af       	std	Y+60, r27	; 0x3c
     cec:	8d ec       	ldi	r24, 0xCD	; 205
     cee:	9c ec       	ldi	r25, 0xCC	; 204
     cf0:	ac e4       	ldi	r26, 0x4C	; 76
     cf2:	bf e3       	ldi	r27, 0x3F	; 63
     cf4:	8d ab       	std	Y+53, r24	; 0x35
     cf6:	9e ab       	std	Y+54, r25	; 0x36
     cf8:	af ab       	std	Y+55, r26	; 0x37
     cfa:	b8 af       	std	Y+56, r27	; 0x38
     cfc:	86 e6       	ldi	r24, 0x66	; 102
     cfe:	96 e6       	ldi	r25, 0x66	; 102
     d00:	a6 e6       	ldi	r26, 0x66	; 102
     d02:	bf e3       	ldi	r27, 0x3F	; 63
     d04:	89 ab       	std	Y+49, r24	; 0x31
     d06:	9a ab       	std	Y+50, r25	; 0x32
     d08:	ab ab       	std	Y+51, r26	; 0x33
     d0a:	bc ab       	std	Y+52, r27	; 0x34
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	a0 e8       	ldi	r26, 0x80	; 128
     d12:	bf e3       	ldi	r27, 0x3F	; 63
     d14:	8d a7       	std	Y+45, r24	; 0x2d
     d16:	9e a7       	std	Y+46, r25	; 0x2e
     d18:	af a7       	std	Y+47, r26	; 0x2f
     d1a:	b8 ab       	std	Y+48, r27	; 0x30
     d1c:	ce 01       	movw	r24, r28
     d1e:	8d 96       	adiw	r24, 0x2d	; 45
     d20:	9f 93       	push	r25
     d22:	8f 93       	push	r24
     d24:	04 96       	adiw	r24, 0x04	; 4
     d26:	9f 93       	push	r25
     d28:	8f 93       	push	r24
     d2a:	04 96       	adiw	r24, 0x04	; 4
     d2c:	9f 93       	push	r25
     d2e:	8f 93       	push	r24
     d30:	9e 01       	movw	r18, r28
     d32:	27 5c       	subi	r18, 0xC7	; 199
     d34:	3f 4f       	sbci	r19, 0xFF	; 255
     d36:	49 01       	movw	r8, r18
     d38:	08 96       	adiw	r24, 0x08	; 8
     d3a:	5c 01       	movw	r10, r24
     d3c:	de 01       	movw	r26, r28
     d3e:	af 5b       	subi	r26, 0xBF	; 191
     d40:	bf 4f       	sbci	r27, 0xFF	; 255
     d42:	6d 01       	movw	r12, r26
     d44:	24 5f       	subi	r18, 0xF4	; 244
     d46:	3f 4f       	sbci	r19, 0xFF	; 255
     d48:	79 01       	movw	r14, r18
     d4a:	8e 01       	movw	r16, r28
     d4c:	07 5b       	subi	r16, 0xB7	; 183
     d4e:	1f 4f       	sbci	r17, 0xFF	; 255
     d50:	28 5f       	subi	r18, 0xF8	; 248
     d52:	3f 4f       	sbci	r19, 0xFF	; 255
     d54:	ae 01       	movw	r20, r28
     d56:	4f 5a       	subi	r20, 0xAF	; 175
     d58:	5f 4f       	sbci	r21, 0xFF	; 255
     d5a:	be 01       	movw	r22, r28
     d5c:	6b 5a       	subi	r22, 0xAB	; 171
     d5e:	7f 4f       	sbci	r23, 0xFF	; 255
     d60:	4c 96       	adiw	r24, 0x1c	; 28
     d62:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN9container6VectorIdEC1IIdddddddddddEEEDpOKT_>
    const container::Vector<double> trainOutput{-50.0, -40.0, -30.0, -20.0, -10.0, 0.0, 10.0, 20.0, 30.0, 40.0, 50.0};
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	a8 e4       	ldi	r26, 0x48	; 72
     d6c:	b2 ec       	ldi	r27, 0xC2	; 194
     d6e:	89 a7       	std	Y+41, r24	; 0x29
     d70:	9a a7       	std	Y+42, r25	; 0x2a
     d72:	ab a7       	std	Y+43, r26	; 0x2b
     d74:	bc a7       	std	Y+44, r27	; 0x2c
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	a0 e2       	ldi	r26, 0x20	; 32
     d7c:	b2 ec       	ldi	r27, 0xC2	; 194
     d7e:	8d a3       	std	Y+37, r24	; 0x25
     d80:	9e a3       	std	Y+38, r25	; 0x26
     d82:	af a3       	std	Y+39, r26	; 0x27
     d84:	b8 a7       	std	Y+40, r27	; 0x28
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	a0 ef       	ldi	r26, 0xF0	; 240
     d8c:	b1 ec       	ldi	r27, 0xC1	; 193
     d8e:	89 a3       	std	Y+33, r24	; 0x21
     d90:	9a a3       	std	Y+34, r25	; 0x22
     d92:	ab a3       	std	Y+35, r26	; 0x23
     d94:	bc a3       	std	Y+36, r27	; 0x24
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	a0 ea       	ldi	r26, 0xA0	; 160
     d9c:	b1 ec       	ldi	r27, 0xC1	; 193
     d9e:	8d 8f       	std	Y+29, r24	; 0x1d
     da0:	9e 8f       	std	Y+30, r25	; 0x1e
     da2:	af 8f       	std	Y+31, r26	; 0x1f
     da4:	b8 a3       	std	Y+32, r27	; 0x20
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	a0 e2       	ldi	r26, 0x20	; 32
     dac:	b1 ec       	ldi	r27, 0xC1	; 193
     dae:	89 8f       	std	Y+25, r24	; 0x19
     db0:	9a 8f       	std	Y+26, r25	; 0x1a
     db2:	ab 8f       	std	Y+27, r26	; 0x1b
     db4:	bc 8f       	std	Y+28, r27	; 0x1c
     db6:	1d 8a       	std	Y+21, r1	; 0x15
     db8:	1e 8a       	std	Y+22, r1	; 0x16
     dba:	1f 8a       	std	Y+23, r1	; 0x17
     dbc:	18 8e       	std	Y+24, r1	; 0x18
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	a0 e2       	ldi	r26, 0x20	; 32
     dc4:	b1 e4       	ldi	r27, 0x41	; 65
     dc6:	89 8b       	std	Y+17, r24	; 0x11
     dc8:	9a 8b       	std	Y+18, r25	; 0x12
     dca:	ab 8b       	std	Y+19, r26	; 0x13
     dcc:	bc 8b       	std	Y+20, r27	; 0x14
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	a0 ea       	ldi	r26, 0xA0	; 160
     dd4:	b1 e4       	ldi	r27, 0x41	; 65
     dd6:	8d 87       	std	Y+13, r24	; 0x0d
     dd8:	9e 87       	std	Y+14, r25	; 0x0e
     dda:	af 87       	std	Y+15, r26	; 0x0f
     ddc:	b8 8b       	std	Y+16, r27	; 0x10
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	a0 ef       	ldi	r26, 0xF0	; 240
     de4:	b1 e4       	ldi	r27, 0x41	; 65
     de6:	89 87       	std	Y+9, r24	; 0x09
     de8:	9a 87       	std	Y+10, r25	; 0x0a
     dea:	ab 87       	std	Y+11, r26	; 0x0b
     dec:	bc 87       	std	Y+12, r27	; 0x0c
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	a0 e2       	ldi	r26, 0x20	; 32
     df4:	b2 e4       	ldi	r27, 0x42	; 66
     df6:	8d 83       	std	Y+5, r24	; 0x05
     df8:	9e 83       	std	Y+6, r25	; 0x06
     dfa:	af 83       	std	Y+7, r26	; 0x07
     dfc:	b8 87       	std	Y+8, r27	; 0x08
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	a8 e4       	ldi	r26, 0x48	; 72
     e04:	b2 e4       	ldi	r27, 0x42	; 66
     e06:	89 83       	std	Y+1, r24	; 0x01
     e08:	9a 83       	std	Y+2, r25	; 0x02
     e0a:	ab 83       	std	Y+3, r26	; 0x03
     e0c:	bc 83       	std	Y+4, r27	; 0x04
     e0e:	ce 01       	movw	r24, r28
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	9f 93       	push	r25
     e14:	8f 93       	push	r24
     e16:	04 96       	adiw	r24, 0x04	; 4
     e18:	9f 93       	push	r25
     e1a:	8f 93       	push	r24
     e1c:	04 96       	adiw	r24, 0x04	; 4
     e1e:	9f 93       	push	r25
     e20:	8f 93       	push	r24
     e22:	04 96       	adiw	r24, 0x04	; 4
     e24:	4c 01       	movw	r8, r24
     e26:	de 01       	movw	r26, r28
     e28:	51 96       	adiw	r26, 0x11	; 17
     e2a:	5d 01       	movw	r10, r26
     e2c:	9e 01       	movw	r18, r28
     e2e:	2b 5e       	subi	r18, 0xEB	; 235
     e30:	3f 4f       	sbci	r19, 0xFF	; 255
     e32:	69 01       	movw	r12, r18
     e34:	0c 96       	adiw	r24, 0x0c	; 12
     e36:	7c 01       	movw	r14, r24
     e38:	0c 52       	subi	r16, 0x2C	; 44
     e3a:	11 09       	sbc	r17, r1
     e3c:	24 5f       	subi	r18, 0xF4	; 244
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	ae 01       	movw	r20, r28
     e42:	4b 5d       	subi	r20, 0xDB	; 219
     e44:	5f 4f       	sbci	r21, 0xFF	; 255
     e46:	be 01       	movw	r22, r28
     e48:	67 5d       	subi	r22, 0xD7	; 215
     e4a:	7f 4f       	sbci	r23, 0xFF	; 255
     e4c:	8c 5b       	subi	r24, 0xBC	; 188
     e4e:	9f 4f       	sbci	r25, 0xFF	; 255
     e50:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN9container6VectorIdEC1IIdddddddddddEEEDpOKT_>

    // The constructor.
    ml::linreg::LinReg linReg{trainInput, trainOutput};
     e54:	ae 01       	movw	r20, r28
     e56:	43 5a       	subi	r20, 0xA3	; 163
     e58:	5f 4f       	sbci	r21, 0xFF	; 255
     e5a:	be 01       	movw	r22, r28
     e5c:	67 5a       	subi	r22, 0xA7	; 167
     e5e:	7f 4f       	sbci	r23, 0xFF	; 255
     e60:	ce 01       	movw	r24, r28
     e62:	8f 59       	subi	r24, 0x9F	; 159
     e64:	9f 4f       	sbci	r25, 0xFF	; 255
     e66:	0e 94 c8 09 	call	0x1390	; 0x1390 <_ZN2ml6linreg6LinRegC1ERKN9container6VectorIdEES6_>
    if (!linReg.trainWithNoEpoch(serial, learningRate)) {
     e6a:	60 91 8b 02 	lds	r22, 0x028B	; 0x80028b <_ZN12_GLOBAL__N_16serialE>
     e6e:	70 91 8c 02 	lds	r23, 0x028C	; 0x80028c <_ZN12_GLOBAL__N_16serialE+0x1>
     e72:	26 e6       	ldi	r18, 0x66	; 102
     e74:	36 e6       	ldi	r19, 0x66	; 102
     e76:	46 e6       	ldi	r20, 0x66	; 102
     e78:	5e e3       	ldi	r21, 0x3E	; 62
     e7a:	ce 01       	movw	r24, r28
     e7c:	8f 59       	subi	r24, 0x9F	; 159
     e7e:	9f 4f       	sbci	r25, 0xFF	; 255
     e80:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN2ml6linreg6LinReg16trainWithNoEpochERN6driver15SerialInterfaceEd>
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	81 11       	cpse	r24, r1
     e90:	0b c0       	rjmp	.+22     	; 0xea8 <main+0x2a2>
        serial.printf("Training failed!\n");
     e92:	65 e2       	ldi	r22, 0x25	; 37
     e94:	72 e0       	ldi	r23, 0x02	; 2
     e96:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_ZN12_GLOBAL__N_16serialE>
     e9a:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <_ZN12_GLOBAL__N_16serialE+0x1>
     e9e:	0e 94 03 03 	call	0x606	; 0x606 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
        return -1;
     ea2:	0f ef       	ldi	r16, 0xFF	; 255
     ea4:	1f ef       	ldi	r17, 0xFF	; 255
     ea6:	12 c0       	rjmp	.+36     	; 0xecc <main+0x2c6>
    }
    serial.printf("Training finished!\n");
     ea8:	67 e3       	ldi	r22, 0x37	; 55
     eaa:	72 e0       	ldi	r23, 0x02	; 2
     eac:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_ZN12_GLOBAL__N_16serialE>
     eb0:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <_ZN12_GLOBAL__N_16serialE+0x1>
     eb4:	0e 94 03 03 	call	0x606	; 0x606 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
    printPredictions(linReg, trainInput);
     eb8:	be 01       	movw	r22, r28
     eba:	67 5a       	subi	r22, 0xA7	; 167
     ebc:	7f 4f       	sbci	r23, 0xFF	; 255
     ebe:	ce 01       	movw	r24, r28
     ec0:	8f 59       	subi	r24, 0x9F	; 159
     ec2:	9f 4f       	sbci	r25, 0xFF	; 255
     ec4:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN12_GLOBAL__N_116printPredictionsERKN2ml6linreg9InterfaceERKN9container6VectorIdEE>
    return 0;
     ec8:	00 e0       	ldi	r16, 0x00	; 0
     eca:	10 e0       	ldi	r17, 0x00	; 0
    // The data we want to train our model with.
    const container::Vector<double> trainInput{0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0};
    const container::Vector<double> trainOutput{-50.0, -40.0, -30.0, -20.0, -10.0, 0.0, 10.0, 20.0, 30.0, 40.0, 50.0};

    // The constructor.
    ml::linreg::LinReg linReg{trainInput, trainOutput};
     ecc:	ce 01       	movw	r24, r28
     ece:	8f 59       	subi	r24, 0x9F	; 159
     ed0:	9f 4f       	sbci	r25, 0xFF	; 255
     ed2:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <_ZN2ml6linreg6LinRegD1Ev>
    // Learingrate for the training.
    constexpr double learningRate{0.225};

    // The data we want to train our model with.
    const container::Vector<double> trainInput{0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0};
    const container::Vector<double> trainOutput{-50.0, -40.0, -30.0, -20.0, -10.0, 0.0, 10.0, 20.0, 30.0, 40.0, 50.0};
     ed6:	ce 01       	movw	r24, r28
     ed8:	83 5a       	subi	r24, 0xA3	; 163
     eda:	9f 4f       	sbci	r25, 0xFF	; 255
     edc:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN9container6VectorIdED1Ev>
        
    // Learingrate for the training.
    constexpr double learningRate{0.225};

    // The data we want to train our model with.
    const container::Vector<double> trainInput{0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0};
     ee0:	ce 01       	movw	r24, r28
     ee2:	87 5a       	subi	r24, 0xA7	; 167
     ee4:	9f 4f       	sbci	r25, 0xFF	; 255
     ee6:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN9container6VectorIdED1Ev>
    // Run the system perpetually on the target MCU.
    mySys->run();

    // This point should never be reached; the system is intended to run indefinitely on the target MCU.
    return 0;
}
     eea:	c8 01       	movw	r24, r16
     eec:	c0 58       	subi	r28, 0x80	; 128
     eee:	df 4f       	sbci	r29, 0xFF	; 255
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	ff 90       	pop	r15
     f04:	ef 90       	pop	r14
     f06:	df 90       	pop	r13
     f08:	cf 90       	pop	r12
     f0a:	bf 90       	pop	r11
     f0c:	af 90       	pop	r10
     f0e:	9f 90       	pop	r9
     f10:	8f 90       	pop	r8
     f12:	08 95       	ret

00000f14 <_ZN2ml6linreg6LinRegD0Ev>:
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	ec 01       	movw	r28, r24
     f1a:	8f e5       	ldi	r24, 0x5F	; 95
     f1c:	92 e0       	ldi	r25, 0x02	; 2
     f1e:	99 83       	std	Y+1, r25	; 0x01
     f20:	88 83       	st	Y, r24
     f22:	ce 01       	movw	r24, r28
     f24:	4c 96       	adiw	r24, 0x1c	; 28
     f26:	0e 94 e6 05 	call	0xbcc	; 0xbcc <_ZN9container6VectorIjED1Ev>
     f2a:	ce 01       	movw	r24, r28
     f2c:	46 96       	adiw	r24, 0x16	; 22
     f2e:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN9container6VectorIdED1Ev>
     f32:	ce 01       	movw	r24, r28
     f34:	40 96       	adiw	r24, 0x10	; 16
     f36:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN9container6VectorIdED1Ev>
     f3a:	8f e4       	ldi	r24, 0x4F	; 79
     f3c:	92 e0       	ldi	r25, 0x02	; 2
     f3e:	99 83       	std	Y+1, r25	; 0x01
     f40:	88 83       	st	Y, r24
     f42:	60 e2       	ldi	r22, 0x20	; 32
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	ce 01       	movw	r24, r28
     f48:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZdlPvj>
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	08 95       	ret

00000f52 <_GLOBAL__sub_I_main>:
     f52:	6f ef       	ldi	r22, 0xFF	; 255
     f54:	7f ef       	ldi	r23, 0xFF	; 255
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z41__static_initialization_and_destruction_0ii>
     f5e:	08 95       	ret

00000f60 <_ZNK2ml6linreg6LinReg7predictEd>:
        myIndex[i] = i;
    }
}   
//--------------------------------------------------------------------------------//
double LinReg::predict(const double input) const noexcept
{
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	ec 01       	movw	r28, r24
     f66:	9a 01       	movw	r18, r20
     f68:	ab 01       	movw	r20, r22
    return (myWeight * input + myBias);
     f6a:	6c 85       	ldd	r22, Y+12	; 0x0c
     f6c:	7d 85       	ldd	r23, Y+13	; 0x0d
     f6e:	8e 85       	ldd	r24, Y+14	; 0x0e
     f70:	9f 85       	ldd	r25, Y+15	; 0x0f
     f72:	0e 94 0f 0c 	call	0x181e	; 0x181e <__mulsf3>
     f76:	28 85       	ldd	r18, Y+8	; 0x08
     f78:	39 85       	ldd	r19, Y+9	; 0x09
     f7a:	4a 85       	ldd	r20, Y+10	; 0x0a
     f7c:	5b 85       	ldd	r21, Y+11	; 0x0b
     f7e:	0e 94 3f 0a 	call	0x147e	; 0x147e <__addsf3>
}
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	08 95       	ret

00000f88 <_ZNK2ml6linreg6LinReg13getEpochsUsedEv>:
    }
    return true;
}
//--------------------------------------------------------------------------------//
int LinReg::getEpochsUsed() const noexcept 
{
     f88:	fc 01       	movw	r30, r24
    if (myEpochsUsed == 0)
     f8a:	84 89       	ldd	r24, Z+20	; 0x14
     f8c:	95 89       	ldd	r25, Z+21	; 0x15
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	11 f4       	brne	.+4      	; 0xf96 <_ZNK2ml6linreg6LinReg13getEpochsUsedEv+0xe>
    { 
        return myEpochCount;
     f92:	82 8d       	ldd	r24, Z+26	; 0x1a
     f94:	93 8d       	ldd	r25, Z+27	; 0x1b
    } 
    return myEpochsUsed;
}
     f96:	08 95       	ret

00000f98 <_ZNK2ml6linreg6LinReg7getBiasEv>:
//--------------------------------------------------------------------------------//
double LinReg::getBias() const noexcept {return myBias; }
     f98:	fc 01       	movw	r30, r24
     f9a:	60 85       	ldd	r22, Z+8	; 0x08
     f9c:	71 85       	ldd	r23, Z+9	; 0x09
     f9e:	82 85       	ldd	r24, Z+10	; 0x0a
     fa0:	93 85       	ldd	r25, Z+11	; 0x0b
     fa2:	08 95       	ret

00000fa4 <_ZNK2ml6linreg6LinReg9getWeightEv>:
//--------------------------------------------------------------------------------//
double LinReg::getWeight() const noexcept {return myWeight; }
     fa4:	fc 01       	movw	r30, r24
     fa6:	64 85       	ldd	r22, Z+12	; 0x0c
     fa8:	75 85       	ldd	r23, Z+13	; 0x0d
     faa:	86 85       	ldd	r24, Z+14	; 0x0e
     fac:	97 85       	ldd	r25, Z+15	; 0x0f
     fae:	08 95       	ret

00000fb0 <_ZN2ml6linreg12_GLOBAL__N_110initRandomEv>:
    // Create a static local variable, which indicates whether the generator has been initialized.
    // This line (with the initialization) is only run once.
    static auto initialized{false};

    // Terminate the function if the generator already has been initialized.
    if (initialized) { return; }
     fb0:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <_ZZN2ml6linreg12_GLOBAL__N_110initRandomEvE11initialized>
     fb4:	81 11       	cpse	r24, r1
     fb6:	0a c0       	rjmp	.+20     	; 0xfcc <_ZN2ml6linreg12_GLOBAL__N_110initRandomEv+0x1c>

    // Initialize the generator, use the current time as seed (start of the random sequence).
    // Get the current time via time(nullptr).
    srand(time(nullptr));
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 95 00 	call	0x12a	; 0x12a <time>
     fc0:	cb 01       	movw	r24, r22
     fc2:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <srand>

    // Mark the random generator as initialized.
    initialized = true;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <_ZZN2ml6linreg12_GLOBAL__N_110initRandomEvE11initialized>
     fcc:	08 95       	ret

00000fce <_ZN2ml6linreg12_GLOBAL__N_114randomStartValEv>:
 * @return Random floating-point number between 0.0 - 1.0.
 */
double randomStartVal() noexcept
{
    // Divide rand() by RAND_MAX, cast RAND_MAX to double to ensure floating-point division.
    return rand() / static_cast<double>(RAND_MAX);
     fce:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <rand>
     fd2:	bc 01       	movw	r22, r24
     fd4:	99 0f       	add	r25, r25
     fd6:	88 0b       	sbc	r24, r24
     fd8:	99 0b       	sbc	r25, r25
     fda:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__floatsisf>
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	3e ef       	ldi	r19, 0xFE	; 254
     fe2:	4f ef       	ldi	r20, 0xFF	; 255
     fe4:	56 e4       	ldi	r21, 0x46	; 70
     fe6:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__divsf3>
}
     fea:	08 95       	ret

00000fec <_ZNK9container6VectorIjE4sizeEv>:
template <typename T>
const T* Vector<T>::data() const noexcept { return myData; }

// -----------------------------------------------------------------------------
template <typename T>
size_t Vector<T>::size() const noexcept { return mySize; }
     fec:	fc 01       	movw	r30, r24
     fee:	82 81       	ldd	r24, Z+2	; 0x02
     ff0:	93 81       	ldd	r25, Z+3	; 0x03
     ff2:	08 95       	ret

00000ff4 <_ZN9container6VectorIjEixEj>:

// -----------------------------------------------------------------------------
template <typename T>
T& Vector<T>::operator[](const size_t index) noexcept 
{ 
    return myData[index]; 
     ff4:	fc 01       	movw	r30, r24
     ff6:	80 81       	ld	r24, Z
     ff8:	91 81       	ldd	r25, Z+1	; 0x01
     ffa:	66 0f       	add	r22, r22
     ffc:	77 1f       	adc	r23, r23
}
     ffe:	86 0f       	add	r24, r22
    1000:	97 1f       	adc	r25, r23
    1002:	08 95       	ret

00001004 <_ZN2ml6linreg12_GLOBAL__N_17shuffleERN9container6VectorIjEE>:
 * @brief Shuffle the content of the given vector.
 * 
 * @param[in, out] data Reference to the vector to shuffle.
 */
void shuffle(container::Vector<size_t>& data) noexcept
{
    1004:	af 92       	push	r10
    1006:	bf 92       	push	r11
    1008:	cf 92       	push	r12
    100a:	df 92       	push	r13
    100c:	ef 92       	push	r14
    100e:	ff 92       	push	r15
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	ec 01       	movw	r28, r24
    // Shuffle the vector by swapping each element with a random element.
    for (size_t i{}; i < data.size(); ++i)
    101a:	00 e0       	ldi	r16, 0x00	; 0
    101c:	10 e0       	ldi	r17, 0x00	; 0
    101e:	ce 01       	movw	r24, r28
    1020:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZNK9container6VectorIjE4sizeEv>
    1024:	08 17       	cp	r16, r24
    1026:	19 07       	cpc	r17, r25
    1028:	38 f5       	brcc	.+78     	; 0x1078 <_ZN2ml6linreg12_GLOBAL__N_17shuffleERN9container6VectorIjEE+0x74>
    {
        // Get a random index r (between 0-4 if we have five training sets).
        const auto r{rand() % data.size()};
    102a:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <rand>
    102e:	7c 01       	movw	r14, r24
    1030:	ce 01       	movw	r24, r28
    1032:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZNK9container6VectorIjE4sizeEv>
    1036:	bc 01       	movw	r22, r24
    1038:	c7 01       	movw	r24, r14
    103a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__udivmodhi4>
    103e:	7c 01       	movw	r14, r24

        // Swap the elements at index i and r => make a copy of data[i].
        const auto temp{data[i]};
    1040:	b8 01       	movw	r22, r16
    1042:	ce 01       	movw	r24, r28
    1044:	0e 94 fa 07 	call	0xff4	; 0xff4 <_ZN9container6VectorIjEixEj>
    1048:	6c 01       	movw	r12, r24
    104a:	fc 01       	movw	r30, r24
    104c:	a0 80       	ld	r10, Z
    104e:	b1 80       	ldd	r11, Z+1	; 0x01

        // Copy data[r] to data[i] => now we have two instances of data[r] in the vector.
        data[i] = data[r];
    1050:	b7 01       	movw	r22, r14
    1052:	ce 01       	movw	r24, r28
    1054:	0e 94 fa 07 	call	0xff4	; 0xff4 <_ZN9container6VectorIjEixEj>
    1058:	fc 01       	movw	r30, r24
    105a:	80 81       	ld	r24, Z
    105c:	91 81       	ldd	r25, Z+1	; 0x01
    105e:	f6 01       	movw	r30, r12
    1060:	91 83       	std	Z+1, r25	; 0x01
    1062:	80 83       	st	Z, r24

        // Finally put the copy of the "old" data[i] to data[r] => we have swapped the elements.
        data[r] = temp;
    1064:	b7 01       	movw	r22, r14
    1066:	ce 01       	movw	r24, r28
    1068:	0e 94 fa 07 	call	0xff4	; 0xff4 <_ZN9container6VectorIjEixEj>
    106c:	fc 01       	movw	r30, r24
    106e:	b1 82       	std	Z+1, r11	; 0x01
    1070:	a0 82       	st	Z, r10
 * @param[in, out] data Reference to the vector to shuffle.
 */
void shuffle(container::Vector<size_t>& data) noexcept
{
    // Shuffle the vector by swapping each element with a random element.
    for (size_t i{}; i < data.size(); ++i)
    1072:	0f 5f       	subi	r16, 0xFF	; 255
    1074:	1f 4f       	sbci	r17, 0xFF	; 255
    1076:	d3 cf       	rjmp	.-90     	; 0x101e <_ZN2ml6linreg12_GLOBAL__N_17shuffleERN9container6VectorIjEE+0x1a>
        data[i] = data[r];

        // Finally put the copy of the "old" data[i] to data[r] => we have swapped the elements.
        data[r] = temp;
    }
}
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	df 90       	pop	r13
    1086:	cf 90       	pop	r12
    1088:	bf 90       	pop	r11
    108a:	af 90       	pop	r10
    108c:	08 95       	ret

0000108e <_ZNK9container6VectorIdE4sizeEv>:
template <typename T>
const T* Vector<T>::data() const noexcept { return myData; }

// -----------------------------------------------------------------------------
template <typename T>
size_t Vector<T>::size() const noexcept { return mySize; }
    108e:	fc 01       	movw	r30, r24
    1090:	82 81       	ldd	r24, Z+2	; 0x02
    1092:	93 81       	ldd	r25, Z+3	; 0x03
    1094:	08 95       	ret

00001096 <_ZN9container6VectorIjEC1Ev>:
{
// -----------------------------------------------------------------------------
template <typename T>
Vector<T>::Vector() noexcept
    : myData{nullptr}
    , mySize{} {}
    1096:	fc 01       	movw	r30, r24
    1098:	11 82       	std	Z+1, r1	; 0x01
    109a:	10 82       	st	Z, r1
    109c:	13 82       	std	Z+3, r1	; 0x03
    109e:	12 82       	std	Z+2, r1	; 0x02
    10a0:	08 95       	ret

000010a2 <_ZN9container6VectorIjE6resizeEj>:
    mySize = 0U;
}

// -----------------------------------------------------------------------------
template <typename T>
bool Vector<T>::resize(const size_t newSize) noexcept 
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	ec 01       	movw	r28, r24
    10ac:	8b 01       	movw	r16, r22

// -----------------------------------------------------------------------------
template <typename T>
inline T* reallocMemory(T* block, const size_t newSize) noexcept
{
    return static_cast<T*>(realloc(block, sizeof(T) * newSize));
    10ae:	66 0f       	add	r22, r22
    10b0:	77 1f       	adc	r23, r23
    10b2:	88 81       	ld	r24, Y
    10b4:	99 81       	ldd	r25, Y+1	; 0x01
    10b6:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <realloc>
{
    auto copy{utils::reallocMemory<T>(myData, newSize)};
    if (copy == nullptr) { return false; }
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	31 f0       	breq	.+12     	; 0x10ca <_ZN9container6VectorIjE6resizeEj+0x28>
    myData = copy;
    10be:	99 83       	std	Y+1, r25	; 0x01
    10c0:	88 83       	st	Y, r24
    mySize = newSize;
    10c2:	1b 83       	std	Y+3, r17	; 0x03
    10c4:	0a 83       	std	Y+2, r16	; 0x02
    return true;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	01 c0       	rjmp	.+2      	; 0x10cc <_ZN9container6VectorIjE6resizeEj+0x2a>
// -----------------------------------------------------------------------------
template <typename T>
bool Vector<T>::resize(const size_t newSize) noexcept 
{
    auto copy{utils::reallocMemory<T>(myData, newSize)};
    if (copy == nullptr) { return false; }
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    myData = copy;
    mySize = newSize;
    return true;
}
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	08 95       	ret

000010d6 <_ZNK9container6VectorIdEixEj>:

// -----------------------------------------------------------------------------
template <typename T>
const T& Vector<T>::operator[](const size_t index) const noexcept 
{ 
    return myData[index]; 
    10d6:	fc 01       	movw	r30, r24
    10d8:	80 81       	ld	r24, Z
    10da:	91 81       	ldd	r25, Z+1	; 0x01
    10dc:	66 0f       	add	r22, r22
    10de:	77 1f       	adc	r23, r23
    10e0:	66 0f       	add	r22, r22
    10e2:	77 1f       	adc	r23, r23
}
    10e4:	86 0f       	add	r24, r22
    10e6:	97 1f       	adc	r25, r23
    10e8:	08 95       	ret

000010ea <_ZNK2ml6linreg6LinReg13isPredictDoneEv>:
    }
    return true;    
}
//--------------------------------------------------------------------------------//
bool LinReg::isPredictDone() const noexcept
{
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	8c 01       	movw	r16, r24
    constexpr double tol = 1e-4;
    for (size_t i{}; i < myTrainSetCount; ++i)
    10fc:	c0 e0       	ldi	r28, 0x00	; 0
    10fe:	d0 e0       	ldi	r29, 0x00	; 0
    1100:	f8 01       	movw	r30, r16
    1102:	86 81       	ldd	r24, Z+6	; 0x06
    1104:	97 81       	ldd	r25, Z+7	; 0x07
    1106:	c8 17       	cp	r28, r24
    1108:	d9 07       	cpc	r29, r25
    110a:	88 f5       	brcc	.+98     	; 0x116e <_ZNK2ml6linreg6LinReg13isPredictDoneEv+0x84>
    {
        if (dabs(myPredVector[i] - myTrainOutput[i]) > tol)
    110c:	be 01       	movw	r22, r28
    110e:	c8 01       	movw	r24, r16
    1110:	46 96       	adiw	r24, 0x16	; 22
    1112:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZNK9container6VectorIdEixEj>
    1116:	7c 01       	movw	r14, r24
    1118:	be 01       	movw	r22, r28
    111a:	f8 01       	movw	r30, r16
    111c:	84 81       	ldd	r24, Z+4	; 0x04
    111e:	95 81       	ldd	r25, Z+5	; 0x05
    1120:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZNK9container6VectorIdEixEj>
    1124:	fc 01       	movw	r30, r24
    1126:	20 81       	ld	r18, Z
    1128:	31 81       	ldd	r19, Z+1	; 0x01
    112a:	42 81       	ldd	r20, Z+2	; 0x02
    112c:	53 81       	ldd	r21, Z+3	; 0x03
    112e:	f7 01       	movw	r30, r14
    1130:	60 81       	ld	r22, Z
    1132:	71 81       	ldd	r23, Z+1	; 0x01
    1134:	82 81       	ldd	r24, Z+2	; 0x02
    1136:	93 81       	ldd	r25, Z+3	; 0x03
    1138:	0e 94 3e 0a 	call	0x147c	; 0x147c <__subsf3>
    113c:	6b 01       	movw	r12, r22
    113e:	7c 01       	movw	r14, r24
 * 
 * @return non-negative absolute value of x
 */
static inline double dabs(double x) 
{
    return (x < 0.0) ? -x : x;
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	a9 01       	movw	r20, r18
    1146:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__cmpsf2>
    114a:	88 23       	and	r24, r24
    114c:	24 f4       	brge	.+8      	; 0x1156 <_ZNK2ml6linreg6LinReg13isPredictDoneEv+0x6c>
    114e:	f7 fa       	bst	r15, 7
    1150:	f0 94       	com	r15
    1152:	f7 f8       	bld	r15, 7
    1154:	f0 94       	com	r15
bool LinReg::isPredictDone() const noexcept
{
    constexpr double tol = 1e-4;
    for (size_t i{}; i < myTrainSetCount; ++i)
    {
        if (dabs(myPredVector[i] - myTrainOutput[i]) > tol)
    1156:	27 e1       	ldi	r18, 0x17	; 23
    1158:	37 eb       	ldi	r19, 0xB7	; 183
    115a:	41 ed       	ldi	r20, 0xD1	; 209
    115c:	58 e3       	ldi	r21, 0x38	; 56
    115e:	c7 01       	movw	r24, r14
    1160:	b6 01       	movw	r22, r12
    1162:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__gesf2>
    1166:	18 16       	cp	r1, r24
    1168:	24 f0       	brlt	.+8      	; 0x1172 <_ZNK2ml6linreg6LinReg13isPredictDoneEv+0x88>
}
//--------------------------------------------------------------------------------//
bool LinReg::isPredictDone() const noexcept
{
    constexpr double tol = 1e-4;
    for (size_t i{}; i < myTrainSetCount; ++i)
    116a:	21 96       	adiw	r28, 0x01	; 1
    116c:	c9 cf       	rjmp	.-110    	; 0x1100 <_ZNK2ml6linreg6LinReg13isPredictDoneEv+0x16>
        if (dabs(myPredVector[i] - myTrainOutput[i]) > tol)
        {
            return false;
        }
    }
    return true;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <_ZNK2ml6linreg6LinReg13isPredictDoneEv+0x8a>
    constexpr double tol = 1e-4;
    for (size_t i{}; i < myTrainSetCount; ++i)
    {
        if (dabs(myPredVector[i] - myTrainOutput[i]) > tol)
        {
            return false;
    1172:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    return true;
}
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	df 90       	pop	r13
    1182:	cf 90       	pop	r12
    1184:	08 95       	ret

00001186 <_ZN9container6VectorIdEixEj>:

// -----------------------------------------------------------------------------
template <typename T>
T& Vector<T>::operator[](const size_t index) noexcept 
{ 
    return myData[index]; 
    1186:	fc 01       	movw	r30, r24
    1188:	80 81       	ld	r24, Z
    118a:	91 81       	ldd	r25, Z+1	; 0x01
    118c:	66 0f       	add	r22, r22
    118e:	77 1f       	adc	r23, r23
    1190:	66 0f       	add	r22, r22
    1192:	77 1f       	adc	r23, r23
}
    1194:	86 0f       	add	r24, r22
    1196:	97 1f       	adc	r25, r23
    1198:	08 95       	ret

0000119a <_ZN2ml6linreg6LinReg16trainWithNoEpochERN6driver15SerialInterfaceEd>:
{
    return (myWeight * input + myBias);
}
//--------------------------------------------------------------------------------//
bool LinReg::trainWithNoEpoch(driver::SerialInterface& serial, double learningRate) noexcept
{
    119a:	2f 92       	push	r2
    119c:	3f 92       	push	r3
    119e:	4f 92       	push	r4
    11a0:	5f 92       	push	r5
    11a2:	6f 92       	push	r6
    11a4:	7f 92       	push	r7
    11a6:	8f 92       	push	r8
    11a8:	9f 92       	push	r9
    11aa:	af 92       	push	r10
    11ac:	bf 92       	push	r11
    11ae:	cf 92       	push	r12
    11b0:	df 92       	push	r13
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	2a 97       	sbiw	r28, 0x0a	; 10
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	8c 01       	movw	r16, r24
    11d0:	7a 87       	std	Y+10, r23	; 0x0a
    11d2:	69 87       	std	Y+9, r22	; 0x09
    11d4:	2d 83       	std	Y+5, r18	; 0x05
    11d6:	3e 83       	std	Y+6, r19	; 0x06
    11d8:	4f 83       	std	Y+7, r20	; 0x07
    11da:	58 87       	std	Y+8, r21	; 0x08
    if ((0.0 >= learningRate)) { return false;}
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	a9 01       	movw	r20, r18
    11e2:	6d 81       	ldd	r22, Y+5	; 0x05
    11e4:	7e 81       	ldd	r23, Y+6	; 0x06
    11e6:	8f 81       	ldd	r24, Y+7	; 0x07
    11e8:	98 85       	ldd	r25, Y+8	; 0x08
    11ea:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__cmpsf2>
    11ee:	18 16       	cp	r1, r24
    11f0:	0c f0       	brlt	.+2      	; 0x11f4 <_ZN2ml6linreg6LinReg16trainWithNoEpochERN6driver15SerialInterfaceEd+0x5a>
    11f2:	a3 c0       	rjmp	.+326    	; 0x133a <_ZN2ml6linreg6LinReg16trainWithNoEpochERN6driver15SerialInterfaceEd+0x1a0>

    while (!isPredictDone())
    11f4:	c8 01       	movw	r24, r16
    11f6:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZNK2ml6linreg6LinReg13isPredictDoneEv>
    11fa:	81 11       	cpse	r24, r1
    11fc:	9f c0       	rjmp	.+318    	; 0x133c <_ZN2ml6linreg6LinReg16trainWithNoEpochERN6driver15SerialInterfaceEd+0x1a2>
    {
        serial.printf("Epochs used: %d\n", getEpochsUsed() + 1);
    11fe:	c8 01       	movw	r24, r16
    1200:	0e 94 c4 07 	call	0xf88	; 0xf88 <_ZNK2ml6linreg6LinReg13getEpochsUsedEv>
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	9a 83       	std	Y+2, r25	; 0x02
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	ae 01       	movw	r20, r28
    120c:	4f 5f       	subi	r20, 0xFF	; 255
    120e:	5f 4f       	sbci	r21, 0xFF	; 255
    1210:	64 eb       	ldi	r22, 0xB4	; 180
    1212:	71 e0       	ldi	r23, 0x01	; 1
    1214:	89 85       	ldd	r24, Y+9	; 0x09
    1216:	9a 85       	ldd	r25, Y+10	; 0x0a
    1218:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZNK6driver15SerialInterface6printfIIiEEEbPKcDpRKT_>
        shuffle(myIndex);
    121c:	c8 01       	movw	r24, r16
    121e:	4c 96       	adiw	r24, 0x1c	; 28
    1220:	9c 83       	std	Y+4, r25	; 0x04
    1222:	8b 83       	std	Y+3, r24	; 0x03
    1224:	0e 94 02 08 	call	0x1004	; 0x1004 <_ZN2ml6linreg12_GLOBAL__N_17shuffleERN9container6VectorIjEE>

        for (size_t k{}; k < myTrainSetCount; k++)
    1228:	21 2c       	mov	r2, r1
    122a:	31 2c       	mov	r3, r1
    122c:	f8 01       	movw	r30, r16
    122e:	86 81       	ldd	r24, Z+6	; 0x06
    1230:	97 81       	ldd	r25, Z+7	; 0x07
    1232:	28 16       	cp	r2, r24
    1234:	39 06       	cpc	r3, r25
    1236:	08 f0       	brcs	.+2      	; 0x123a <_ZN2ml6linreg6LinReg16trainWithNoEpochERN6driver15SerialInterfaceEd+0xa0>
    1238:	79 c0       	rjmp	.+242    	; 0x132c <_ZN2ml6linreg6LinReg16trainWithNoEpochERN6driver15SerialInterfaceEd+0x192>
        {
            const size_t i = myIndex[k];
    123a:	b1 01       	movw	r22, r2
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	0e 94 fa 07 	call	0xff4	; 0xff4 <_ZN9container6VectorIjEixEj>
    1244:	fc 01       	movw	r30, r24
    1246:	e0 80       	ld	r14, Z
    1248:	f1 80       	ldd	r15, Z+1	; 0x01
            // ypred = kx + m.
            const auto yPred = predict(myTrainInput[i]);
    124a:	f8 01       	movw	r30, r16
    124c:	c2 80       	ldd	r12, Z+2	; 0x02
    124e:	d3 80       	ldd	r13, Z+3	; 0x03
    1250:	b7 01       	movw	r22, r14
    1252:	c6 01       	movw	r24, r12
    1254:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZNK9container6VectorIdEixEj>
    1258:	fc 01       	movw	r30, r24
    125a:	40 81       	ld	r20, Z
    125c:	51 81       	ldd	r21, Z+1	; 0x01
    125e:	62 81       	ldd	r22, Z+2	; 0x02
    1260:	73 81       	ldd	r23, Z+3	; 0x03
    1262:	c8 01       	movw	r24, r16
    1264:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZNK2ml6linreg6LinReg7predictEd>
    1268:	4b 01       	movw	r8, r22
    126a:	5c 01       	movw	r10, r24

            // e = yref - ypred.
            const auto e = (myTrainOutput[i] - yPred);
    126c:	b7 01       	movw	r22, r14
    126e:	f8 01       	movw	r30, r16
    1270:	84 81       	ldd	r24, Z+4	; 0x04
    1272:	95 81       	ldd	r25, Z+5	; 0x05
    1274:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZNK9container6VectorIdEixEj>
    1278:	fc 01       	movw	r30, r24
    127a:	60 81       	ld	r22, Z
    127c:	71 81       	ldd	r23, Z+1	; 0x01
    127e:	82 81       	ldd	r24, Z+2	; 0x02
    1280:	93 81       	ldd	r25, Z+3	; 0x03
    1282:	a5 01       	movw	r20, r10
    1284:	94 01       	movw	r18, r8
    1286:	0e 94 3e 0a 	call	0x147c	; 0x147c <__subsf3>
    128a:	9b 01       	movw	r18, r22
    128c:	ac 01       	movw	r20, r24

            // m = m + e * LR.
            myBias = myBias + (e * learningRate);
    128e:	f8 01       	movw	r30, r16
    1290:	40 84       	ldd	r4, Z+8	; 0x08
    1292:	51 84       	ldd	r5, Z+9	; 0x09
    1294:	62 84       	ldd	r6, Z+10	; 0x0a
    1296:	73 84       	ldd	r7, Z+11	; 0x0b
    1298:	6d 81       	ldd	r22, Y+5	; 0x05
    129a:	7e 81       	ldd	r23, Y+6	; 0x06
    129c:	8f 81       	ldd	r24, Y+7	; 0x07
    129e:	98 85       	ldd	r25, Y+8	; 0x08
    12a0:	0e 94 0f 0c 	call	0x181e	; 0x181e <__mulsf3>
    12a4:	4b 01       	movw	r8, r22
    12a6:	5c 01       	movw	r10, r24
    12a8:	9b 01       	movw	r18, r22
    12aa:	ac 01       	movw	r20, r24
    12ac:	c3 01       	movw	r24, r6
    12ae:	b2 01       	movw	r22, r4
    12b0:	0e 94 3f 0a 	call	0x147e	; 0x147e <__addsf3>
    12b4:	f8 01       	movw	r30, r16
    12b6:	60 87       	std	Z+8, r22	; 0x08
    12b8:	71 87       	std	Z+9, r23	; 0x09
    12ba:	82 87       	std	Z+10, r24	; 0x0a
    12bc:	93 87       	std	Z+11, r25	; 0x0b

            // k = k + e * LR * x.
            myWeight = myWeight + (e * learningRate * myTrainInput[i]); 
    12be:	44 84       	ldd	r4, Z+12	; 0x0c
    12c0:	55 84       	ldd	r5, Z+13	; 0x0d
    12c2:	66 84       	ldd	r6, Z+14	; 0x0e
    12c4:	77 84       	ldd	r7, Z+15	; 0x0f
    12c6:	b7 01       	movw	r22, r14
    12c8:	c6 01       	movw	r24, r12
    12ca:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZNK9container6VectorIdEixEj>
    12ce:	fc 01       	movw	r30, r24
    12d0:	20 81       	ld	r18, Z
    12d2:	31 81       	ldd	r19, Z+1	; 0x01
    12d4:	42 81       	ldd	r20, Z+2	; 0x02
    12d6:	53 81       	ldd	r21, Z+3	; 0x03
    12d8:	c5 01       	movw	r24, r10
    12da:	b4 01       	movw	r22, r8
    12dc:	0e 94 0f 0c 	call	0x181e	; 0x181e <__mulsf3>
    12e0:	9b 01       	movw	r18, r22
    12e2:	ac 01       	movw	r20, r24
    12e4:	c3 01       	movw	r24, r6
    12e6:	b2 01       	movw	r22, r4
    12e8:	0e 94 3f 0a 	call	0x147e	; 0x147e <__addsf3>
    12ec:	f8 01       	movw	r30, r16
    12ee:	64 87       	std	Z+12, r22	; 0x0c
    12f0:	75 87       	std	Z+13, r23	; 0x0d
    12f2:	86 87       	std	Z+14, r24	; 0x0e
    12f4:	97 87       	std	Z+15, r25	; 0x0f
            
            myPredVector[i] = predict(myTrainInput[i]);
    12f6:	b7 01       	movw	r22, r14
    12f8:	c8 01       	movw	r24, r16
    12fa:	46 96       	adiw	r24, 0x16	; 22
    12fc:	0e 94 c3 08 	call	0x1186	; 0x1186 <_ZN9container6VectorIdEixEj>
    1300:	5c 01       	movw	r10, r24
    1302:	b7 01       	movw	r22, r14
    1304:	c6 01       	movw	r24, r12
    1306:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZNK9container6VectorIdEixEj>
    130a:	fc 01       	movw	r30, r24
    130c:	40 81       	ld	r20, Z
    130e:	51 81       	ldd	r21, Z+1	; 0x01
    1310:	62 81       	ldd	r22, Z+2	; 0x02
    1312:	73 81       	ldd	r23, Z+3	; 0x03
    1314:	c8 01       	movw	r24, r16
    1316:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZNK2ml6linreg6LinReg7predictEd>
    131a:	f5 01       	movw	r30, r10
    131c:	60 83       	st	Z, r22
    131e:	71 83       	std	Z+1, r23	; 0x01
    1320:	82 83       	std	Z+2, r24	; 0x02
    1322:	93 83       	std	Z+3, r25	; 0x03
    while (!isPredictDone())
    {
        serial.printf("Epochs used: %d\n", getEpochsUsed() + 1);
        shuffle(myIndex);

        for (size_t k{}; k < myTrainSetCount; k++)
    1324:	ff ef       	ldi	r31, 0xFF	; 255
    1326:	2f 1a       	sub	r2, r31
    1328:	3f 0a       	sbc	r3, r31
    132a:	80 cf       	rjmp	.-256    	; 0x122c <_ZN2ml6linreg6LinReg16trainWithNoEpochERN6driver15SerialInterfaceEd+0x92>
            myWeight = myWeight + (e * learningRate * myTrainInput[i]); 
            
            myPredVector[i] = predict(myTrainInput[i]);
        }
        // Save epochs used.
        myEpochsUsed++;
    132c:	f8 01       	movw	r30, r16
    132e:	84 89       	ldd	r24, Z+20	; 0x14
    1330:	95 89       	ldd	r25, Z+21	; 0x15
    1332:	01 96       	adiw	r24, 0x01	; 1
    1334:	95 8b       	std	Z+21, r25	; 0x15
    1336:	84 8b       	std	Z+20, r24	; 0x14
//--------------------------------------------------------------------------------//
bool LinReg::trainWithNoEpoch(driver::SerialInterface& serial, double learningRate) noexcept
{
    if ((0.0 >= learningRate)) { return false;}

    while (!isPredictDone())
    1338:	5d cf       	rjmp	.-326    	; 0x11f4 <_ZN2ml6linreg6LinReg16trainWithNoEpochERN6driver15SerialInterfaceEd+0x5a>
    return (myWeight * input + myBias);
}
//--------------------------------------------------------------------------------//
bool LinReg::trainWithNoEpoch(driver::SerialInterface& serial, double learningRate) noexcept
{
    if ((0.0 >= learningRate)) { return false;}
    133a:	80 e0       	ldi	r24, 0x00	; 0
        }
        // Save epochs used.
        myEpochsUsed++;
    }
    return true;    
}
    133c:	2a 96       	adiw	r28, 0x0a	; 10
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	ff 90       	pop	r15
    1352:	ef 90       	pop	r14
    1354:	df 90       	pop	r13
    1356:	cf 90       	pop	r12
    1358:	bf 90       	pop	r11
    135a:	af 90       	pop	r10
    135c:	9f 90       	pop	r9
    135e:	8f 90       	pop	r8
    1360:	7f 90       	pop	r7
    1362:	6f 90       	pop	r6
    1364:	5f 90       	pop	r5
    1366:	4f 90       	pop	r4
    1368:	3f 90       	pop	r3
    136a:	2f 90       	pop	r2
    136c:	08 95       	ret

0000136e <_ZN9container6VectorIdEC1Ej>:
    : myData{nullptr}
    , mySize{} {}

// -----------------------------------------------------------------------------
template <typename T>
Vector<T>::Vector(const size_t size) noexcept
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	ec 01       	movw	r28, r24
    1378:	8b 01       	movw	r16, r22
    : Vector() 
    137a:	0e 94 a7 04 	call	0x94e	; 0x94e <_ZN9container6VectorIdEC1Ev>
{ 
    resize(size); 
    137e:	b8 01       	movw	r22, r16
    1380:	ce 01       	movw	r24, r28
    1382:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN9container6VectorIdE6resizeEj>
}
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	08 95       	ret

00001390 <_ZN2ml6linreg6LinRegC1ERKN9container6VectorIdEES6_>:
    return x <= y ? x : y;
}
} // namespace

//--------------------------------------------------------------------------------//
LinReg::LinReg(const container::Vector<double>& trainInput,
    1390:	ef 92       	push	r14
    1392:	ff 92       	push	r15
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	8c 01       	movw	r16, r24
    139e:	7b 01       	movw	r14, r22
    13a0:	ca 01       	movw	r24, r20
               const container::Vector<double>& trainOutput) noexcept
                :   myTrainInput{trainInput},
                    myTrainOutput{trainOutput},  
                    myTrainSetCount{min(trainInput.size(), trainOutput.size())},
                    myPredVector(myTrainSetCount)
    13a2:	2f e5       	ldi	r18, 0x5F	; 95
    13a4:	32 e0       	ldi	r19, 0x02	; 2
    13a6:	f8 01       	movw	r30, r16
    13a8:	31 83       	std	Z+1, r19	; 0x01
    13aa:	20 83       	st	Z, r18
    13ac:	73 83       	std	Z+3, r23	; 0x03
    13ae:	62 83       	std	Z+2, r22	; 0x02
    13b0:	55 83       	std	Z+5, r21	; 0x05
    13b2:	44 83       	std	Z+4, r20	; 0x04
//--------------------------------------------------------------------------------//
LinReg::LinReg(const container::Vector<double>& trainInput,
               const container::Vector<double>& trainOutput) noexcept
                :   myTrainInput{trainInput},
                    myTrainOutput{trainOutput},  
                    myTrainSetCount{min(trainInput.size(), trainOutput.size())},
    13b4:	0e 94 47 08 	call	0x108e	; 0x108e <_ZNK9container6VectorIdE4sizeEv>
    13b8:	ec 01       	movw	r28, r24
    13ba:	c7 01       	movw	r24, r14
    13bc:	0e 94 47 08 	call	0x108e	; 0x108e <_ZNK9container6VectorIdE4sizeEv>

//--------------------------------------------------------------------------------//
constexpr size_t min(const size_t x, const size_t y) noexcept
{
    // Return x if x <= y, else y.
    return x <= y ? x : y;
    13c0:	c8 17       	cp	r28, r24
    13c2:	d9 07       	cpc	r29, r25
    13c4:	18 f0       	brcs	.+6      	; 0x13cc <_ZN2ml6linreg6LinRegC1ERKN9container6VectorIdEES6_+0x3c>
    13c6:	28 2f       	mov	r18, r24
    13c8:	89 2f       	mov	r24, r25
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <_ZN2ml6linreg6LinRegC1ERKN9container6VectorIdEES6_+0x40>
    13cc:	2c 2f       	mov	r18, r28
    13ce:	8d 2f       	mov	r24, r29
LinReg::LinReg(const container::Vector<double>& trainInput,
               const container::Vector<double>& trainOutput) noexcept
                :   myTrainInput{trainInput},
                    myTrainOutput{trainOutput},  
                    myTrainSetCount{min(trainInput.size(), trainOutput.size())},
                    myPredVector(myTrainSetCount)
    13d0:	f8 01       	movw	r30, r16
    13d2:	26 83       	std	Z+6, r18	; 0x06
    13d4:	87 83       	std	Z+7, r24	; 0x07
    13d6:	c8 01       	movw	r24, r16
    13d8:	40 96       	adiw	r24, 0x10	; 16
    13da:	0e 94 a7 04 	call	0x94e	; 0x94e <_ZN9container6VectorIdEC1Ev>
    13de:	f8 01       	movw	r30, r16
    13e0:	15 8a       	std	Z+21, r1	; 0x15
    13e2:	14 8a       	std	Z+20, r1	; 0x14
    13e4:	66 81       	ldd	r22, Z+6	; 0x06
    13e6:	77 81       	ldd	r23, Z+7	; 0x07
    13e8:	c8 01       	movw	r24, r16
    13ea:	46 96       	adiw	r24, 0x16	; 22
    13ec:	0e 94 b7 09 	call	0x136e	; 0x136e <_ZN9container6VectorIdEC1Ej>
    13f0:	f8 01       	movw	r30, r16
    13f2:	13 8e       	std	Z+27, r1	; 0x1b
    13f4:	12 8e       	std	Z+26, r1	; 0x1a
    13f6:	78 01       	movw	r14, r16
    13f8:	fc e1       	ldi	r31, 0x1C	; 28
    13fa:	ef 0e       	add	r14, r31
    13fc:	f1 1c       	adc	r15, r1
    13fe:	c7 01       	movw	r24, r14
    1400:	0e 94 4b 08 	call	0x1096	; 0x1096 <_ZN9container6VectorIjEC1Ev>
{
    // Random generator and uniform.
    initRandom();
    1404:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN2ml6linreg12_GLOBAL__N_110initRandomEv>

    // Assign random values.
    myBias = randomStartVal();
    1408:	0e 94 e7 07 	call	0xfce	; 0xfce <_ZN2ml6linreg12_GLOBAL__N_114randomStartValEv>
    140c:	f8 01       	movw	r30, r16
    140e:	60 87       	std	Z+8, r22	; 0x08
    1410:	71 87       	std	Z+9, r23	; 0x09
    1412:	82 87       	std	Z+10, r24	; 0x0a
    1414:	93 87       	std	Z+11, r25	; 0x0b
    myWeight = randomStartVal();
    1416:	0e 94 e7 07 	call	0xfce	; 0xfce <_ZN2ml6linreg12_GLOBAL__N_114randomStartValEv>
    141a:	f8 01       	movw	r30, r16
    141c:	64 87       	std	Z+12, r22	; 0x0c
    141e:	75 87       	std	Z+13, r23	; 0x0d
    1420:	86 87       	std	Z+14, r24	; 0x0e
    1422:	97 87       	std	Z+15, r25	; 0x0f

    myIndex.resize(myTrainSetCount); // Tell vector how many elements it will contain to not allocate vector. 
    1424:	66 81       	ldd	r22, Z+6	; 0x06
    1426:	77 81       	ldd	r23, Z+7	; 0x07
    1428:	c7 01       	movw	r24, r14
    142a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN9container6VectorIjE6resizeEj>

    // Loop to add the indexes in the trainingdata to the vector myIndex.
    for (size_t i{0}; i < myTrainSetCount; i++)
    142e:	c0 e0       	ldi	r28, 0x00	; 0
    1430:	d0 e0       	ldi	r29, 0x00	; 0
    1432:	f8 01       	movw	r30, r16
    1434:	86 81       	ldd	r24, Z+6	; 0x06
    1436:	97 81       	ldd	r25, Z+7	; 0x07
    1438:	c8 17       	cp	r28, r24
    143a:	d9 07       	cpc	r29, r25
    143c:	48 f4       	brcc	.+18     	; 0x1450 <_ZN2ml6linreg6LinRegC1ERKN9container6VectorIdEES6_+0xc0>
    {
        myIndex[i] = i;
    143e:	be 01       	movw	r22, r28
    1440:	c7 01       	movw	r24, r14
    1442:	0e 94 fa 07 	call	0xff4	; 0xff4 <_ZN9container6VectorIjEixEj>
    1446:	fc 01       	movw	r30, r24
    1448:	d1 83       	std	Z+1, r29	; 0x01
    144a:	c0 83       	st	Z, r28
    myWeight = randomStartVal();

    myIndex.resize(myTrainSetCount); // Tell vector how many elements it will contain to not allocate vector. 

    // Loop to add the indexes in the trainingdata to the vector myIndex.
    for (size_t i{0}; i < myTrainSetCount; i++)
    144c:	21 96       	adiw	r28, 0x01	; 1
    144e:	f1 cf       	rjmp	.-30     	; 0x1432 <_ZN2ml6linreg6LinRegC1ERKN9container6VectorIdEES6_+0xa2>
    {
        myIndex[i] = i;
    }
}   
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	ff 90       	pop	r15
    145a:	ef 90       	pop	r14
    145c:	08 95       	ret

0000145e <_ZdlPvj>:

/**
 * @note Definitions required to satisfy the linker when using C++ interfaces and static local 
 *       variables in embedded projects. 
 */
void operator delete(void*, unsigned int) noexcept {}
    145e:	08 95       	ret

00001460 <__cxa_pure_virtual>:
extern "C" void __cxa_pure_virtual() {}
    1460:	08 95       	ret

00001462 <__cxa_guard_acquire>:
extern "C" int __cxa_guard_acquire (volatile void *g) { return !*(char *)g; }
    1462:	fc 01       	movw	r30, r24
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	20 81       	ld	r18, Z
    146a:	22 23       	and	r18, r18
    146c:	11 f0       	breq	.+4      	; 0x1472 <__cxa_guard_acquire+0x10>
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	08 95       	ret

00001474 <__cxa_guard_release>:
extern "C" void __cxa_guard_release (volatile void *g) { *(char *)g = 1; }
    1474:	21 e0       	ldi	r18, 0x01	; 1
    1476:	fc 01       	movw	r30, r24
    1478:	20 83       	st	Z, r18
    147a:	08 95       	ret

0000147c <__subsf3>:
    147c:	50 58       	subi	r21, 0x80	; 128

0000147e <__addsf3>:
    147e:	bb 27       	eor	r27, r27
    1480:	aa 27       	eor	r26, r26
    1482:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__addsf3x>
    1486:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__fp_round>
    148a:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__fp_pscA>
    148e:	38 f0       	brcs	.+14     	; 0x149e <__addsf3+0x20>
    1490:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__fp_pscB>
    1494:	20 f0       	brcs	.+8      	; 0x149e <__addsf3+0x20>
    1496:	39 f4       	brne	.+14     	; 0x14a6 <__addsf3+0x28>
    1498:	9f 3f       	cpi	r25, 0xFF	; 255
    149a:	19 f4       	brne	.+6      	; 0x14a2 <__addsf3+0x24>
    149c:	26 f4       	brtc	.+8      	; 0x14a6 <__addsf3+0x28>
    149e:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__fp_nan>
    14a2:	0e f4       	brtc	.+2      	; 0x14a6 <__addsf3+0x28>
    14a4:	e0 95       	com	r30
    14a6:	e7 fb       	bst	r30, 7
    14a8:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_inf>

000014ac <__addsf3x>:
    14ac:	e9 2f       	mov	r30, r25
    14ae:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fp_split3>
    14b2:	58 f3       	brcs	.-42     	; 0x148a <__addsf3+0xc>
    14b4:	ba 17       	cp	r27, r26
    14b6:	62 07       	cpc	r22, r18
    14b8:	73 07       	cpc	r23, r19
    14ba:	84 07       	cpc	r24, r20
    14bc:	95 07       	cpc	r25, r21
    14be:	20 f0       	brcs	.+8      	; 0x14c8 <__addsf3x+0x1c>
    14c0:	79 f4       	brne	.+30     	; 0x14e0 <__addsf3x+0x34>
    14c2:	a6 f5       	brtc	.+104    	; 0x152c <__addsf3x+0x80>
    14c4:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__fp_zero>
    14c8:	0e f4       	brtc	.+2      	; 0x14cc <__addsf3x+0x20>
    14ca:	e0 95       	com	r30
    14cc:	0b 2e       	mov	r0, r27
    14ce:	ba 2f       	mov	r27, r26
    14d0:	a0 2d       	mov	r26, r0
    14d2:	0b 01       	movw	r0, r22
    14d4:	b9 01       	movw	r22, r18
    14d6:	90 01       	movw	r18, r0
    14d8:	0c 01       	movw	r0, r24
    14da:	ca 01       	movw	r24, r20
    14dc:	a0 01       	movw	r20, r0
    14de:	11 24       	eor	r1, r1
    14e0:	ff 27       	eor	r31, r31
    14e2:	59 1b       	sub	r21, r25
    14e4:	99 f0       	breq	.+38     	; 0x150c <__addsf3x+0x60>
    14e6:	59 3f       	cpi	r21, 0xF9	; 249
    14e8:	50 f4       	brcc	.+20     	; 0x14fe <__addsf3x+0x52>
    14ea:	50 3e       	cpi	r21, 0xE0	; 224
    14ec:	68 f1       	brcs	.+90     	; 0x1548 <__addsf3x+0x9c>
    14ee:	1a 16       	cp	r1, r26
    14f0:	f0 40       	sbci	r31, 0x00	; 0
    14f2:	a2 2f       	mov	r26, r18
    14f4:	23 2f       	mov	r18, r19
    14f6:	34 2f       	mov	r19, r20
    14f8:	44 27       	eor	r20, r20
    14fa:	58 5f       	subi	r21, 0xF8	; 248
    14fc:	f3 cf       	rjmp	.-26     	; 0x14e4 <__addsf3x+0x38>
    14fe:	46 95       	lsr	r20
    1500:	37 95       	ror	r19
    1502:	27 95       	ror	r18
    1504:	a7 95       	ror	r26
    1506:	f0 40       	sbci	r31, 0x00	; 0
    1508:	53 95       	inc	r21
    150a:	c9 f7       	brne	.-14     	; 0x14fe <__addsf3x+0x52>
    150c:	7e f4       	brtc	.+30     	; 0x152c <__addsf3x+0x80>
    150e:	1f 16       	cp	r1, r31
    1510:	ba 0b       	sbc	r27, r26
    1512:	62 0b       	sbc	r22, r18
    1514:	73 0b       	sbc	r23, r19
    1516:	84 0b       	sbc	r24, r20
    1518:	ba f0       	brmi	.+46     	; 0x1548 <__addsf3x+0x9c>
    151a:	91 50       	subi	r25, 0x01	; 1
    151c:	a1 f0       	breq	.+40     	; 0x1546 <__addsf3x+0x9a>
    151e:	ff 0f       	add	r31, r31
    1520:	bb 1f       	adc	r27, r27
    1522:	66 1f       	adc	r22, r22
    1524:	77 1f       	adc	r23, r23
    1526:	88 1f       	adc	r24, r24
    1528:	c2 f7       	brpl	.-16     	; 0x151a <__addsf3x+0x6e>
    152a:	0e c0       	rjmp	.+28     	; 0x1548 <__addsf3x+0x9c>
    152c:	ba 0f       	add	r27, r26
    152e:	62 1f       	adc	r22, r18
    1530:	73 1f       	adc	r23, r19
    1532:	84 1f       	adc	r24, r20
    1534:	48 f4       	brcc	.+18     	; 0x1548 <__addsf3x+0x9c>
    1536:	87 95       	ror	r24
    1538:	77 95       	ror	r23
    153a:	67 95       	ror	r22
    153c:	b7 95       	ror	r27
    153e:	f7 95       	ror	r31
    1540:	9e 3f       	cpi	r25, 0xFE	; 254
    1542:	08 f0       	brcs	.+2      	; 0x1546 <__addsf3x+0x9a>
    1544:	b0 cf       	rjmp	.-160    	; 0x14a6 <__addsf3+0x28>
    1546:	93 95       	inc	r25
    1548:	88 0f       	add	r24, r24
    154a:	08 f0       	brcs	.+2      	; 0x154e <__addsf3x+0xa2>
    154c:	99 27       	eor	r25, r25
    154e:	ee 0f       	add	r30, r30
    1550:	97 95       	ror	r25
    1552:	87 95       	ror	r24
    1554:	08 95       	ret

00001556 <__cmpsf2>:
    1556:	0e 94 95 0b 	call	0x172a	; 0x172a <__fp_cmp>
    155a:	08 f4       	brcc	.+2      	; 0x155e <__cmpsf2+0x8>
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	08 95       	ret

00001560 <__divsf3>:
    1560:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__divsf3x>
    1564:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__fp_round>
    1568:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__fp_pscB>
    156c:	58 f0       	brcs	.+22     	; 0x1584 <__divsf3+0x24>
    156e:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__fp_pscA>
    1572:	40 f0       	brcs	.+16     	; 0x1584 <__divsf3+0x24>
    1574:	29 f4       	brne	.+10     	; 0x1580 <__divsf3+0x20>
    1576:	5f 3f       	cpi	r21, 0xFF	; 255
    1578:	29 f0       	breq	.+10     	; 0x1584 <__divsf3+0x24>
    157a:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_inf>
    157e:	51 11       	cpse	r21, r1
    1580:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_szero>
    1584:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__fp_nan>

00001588 <__divsf3x>:
    1588:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fp_split3>
    158c:	68 f3       	brcs	.-38     	; 0x1568 <__divsf3+0x8>

0000158e <__divsf3_pse>:
    158e:	99 23       	and	r25, r25
    1590:	b1 f3       	breq	.-20     	; 0x157e <__divsf3+0x1e>
    1592:	55 23       	and	r21, r21
    1594:	91 f3       	breq	.-28     	; 0x157a <__divsf3+0x1a>
    1596:	95 1b       	sub	r25, r21
    1598:	55 0b       	sbc	r21, r21
    159a:	bb 27       	eor	r27, r27
    159c:	aa 27       	eor	r26, r26
    159e:	62 17       	cp	r22, r18
    15a0:	73 07       	cpc	r23, r19
    15a2:	84 07       	cpc	r24, r20
    15a4:	38 f0       	brcs	.+14     	; 0x15b4 <__divsf3_pse+0x26>
    15a6:	9f 5f       	subi	r25, 0xFF	; 255
    15a8:	5f 4f       	sbci	r21, 0xFF	; 255
    15aa:	22 0f       	add	r18, r18
    15ac:	33 1f       	adc	r19, r19
    15ae:	44 1f       	adc	r20, r20
    15b0:	aa 1f       	adc	r26, r26
    15b2:	a9 f3       	breq	.-22     	; 0x159e <__divsf3_pse+0x10>
    15b4:	35 d0       	rcall	.+106    	; 0x1620 <__divsf3_pse+0x92>
    15b6:	0e 2e       	mov	r0, r30
    15b8:	3a f0       	brmi	.+14     	; 0x15c8 <__divsf3_pse+0x3a>
    15ba:	e0 e8       	ldi	r30, 0x80	; 128
    15bc:	32 d0       	rcall	.+100    	; 0x1622 <__divsf3_pse+0x94>
    15be:	91 50       	subi	r25, 0x01	; 1
    15c0:	50 40       	sbci	r21, 0x00	; 0
    15c2:	e6 95       	lsr	r30
    15c4:	00 1c       	adc	r0, r0
    15c6:	ca f7       	brpl	.-14     	; 0x15ba <__divsf3_pse+0x2c>
    15c8:	2b d0       	rcall	.+86     	; 0x1620 <__divsf3_pse+0x92>
    15ca:	fe 2f       	mov	r31, r30
    15cc:	29 d0       	rcall	.+82     	; 0x1620 <__divsf3_pse+0x92>
    15ce:	66 0f       	add	r22, r22
    15d0:	77 1f       	adc	r23, r23
    15d2:	88 1f       	adc	r24, r24
    15d4:	bb 1f       	adc	r27, r27
    15d6:	26 17       	cp	r18, r22
    15d8:	37 07       	cpc	r19, r23
    15da:	48 07       	cpc	r20, r24
    15dc:	ab 07       	cpc	r26, r27
    15de:	b0 e8       	ldi	r27, 0x80	; 128
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <__divsf3_pse+0x56>
    15e2:	bb 0b       	sbc	r27, r27
    15e4:	80 2d       	mov	r24, r0
    15e6:	bf 01       	movw	r22, r30
    15e8:	ff 27       	eor	r31, r31
    15ea:	93 58       	subi	r25, 0x83	; 131
    15ec:	5f 4f       	sbci	r21, 0xFF	; 255
    15ee:	3a f0       	brmi	.+14     	; 0x15fe <__divsf3_pse+0x70>
    15f0:	9e 3f       	cpi	r25, 0xFE	; 254
    15f2:	51 05       	cpc	r21, r1
    15f4:	78 f0       	brcs	.+30     	; 0x1614 <__divsf3_pse+0x86>
    15f6:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_inf>
    15fa:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_szero>
    15fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1600:	e4 f3       	brlt	.-8      	; 0x15fa <__divsf3_pse+0x6c>
    1602:	98 3e       	cpi	r25, 0xE8	; 232
    1604:	d4 f3       	brlt	.-12     	; 0x15fa <__divsf3_pse+0x6c>
    1606:	86 95       	lsr	r24
    1608:	77 95       	ror	r23
    160a:	67 95       	ror	r22
    160c:	b7 95       	ror	r27
    160e:	f7 95       	ror	r31
    1610:	9f 5f       	subi	r25, 0xFF	; 255
    1612:	c9 f7       	brne	.-14     	; 0x1606 <__divsf3_pse+0x78>
    1614:	88 0f       	add	r24, r24
    1616:	91 1d       	adc	r25, r1
    1618:	96 95       	lsr	r25
    161a:	87 95       	ror	r24
    161c:	97 f9       	bld	r25, 7
    161e:	08 95       	ret
    1620:	e1 e0       	ldi	r30, 0x01	; 1
    1622:	66 0f       	add	r22, r22
    1624:	77 1f       	adc	r23, r23
    1626:	88 1f       	adc	r24, r24
    1628:	bb 1f       	adc	r27, r27
    162a:	62 17       	cp	r22, r18
    162c:	73 07       	cpc	r23, r19
    162e:	84 07       	cpc	r24, r20
    1630:	ba 07       	cpc	r27, r26
    1632:	20 f0       	brcs	.+8      	; 0x163c <__divsf3_pse+0xae>
    1634:	62 1b       	sub	r22, r18
    1636:	73 0b       	sbc	r23, r19
    1638:	84 0b       	sbc	r24, r20
    163a:	ba 0b       	sbc	r27, r26
    163c:	ee 1f       	adc	r30, r30
    163e:	88 f7       	brcc	.-30     	; 0x1622 <__divsf3_pse+0x94>
    1640:	e0 95       	com	r30
    1642:	08 95       	ret

00001644 <__fixsfsi>:
    1644:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fixunssfsi>
    1648:	68 94       	set
    164a:	b1 11       	cpse	r27, r1
    164c:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_szero>
    1650:	08 95       	ret

00001652 <__fixunssfsi>:
    1652:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__fp_splitA>
    1656:	88 f0       	brcs	.+34     	; 0x167a <__fixunssfsi+0x28>
    1658:	9f 57       	subi	r25, 0x7F	; 127
    165a:	98 f0       	brcs	.+38     	; 0x1682 <__fixunssfsi+0x30>
    165c:	b9 2f       	mov	r27, r25
    165e:	99 27       	eor	r25, r25
    1660:	b7 51       	subi	r27, 0x17	; 23
    1662:	b0 f0       	brcs	.+44     	; 0x1690 <__fixunssfsi+0x3e>
    1664:	e1 f0       	breq	.+56     	; 0x169e <__fixunssfsi+0x4c>
    1666:	66 0f       	add	r22, r22
    1668:	77 1f       	adc	r23, r23
    166a:	88 1f       	adc	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	1a f0       	brmi	.+6      	; 0x1676 <__fixunssfsi+0x24>
    1670:	ba 95       	dec	r27
    1672:	c9 f7       	brne	.-14     	; 0x1666 <__fixunssfsi+0x14>
    1674:	14 c0       	rjmp	.+40     	; 0x169e <__fixunssfsi+0x4c>
    1676:	b1 30       	cpi	r27, 0x01	; 1
    1678:	91 f0       	breq	.+36     	; 0x169e <__fixunssfsi+0x4c>
    167a:	0e 94 03 0c 	call	0x1806	; 0x1806 <__fp_zero>
    167e:	b1 e0       	ldi	r27, 0x01	; 1
    1680:	08 95       	ret
    1682:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__fp_zero>
    1686:	67 2f       	mov	r22, r23
    1688:	78 2f       	mov	r23, r24
    168a:	88 27       	eor	r24, r24
    168c:	b8 5f       	subi	r27, 0xF8	; 248
    168e:	39 f0       	breq	.+14     	; 0x169e <__fixunssfsi+0x4c>
    1690:	b9 3f       	cpi	r27, 0xF9	; 249
    1692:	cc f3       	brlt	.-14     	; 0x1686 <__fixunssfsi+0x34>
    1694:	86 95       	lsr	r24
    1696:	77 95       	ror	r23
    1698:	67 95       	ror	r22
    169a:	b3 95       	inc	r27
    169c:	d9 f7       	brne	.-10     	; 0x1694 <__fixunssfsi+0x42>
    169e:	3e f4       	brtc	.+14     	; 0x16ae <__fixunssfsi+0x5c>
    16a0:	90 95       	com	r25
    16a2:	80 95       	com	r24
    16a4:	70 95       	com	r23
    16a6:	61 95       	neg	r22
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	8f 4f       	sbci	r24, 0xFF	; 255
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	08 95       	ret

000016b0 <__floatunsisf>:
    16b0:	e8 94       	clt
    16b2:	09 c0       	rjmp	.+18     	; 0x16c6 <__floatsisf+0x12>

000016b4 <__floatsisf>:
    16b4:	97 fb       	bst	r25, 7
    16b6:	3e f4       	brtc	.+14     	; 0x16c6 <__floatsisf+0x12>
    16b8:	90 95       	com	r25
    16ba:	80 95       	com	r24
    16bc:	70 95       	com	r23
    16be:	61 95       	neg	r22
    16c0:	7f 4f       	sbci	r23, 0xFF	; 255
    16c2:	8f 4f       	sbci	r24, 0xFF	; 255
    16c4:	9f 4f       	sbci	r25, 0xFF	; 255
    16c6:	99 23       	and	r25, r25
    16c8:	a9 f0       	breq	.+42     	; 0x16f4 <__floatsisf+0x40>
    16ca:	f9 2f       	mov	r31, r25
    16cc:	96 e9       	ldi	r25, 0x96	; 150
    16ce:	bb 27       	eor	r27, r27
    16d0:	93 95       	inc	r25
    16d2:	f6 95       	lsr	r31
    16d4:	87 95       	ror	r24
    16d6:	77 95       	ror	r23
    16d8:	67 95       	ror	r22
    16da:	b7 95       	ror	r27
    16dc:	f1 11       	cpse	r31, r1
    16de:	f8 cf       	rjmp	.-16     	; 0x16d0 <__floatsisf+0x1c>
    16e0:	fa f4       	brpl	.+62     	; 0x1720 <__floatsisf+0x6c>
    16e2:	bb 0f       	add	r27, r27
    16e4:	11 f4       	brne	.+4      	; 0x16ea <__floatsisf+0x36>
    16e6:	60 ff       	sbrs	r22, 0
    16e8:	1b c0       	rjmp	.+54     	; 0x1720 <__floatsisf+0x6c>
    16ea:	6f 5f       	subi	r22, 0xFF	; 255
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	8f 4f       	sbci	r24, 0xFF	; 255
    16f0:	9f 4f       	sbci	r25, 0xFF	; 255
    16f2:	16 c0       	rjmp	.+44     	; 0x1720 <__floatsisf+0x6c>
    16f4:	88 23       	and	r24, r24
    16f6:	11 f0       	breq	.+4      	; 0x16fc <__floatsisf+0x48>
    16f8:	96 e9       	ldi	r25, 0x96	; 150
    16fa:	11 c0       	rjmp	.+34     	; 0x171e <__floatsisf+0x6a>
    16fc:	77 23       	and	r23, r23
    16fe:	21 f0       	breq	.+8      	; 0x1708 <__floatsisf+0x54>
    1700:	9e e8       	ldi	r25, 0x8E	; 142
    1702:	87 2f       	mov	r24, r23
    1704:	76 2f       	mov	r23, r22
    1706:	05 c0       	rjmp	.+10     	; 0x1712 <__floatsisf+0x5e>
    1708:	66 23       	and	r22, r22
    170a:	71 f0       	breq	.+28     	; 0x1728 <__floatsisf+0x74>
    170c:	96 e8       	ldi	r25, 0x86	; 134
    170e:	86 2f       	mov	r24, r22
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	2a f0       	brmi	.+10     	; 0x1720 <__floatsisf+0x6c>
    1716:	9a 95       	dec	r25
    1718:	66 0f       	add	r22, r22
    171a:	77 1f       	adc	r23, r23
    171c:	88 1f       	adc	r24, r24
    171e:	da f7       	brpl	.-10     	; 0x1716 <__floatsisf+0x62>
    1720:	88 0f       	add	r24, r24
    1722:	96 95       	lsr	r25
    1724:	87 95       	ror	r24
    1726:	97 f9       	bld	r25, 7
    1728:	08 95       	ret

0000172a <__fp_cmp>:
    172a:	99 0f       	add	r25, r25
    172c:	00 08       	sbc	r0, r0
    172e:	55 0f       	add	r21, r21
    1730:	aa 0b       	sbc	r26, r26
    1732:	e0 e8       	ldi	r30, 0x80	; 128
    1734:	fe ef       	ldi	r31, 0xFE	; 254
    1736:	16 16       	cp	r1, r22
    1738:	17 06       	cpc	r1, r23
    173a:	e8 07       	cpc	r30, r24
    173c:	f9 07       	cpc	r31, r25
    173e:	c0 f0       	brcs	.+48     	; 0x1770 <__fp_cmp+0x46>
    1740:	12 16       	cp	r1, r18
    1742:	13 06       	cpc	r1, r19
    1744:	e4 07       	cpc	r30, r20
    1746:	f5 07       	cpc	r31, r21
    1748:	98 f0       	brcs	.+38     	; 0x1770 <__fp_cmp+0x46>
    174a:	62 1b       	sub	r22, r18
    174c:	73 0b       	sbc	r23, r19
    174e:	84 0b       	sbc	r24, r20
    1750:	95 0b       	sbc	r25, r21
    1752:	39 f4       	brne	.+14     	; 0x1762 <__fp_cmp+0x38>
    1754:	0a 26       	eor	r0, r26
    1756:	61 f0       	breq	.+24     	; 0x1770 <__fp_cmp+0x46>
    1758:	23 2b       	or	r18, r19
    175a:	24 2b       	or	r18, r20
    175c:	25 2b       	or	r18, r21
    175e:	21 f4       	brne	.+8      	; 0x1768 <__fp_cmp+0x3e>
    1760:	08 95       	ret
    1762:	0a 26       	eor	r0, r26
    1764:	09 f4       	brne	.+2      	; 0x1768 <__fp_cmp+0x3e>
    1766:	a1 40       	sbci	r26, 0x01	; 1
    1768:	a6 95       	lsr	r26
    176a:	8f ef       	ldi	r24, 0xFF	; 255
    176c:	81 1d       	adc	r24, r1
    176e:	81 1d       	adc	r24, r1
    1770:	08 95       	ret

00001772 <__fp_inf>:
    1772:	97 f9       	bld	r25, 7
    1774:	9f 67       	ori	r25, 0x7F	; 127
    1776:	80 e8       	ldi	r24, 0x80	; 128
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	08 95       	ret

0000177e <__fp_nan>:
    177e:	9f ef       	ldi	r25, 0xFF	; 255
    1780:	80 ec       	ldi	r24, 0xC0	; 192
    1782:	08 95       	ret

00001784 <__fp_pscA>:
    1784:	00 24       	eor	r0, r0
    1786:	0a 94       	dec	r0
    1788:	16 16       	cp	r1, r22
    178a:	17 06       	cpc	r1, r23
    178c:	18 06       	cpc	r1, r24
    178e:	09 06       	cpc	r0, r25
    1790:	08 95       	ret

00001792 <__fp_pscB>:
    1792:	00 24       	eor	r0, r0
    1794:	0a 94       	dec	r0
    1796:	12 16       	cp	r1, r18
    1798:	13 06       	cpc	r1, r19
    179a:	14 06       	cpc	r1, r20
    179c:	05 06       	cpc	r0, r21
    179e:	08 95       	ret

000017a0 <__fp_round>:
    17a0:	09 2e       	mov	r0, r25
    17a2:	03 94       	inc	r0
    17a4:	00 0c       	add	r0, r0
    17a6:	11 f4       	brne	.+4      	; 0x17ac <__fp_round+0xc>
    17a8:	88 23       	and	r24, r24
    17aa:	52 f0       	brmi	.+20     	; 0x17c0 <__fp_round+0x20>
    17ac:	bb 0f       	add	r27, r27
    17ae:	40 f4       	brcc	.+16     	; 0x17c0 <__fp_round+0x20>
    17b0:	bf 2b       	or	r27, r31
    17b2:	11 f4       	brne	.+4      	; 0x17b8 <__fp_round+0x18>
    17b4:	60 ff       	sbrs	r22, 0
    17b6:	04 c0       	rjmp	.+8      	; 0x17c0 <__fp_round+0x20>
    17b8:	6f 5f       	subi	r22, 0xFF	; 255
    17ba:	7f 4f       	sbci	r23, 0xFF	; 255
    17bc:	8f 4f       	sbci	r24, 0xFF	; 255
    17be:	9f 4f       	sbci	r25, 0xFF	; 255
    17c0:	08 95       	ret

000017c2 <__fp_split3>:
    17c2:	57 fd       	sbrc	r21, 7
    17c4:	90 58       	subi	r25, 0x80	; 128
    17c6:	44 0f       	add	r20, r20
    17c8:	55 1f       	adc	r21, r21
    17ca:	59 f0       	breq	.+22     	; 0x17e2 <__fp_splitA+0x10>
    17cc:	5f 3f       	cpi	r21, 0xFF	; 255
    17ce:	71 f0       	breq	.+28     	; 0x17ec <__fp_splitA+0x1a>
    17d0:	47 95       	ror	r20

000017d2 <__fp_splitA>:
    17d2:	88 0f       	add	r24, r24
    17d4:	97 fb       	bst	r25, 7
    17d6:	99 1f       	adc	r25, r25
    17d8:	61 f0       	breq	.+24     	; 0x17f2 <__fp_splitA+0x20>
    17da:	9f 3f       	cpi	r25, 0xFF	; 255
    17dc:	79 f0       	breq	.+30     	; 0x17fc <__fp_splitA+0x2a>
    17de:	87 95       	ror	r24
    17e0:	08 95       	ret
    17e2:	12 16       	cp	r1, r18
    17e4:	13 06       	cpc	r1, r19
    17e6:	14 06       	cpc	r1, r20
    17e8:	55 1f       	adc	r21, r21
    17ea:	f2 cf       	rjmp	.-28     	; 0x17d0 <__fp_split3+0xe>
    17ec:	46 95       	lsr	r20
    17ee:	f1 df       	rcall	.-30     	; 0x17d2 <__fp_splitA>
    17f0:	08 c0       	rjmp	.+16     	; 0x1802 <__fp_splitA+0x30>
    17f2:	16 16       	cp	r1, r22
    17f4:	17 06       	cpc	r1, r23
    17f6:	18 06       	cpc	r1, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	f1 cf       	rjmp	.-30     	; 0x17de <__fp_splitA+0xc>
    17fc:	86 95       	lsr	r24
    17fe:	71 05       	cpc	r23, r1
    1800:	61 05       	cpc	r22, r1
    1802:	08 94       	sec
    1804:	08 95       	ret

00001806 <__fp_zero>:
    1806:	e8 94       	clt

00001808 <__fp_szero>:
    1808:	bb 27       	eor	r27, r27
    180a:	66 27       	eor	r22, r22
    180c:	77 27       	eor	r23, r23
    180e:	cb 01       	movw	r24, r22
    1810:	97 f9       	bld	r25, 7
    1812:	08 95       	ret

00001814 <__gesf2>:
    1814:	0e 94 95 0b 	call	0x172a	; 0x172a <__fp_cmp>
    1818:	08 f4       	brcc	.+2      	; 0x181c <__gesf2+0x8>
    181a:	8f ef       	ldi	r24, 0xFF	; 255
    181c:	08 95       	ret

0000181e <__mulsf3>:
    181e:	0e 94 22 0c 	call	0x1844	; 0x1844 <__mulsf3x>
    1822:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__fp_round>
    1826:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__fp_pscA>
    182a:	38 f0       	brcs	.+14     	; 0x183a <__mulsf3+0x1c>
    182c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__fp_pscB>
    1830:	20 f0       	brcs	.+8      	; 0x183a <__mulsf3+0x1c>
    1832:	95 23       	and	r25, r21
    1834:	11 f0       	breq	.+4      	; 0x183a <__mulsf3+0x1c>
    1836:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_inf>
    183a:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__fp_nan>
    183e:	11 24       	eor	r1, r1
    1840:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_szero>

00001844 <__mulsf3x>:
    1844:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fp_split3>
    1848:	70 f3       	brcs	.-36     	; 0x1826 <__mulsf3+0x8>

0000184a <__mulsf3_pse>:
    184a:	95 9f       	mul	r25, r21
    184c:	c1 f3       	breq	.-16     	; 0x183e <__mulsf3+0x20>
    184e:	95 0f       	add	r25, r21
    1850:	50 e0       	ldi	r21, 0x00	; 0
    1852:	55 1f       	adc	r21, r21
    1854:	62 9f       	mul	r22, r18
    1856:	f0 01       	movw	r30, r0
    1858:	72 9f       	mul	r23, r18
    185a:	bb 27       	eor	r27, r27
    185c:	f0 0d       	add	r31, r0
    185e:	b1 1d       	adc	r27, r1
    1860:	63 9f       	mul	r22, r19
    1862:	aa 27       	eor	r26, r26
    1864:	f0 0d       	add	r31, r0
    1866:	b1 1d       	adc	r27, r1
    1868:	aa 1f       	adc	r26, r26
    186a:	64 9f       	mul	r22, r20
    186c:	66 27       	eor	r22, r22
    186e:	b0 0d       	add	r27, r0
    1870:	a1 1d       	adc	r26, r1
    1872:	66 1f       	adc	r22, r22
    1874:	82 9f       	mul	r24, r18
    1876:	22 27       	eor	r18, r18
    1878:	b0 0d       	add	r27, r0
    187a:	a1 1d       	adc	r26, r1
    187c:	62 1f       	adc	r22, r18
    187e:	73 9f       	mul	r23, r19
    1880:	b0 0d       	add	r27, r0
    1882:	a1 1d       	adc	r26, r1
    1884:	62 1f       	adc	r22, r18
    1886:	83 9f       	mul	r24, r19
    1888:	a0 0d       	add	r26, r0
    188a:	61 1d       	adc	r22, r1
    188c:	22 1f       	adc	r18, r18
    188e:	74 9f       	mul	r23, r20
    1890:	33 27       	eor	r19, r19
    1892:	a0 0d       	add	r26, r0
    1894:	61 1d       	adc	r22, r1
    1896:	23 1f       	adc	r18, r19
    1898:	84 9f       	mul	r24, r20
    189a:	60 0d       	add	r22, r0
    189c:	21 1d       	adc	r18, r1
    189e:	82 2f       	mov	r24, r18
    18a0:	76 2f       	mov	r23, r22
    18a2:	6a 2f       	mov	r22, r26
    18a4:	11 24       	eor	r1, r1
    18a6:	9f 57       	subi	r25, 0x7F	; 127
    18a8:	50 40       	sbci	r21, 0x00	; 0
    18aa:	9a f0       	brmi	.+38     	; 0x18d2 <__mulsf3_pse+0x88>
    18ac:	f1 f0       	breq	.+60     	; 0x18ea <__mulsf3_pse+0xa0>
    18ae:	88 23       	and	r24, r24
    18b0:	4a f0       	brmi	.+18     	; 0x18c4 <__mulsf3_pse+0x7a>
    18b2:	ee 0f       	add	r30, r30
    18b4:	ff 1f       	adc	r31, r31
    18b6:	bb 1f       	adc	r27, r27
    18b8:	66 1f       	adc	r22, r22
    18ba:	77 1f       	adc	r23, r23
    18bc:	88 1f       	adc	r24, r24
    18be:	91 50       	subi	r25, 0x01	; 1
    18c0:	50 40       	sbci	r21, 0x00	; 0
    18c2:	a9 f7       	brne	.-22     	; 0x18ae <__mulsf3_pse+0x64>
    18c4:	9e 3f       	cpi	r25, 0xFE	; 254
    18c6:	51 05       	cpc	r21, r1
    18c8:	80 f0       	brcs	.+32     	; 0x18ea <__mulsf3_pse+0xa0>
    18ca:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_inf>
    18ce:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_szero>
    18d2:	5f 3f       	cpi	r21, 0xFF	; 255
    18d4:	e4 f3       	brlt	.-8      	; 0x18ce <__mulsf3_pse+0x84>
    18d6:	98 3e       	cpi	r25, 0xE8	; 232
    18d8:	d4 f3       	brlt	.-12     	; 0x18ce <__mulsf3_pse+0x84>
    18da:	86 95       	lsr	r24
    18dc:	77 95       	ror	r23
    18de:	67 95       	ror	r22
    18e0:	b7 95       	ror	r27
    18e2:	f7 95       	ror	r31
    18e4:	e7 95       	ror	r30
    18e6:	9f 5f       	subi	r25, 0xFF	; 255
    18e8:	c1 f7       	brne	.-16     	; 0x18da <__mulsf3_pse+0x90>
    18ea:	fe 2b       	or	r31, r30
    18ec:	88 0f       	add	r24, r24
    18ee:	91 1d       	adc	r25, r1
    18f0:	96 95       	lsr	r25
    18f2:	87 95       	ror	r24
    18f4:	97 f9       	bld	r25, 7
    18f6:	08 95       	ret

000018f8 <__udivmodhi4>:
    18f8:	aa 1b       	sub	r26, r26
    18fa:	bb 1b       	sub	r27, r27
    18fc:	51 e1       	ldi	r21, 0x11	; 17
    18fe:	07 c0       	rjmp	.+14     	; 0x190e <__udivmodhi4_ep>

00001900 <__udivmodhi4_loop>:
    1900:	aa 1f       	adc	r26, r26
    1902:	bb 1f       	adc	r27, r27
    1904:	a6 17       	cp	r26, r22
    1906:	b7 07       	cpc	r27, r23
    1908:	10 f0       	brcs	.+4      	; 0x190e <__udivmodhi4_ep>
    190a:	a6 1b       	sub	r26, r22
    190c:	b7 0b       	sbc	r27, r23

0000190e <__udivmodhi4_ep>:
    190e:	88 1f       	adc	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	5a 95       	dec	r21
    1914:	a9 f7       	brne	.-22     	; 0x1900 <__udivmodhi4_loop>
    1916:	80 95       	com	r24
    1918:	90 95       	com	r25
    191a:	bc 01       	movw	r22, r24
    191c:	cd 01       	movw	r24, r26
    191e:	08 95       	ret

00001920 <__ashrdi3>:
    1920:	97 fb       	bst	r25, 7
    1922:	10 f8       	bld	r1, 0

00001924 <__lshrdi3>:
    1924:	16 94       	lsr	r1
    1926:	00 08       	sbc	r0, r0
    1928:	0f 93       	push	r16
    192a:	08 30       	cpi	r16, 0x08	; 8
    192c:	98 f0       	brcs	.+38     	; 0x1954 <__lshrdi3+0x30>
    192e:	08 50       	subi	r16, 0x08	; 8
    1930:	23 2f       	mov	r18, r19
    1932:	34 2f       	mov	r19, r20
    1934:	45 2f       	mov	r20, r21
    1936:	56 2f       	mov	r21, r22
    1938:	67 2f       	mov	r22, r23
    193a:	78 2f       	mov	r23, r24
    193c:	89 2f       	mov	r24, r25
    193e:	90 2d       	mov	r25, r0
    1940:	f4 cf       	rjmp	.-24     	; 0x192a <__lshrdi3+0x6>
    1942:	05 94       	asr	r0
    1944:	97 95       	ror	r25
    1946:	87 95       	ror	r24
    1948:	77 95       	ror	r23
    194a:	67 95       	ror	r22
    194c:	57 95       	ror	r21
    194e:	47 95       	ror	r20
    1950:	37 95       	ror	r19
    1952:	27 95       	ror	r18
    1954:	0a 95       	dec	r16
    1956:	aa f7       	brpl	.-22     	; 0x1942 <__lshrdi3+0x1e>
    1958:	0f 91       	pop	r16
    195a:	08 95       	ret

0000195c <__cmpdi2_s8>:
    195c:	00 24       	eor	r0, r0
    195e:	a7 fd       	sbrc	r26, 7
    1960:	00 94       	com	r0
    1962:	2a 17       	cp	r18, r26
    1964:	30 05       	cpc	r19, r0
    1966:	40 05       	cpc	r20, r0
    1968:	50 05       	cpc	r21, r0
    196a:	60 05       	cpc	r22, r0
    196c:	70 05       	cpc	r23, r0
    196e:	80 05       	cpc	r24, r0
    1970:	90 05       	cpc	r25, r0
    1972:	08 95       	ret

00001974 <__tablejump2__>:
    1974:	ee 0f       	add	r30, r30
    1976:	ff 1f       	adc	r31, r31
    1978:	05 90       	lpm	r0, Z+
    197a:	f4 91       	lpm	r31, Z
    197c:	e0 2d       	mov	r30, r0
    197e:	09 94       	ijmp

00001980 <malloc>:
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	82 30       	cpi	r24, 0x02	; 2
    198a:	91 05       	cpc	r25, r1
    198c:	10 f4       	brcc	.+4      	; 0x1992 <malloc+0x12>
    198e:	82 e0       	ldi	r24, 0x02	; 2
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <__flp>
    1996:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <__flp+0x1>
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	a0 e0       	ldi	r26, 0x00	; 0
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	30 97       	sbiw	r30, 0x00	; 0
    19a4:	19 f1       	breq	.+70     	; 0x19ec <malloc+0x6c>
    19a6:	40 81       	ld	r20, Z
    19a8:	51 81       	ldd	r21, Z+1	; 0x01
    19aa:	02 81       	ldd	r16, Z+2	; 0x02
    19ac:	13 81       	ldd	r17, Z+3	; 0x03
    19ae:	48 17       	cp	r20, r24
    19b0:	59 07       	cpc	r21, r25
    19b2:	c8 f0       	brcs	.+50     	; 0x19e6 <malloc+0x66>
    19b4:	84 17       	cp	r24, r20
    19b6:	95 07       	cpc	r25, r21
    19b8:	69 f4       	brne	.+26     	; 0x19d4 <malloc+0x54>
    19ba:	10 97       	sbiw	r26, 0x00	; 0
    19bc:	31 f0       	breq	.+12     	; 0x19ca <malloc+0x4a>
    19be:	12 96       	adiw	r26, 0x02	; 2
    19c0:	0c 93       	st	X, r16
    19c2:	12 97       	sbiw	r26, 0x02	; 2
    19c4:	13 96       	adiw	r26, 0x03	; 3
    19c6:	1c 93       	st	X, r17
    19c8:	27 c0       	rjmp	.+78     	; 0x1a18 <malloc+0x98>
    19ca:	00 93 90 02 	sts	0x0290, r16	; 0x800290 <__flp>
    19ce:	10 93 91 02 	sts	0x0291, r17	; 0x800291 <__flp+0x1>
    19d2:	22 c0       	rjmp	.+68     	; 0x1a18 <malloc+0x98>
    19d4:	21 15       	cp	r18, r1
    19d6:	31 05       	cpc	r19, r1
    19d8:	19 f0       	breq	.+6      	; 0x19e0 <malloc+0x60>
    19da:	42 17       	cp	r20, r18
    19dc:	53 07       	cpc	r21, r19
    19de:	18 f4       	brcc	.+6      	; 0x19e6 <malloc+0x66>
    19e0:	9a 01       	movw	r18, r20
    19e2:	bd 01       	movw	r22, r26
    19e4:	ef 01       	movw	r28, r30
    19e6:	df 01       	movw	r26, r30
    19e8:	f8 01       	movw	r30, r16
    19ea:	db cf       	rjmp	.-74     	; 0x19a2 <malloc+0x22>
    19ec:	21 15       	cp	r18, r1
    19ee:	31 05       	cpc	r19, r1
    19f0:	f9 f0       	breq	.+62     	; 0x1a30 <malloc+0xb0>
    19f2:	28 1b       	sub	r18, r24
    19f4:	39 0b       	sbc	r19, r25
    19f6:	24 30       	cpi	r18, 0x04	; 4
    19f8:	31 05       	cpc	r19, r1
    19fa:	80 f4       	brcc	.+32     	; 0x1a1c <malloc+0x9c>
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1a00:	61 15       	cp	r22, r1
    1a02:	71 05       	cpc	r23, r1
    1a04:	21 f0       	breq	.+8      	; 0x1a0e <malloc+0x8e>
    1a06:	fb 01       	movw	r30, r22
    1a08:	93 83       	std	Z+3, r25	; 0x03
    1a0a:	82 83       	std	Z+2, r24	; 0x02
    1a0c:	04 c0       	rjmp	.+8      	; 0x1a16 <malloc+0x96>
    1a0e:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <__flp+0x1>
    1a12:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <__flp>
    1a16:	fe 01       	movw	r30, r28
    1a18:	32 96       	adiw	r30, 0x02	; 2
    1a1a:	44 c0       	rjmp	.+136    	; 0x1aa4 <malloc+0x124>
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e2 0f       	add	r30, r18
    1a20:	f3 1f       	adc	r31, r19
    1a22:	81 93       	st	Z+, r24
    1a24:	91 93       	st	Z+, r25
    1a26:	22 50       	subi	r18, 0x02	; 2
    1a28:	31 09       	sbc	r19, r1
    1a2a:	39 83       	std	Y+1, r19	; 0x01
    1a2c:	28 83       	st	Y, r18
    1a2e:	3a c0       	rjmp	.+116    	; 0x1aa4 <malloc+0x124>
    1a30:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <__brkval>
    1a34:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <__brkval+0x1>
    1a38:	23 2b       	or	r18, r19
    1a3a:	41 f4       	brne	.+16     	; 0x1a4c <malloc+0xcc>
    1a3c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1a40:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1a44:	30 93 8f 02 	sts	0x028F, r19	; 0x80028f <__brkval+0x1>
    1a48:	20 93 8e 02 	sts	0x028E, r18	; 0x80028e <__brkval>
    1a4c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1a50:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1a54:	21 15       	cp	r18, r1
    1a56:	31 05       	cpc	r19, r1
    1a58:	41 f4       	brne	.+16     	; 0x1a6a <malloc+0xea>
    1a5a:	2d b7       	in	r18, 0x3d	; 61
    1a5c:	3e b7       	in	r19, 0x3e	; 62
    1a5e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1a62:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1a66:	24 1b       	sub	r18, r20
    1a68:	35 0b       	sbc	r19, r21
    1a6a:	e0 91 8e 02 	lds	r30, 0x028E	; 0x80028e <__brkval>
    1a6e:	f0 91 8f 02 	lds	r31, 0x028F	; 0x80028f <__brkval+0x1>
    1a72:	e2 17       	cp	r30, r18
    1a74:	f3 07       	cpc	r31, r19
    1a76:	a0 f4       	brcc	.+40     	; 0x1aa0 <malloc+0x120>
    1a78:	2e 1b       	sub	r18, r30
    1a7a:	3f 0b       	sbc	r19, r31
    1a7c:	28 17       	cp	r18, r24
    1a7e:	39 07       	cpc	r19, r25
    1a80:	78 f0       	brcs	.+30     	; 0x1aa0 <malloc+0x120>
    1a82:	ac 01       	movw	r20, r24
    1a84:	4e 5f       	subi	r20, 0xFE	; 254
    1a86:	5f 4f       	sbci	r21, 0xFF	; 255
    1a88:	24 17       	cp	r18, r20
    1a8a:	35 07       	cpc	r19, r21
    1a8c:	48 f0       	brcs	.+18     	; 0x1aa0 <malloc+0x120>
    1a8e:	4e 0f       	add	r20, r30
    1a90:	5f 1f       	adc	r21, r31
    1a92:	50 93 8f 02 	sts	0x028F, r21	; 0x80028f <__brkval+0x1>
    1a96:	40 93 8e 02 	sts	0x028E, r20	; 0x80028e <__brkval>
    1a9a:	81 93       	st	Z+, r24
    1a9c:	91 93       	st	Z+, r25
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <malloc+0x124>
    1aa0:	e0 e0       	ldi	r30, 0x00	; 0
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	cf 01       	movw	r24, r30
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	08 95       	ret

00001ab0 <free>:
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <free+0xa>
    1ab8:	81 c0       	rjmp	.+258    	; 0x1bbc <free+0x10c>
    1aba:	fc 01       	movw	r30, r24
    1abc:	32 97       	sbiw	r30, 0x02	; 2
    1abe:	13 82       	std	Z+3, r1	; 0x03
    1ac0:	12 82       	std	Z+2, r1	; 0x02
    1ac2:	a0 91 90 02 	lds	r26, 0x0290	; 0x800290 <__flp>
    1ac6:	b0 91 91 02 	lds	r27, 0x0291	; 0x800291 <__flp+0x1>
    1aca:	10 97       	sbiw	r26, 0x00	; 0
    1acc:	81 f4       	brne	.+32     	; 0x1aee <free+0x3e>
    1ace:	20 81       	ld	r18, Z
    1ad0:	31 81       	ldd	r19, Z+1	; 0x01
    1ad2:	82 0f       	add	r24, r18
    1ad4:	93 1f       	adc	r25, r19
    1ad6:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <__brkval>
    1ada:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <__brkval+0x1>
    1ade:	28 17       	cp	r18, r24
    1ae0:	39 07       	cpc	r19, r25
    1ae2:	51 f5       	brne	.+84     	; 0x1b38 <free+0x88>
    1ae4:	f0 93 8f 02 	sts	0x028F, r31	; 0x80028f <__brkval+0x1>
    1ae8:	e0 93 8e 02 	sts	0x028E, r30	; 0x80028e <__brkval>
    1aec:	67 c0       	rjmp	.+206    	; 0x1bbc <free+0x10c>
    1aee:	ed 01       	movw	r28, r26
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	ce 17       	cp	r28, r30
    1af6:	df 07       	cpc	r29, r31
    1af8:	40 f4       	brcc	.+16     	; 0x1b0a <free+0x5a>
    1afa:	4a 81       	ldd	r20, Y+2	; 0x02
    1afc:	5b 81       	ldd	r21, Y+3	; 0x03
    1afe:	9e 01       	movw	r18, r28
    1b00:	41 15       	cp	r20, r1
    1b02:	51 05       	cpc	r21, r1
    1b04:	f1 f0       	breq	.+60     	; 0x1b42 <free+0x92>
    1b06:	ea 01       	movw	r28, r20
    1b08:	f5 cf       	rjmp	.-22     	; 0x1af4 <free+0x44>
    1b0a:	d3 83       	std	Z+3, r29	; 0x03
    1b0c:	c2 83       	std	Z+2, r28	; 0x02
    1b0e:	40 81       	ld	r20, Z
    1b10:	51 81       	ldd	r21, Z+1	; 0x01
    1b12:	84 0f       	add	r24, r20
    1b14:	95 1f       	adc	r25, r21
    1b16:	c8 17       	cp	r28, r24
    1b18:	d9 07       	cpc	r29, r25
    1b1a:	59 f4       	brne	.+22     	; 0x1b32 <free+0x82>
    1b1c:	88 81       	ld	r24, Y
    1b1e:	99 81       	ldd	r25, Y+1	; 0x01
    1b20:	84 0f       	add	r24, r20
    1b22:	95 1f       	adc	r25, r21
    1b24:	02 96       	adiw	r24, 0x02	; 2
    1b26:	91 83       	std	Z+1, r25	; 0x01
    1b28:	80 83       	st	Z, r24
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2e:	93 83       	std	Z+3, r25	; 0x03
    1b30:	82 83       	std	Z+2, r24	; 0x02
    1b32:	21 15       	cp	r18, r1
    1b34:	31 05       	cpc	r19, r1
    1b36:	29 f4       	brne	.+10     	; 0x1b42 <free+0x92>
    1b38:	f0 93 91 02 	sts	0x0291, r31	; 0x800291 <__flp+0x1>
    1b3c:	e0 93 90 02 	sts	0x0290, r30	; 0x800290 <__flp>
    1b40:	3d c0       	rjmp	.+122    	; 0x1bbc <free+0x10c>
    1b42:	e9 01       	movw	r28, r18
    1b44:	fb 83       	std	Y+3, r31	; 0x03
    1b46:	ea 83       	std	Y+2, r30	; 0x02
    1b48:	49 91       	ld	r20, Y+
    1b4a:	59 91       	ld	r21, Y+
    1b4c:	c4 0f       	add	r28, r20
    1b4e:	d5 1f       	adc	r29, r21
    1b50:	ec 17       	cp	r30, r28
    1b52:	fd 07       	cpc	r31, r29
    1b54:	61 f4       	brne	.+24     	; 0x1b6e <free+0xbe>
    1b56:	80 81       	ld	r24, Z
    1b58:	91 81       	ldd	r25, Z+1	; 0x01
    1b5a:	84 0f       	add	r24, r20
    1b5c:	95 1f       	adc	r25, r21
    1b5e:	02 96       	adiw	r24, 0x02	; 2
    1b60:	e9 01       	movw	r28, r18
    1b62:	99 83       	std	Y+1, r25	; 0x01
    1b64:	88 83       	st	Y, r24
    1b66:	82 81       	ldd	r24, Z+2	; 0x02
    1b68:	93 81       	ldd	r25, Z+3	; 0x03
    1b6a:	9b 83       	std	Y+3, r25	; 0x03
    1b6c:	8a 83       	std	Y+2, r24	; 0x02
    1b6e:	e0 e0       	ldi	r30, 0x00	; 0
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	12 96       	adiw	r26, 0x02	; 2
    1b74:	8d 91       	ld	r24, X+
    1b76:	9c 91       	ld	r25, X
    1b78:	13 97       	sbiw	r26, 0x03	; 3
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	19 f0       	breq	.+6      	; 0x1b84 <free+0xd4>
    1b7e:	fd 01       	movw	r30, r26
    1b80:	dc 01       	movw	r26, r24
    1b82:	f7 cf       	rjmp	.-18     	; 0x1b72 <free+0xc2>
    1b84:	8d 91       	ld	r24, X+
    1b86:	9c 91       	ld	r25, X
    1b88:	11 97       	sbiw	r26, 0x01	; 1
    1b8a:	9d 01       	movw	r18, r26
    1b8c:	2e 5f       	subi	r18, 0xFE	; 254
    1b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b90:	82 0f       	add	r24, r18
    1b92:	93 1f       	adc	r25, r19
    1b94:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <__brkval>
    1b98:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <__brkval+0x1>
    1b9c:	28 17       	cp	r18, r24
    1b9e:	39 07       	cpc	r19, r25
    1ba0:	69 f4       	brne	.+26     	; 0x1bbc <free+0x10c>
    1ba2:	30 97       	sbiw	r30, 0x00	; 0
    1ba4:	29 f4       	brne	.+10     	; 0x1bb0 <free+0x100>
    1ba6:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <__flp+0x1>
    1baa:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <__flp>
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <free+0x104>
    1bb0:	13 82       	std	Z+3, r1	; 0x03
    1bb2:	12 82       	std	Z+2, r1	; 0x02
    1bb4:	b0 93 8f 02 	sts	0x028F, r27	; 0x80028f <__brkval+0x1>
    1bb8:	a0 93 8e 02 	sts	0x028E, r26	; 0x80028e <__brkval>
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	08 95       	ret

00001bc2 <do_rand>:
    1bc2:	8f 92       	push	r8
    1bc4:	9f 92       	push	r9
    1bc6:	af 92       	push	r10
    1bc8:	bf 92       	push	r11
    1bca:	cf 92       	push	r12
    1bcc:	df 92       	push	r13
    1bce:	ef 92       	push	r14
    1bd0:	ff 92       	push	r15
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	ec 01       	movw	r28, r24
    1bd8:	68 81       	ld	r22, Y
    1bda:	79 81       	ldd	r23, Y+1	; 0x01
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	9b 81       	ldd	r25, Y+3	; 0x03
    1be0:	61 15       	cp	r22, r1
    1be2:	71 05       	cpc	r23, r1
    1be4:	81 05       	cpc	r24, r1
    1be6:	91 05       	cpc	r25, r1
    1be8:	21 f4       	brne	.+8      	; 0x1bf2 <do_rand+0x30>
    1bea:	64 e2       	ldi	r22, 0x24	; 36
    1bec:	79 ed       	ldi	r23, 0xD9	; 217
    1bee:	8b e5       	ldi	r24, 0x5B	; 91
    1bf0:	97 e0       	ldi	r25, 0x07	; 7
    1bf2:	2d e1       	ldi	r18, 0x1D	; 29
    1bf4:	33 ef       	ldi	r19, 0xF3	; 243
    1bf6:	41 e0       	ldi	r20, 0x01	; 1
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
    1bfa:	0e 94 cd 11 	call	0x239a	; 0x239a <__divmodsi4>
    1bfe:	49 01       	movw	r8, r18
    1c00:	5a 01       	movw	r10, r20
    1c02:	9b 01       	movw	r18, r22
    1c04:	ac 01       	movw	r20, r24
    1c06:	a7 ea       	ldi	r26, 0xA7	; 167
    1c08:	b1 e4       	ldi	r27, 0x41	; 65
    1c0a:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__muluhisi3>
    1c0e:	6b 01       	movw	r12, r22
    1c10:	7c 01       	movw	r14, r24
    1c12:	ac ee       	ldi	r26, 0xEC	; 236
    1c14:	b4 ef       	ldi	r27, 0xF4	; 244
    1c16:	a5 01       	movw	r20, r10
    1c18:	94 01       	movw	r18, r8
    1c1a:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__mulohisi3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	8c 0d       	add	r24, r12
    1c24:	9d 1d       	adc	r25, r13
    1c26:	ae 1d       	adc	r26, r14
    1c28:	bf 1d       	adc	r27, r15
    1c2a:	b7 ff       	sbrs	r27, 7
    1c2c:	03 c0       	rjmp	.+6      	; 0x1c34 <do_rand+0x72>
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	a1 09       	sbc	r26, r1
    1c32:	b0 48       	sbci	r27, 0x80	; 128
    1c34:	88 83       	st	Y, r24
    1c36:	99 83       	std	Y+1, r25	; 0x01
    1c38:	aa 83       	std	Y+2, r26	; 0x02
    1c3a:	bb 83       	std	Y+3, r27	; 0x03
    1c3c:	9f 77       	andi	r25, 0x7F	; 127
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	ff 90       	pop	r15
    1c44:	ef 90       	pop	r14
    1c46:	df 90       	pop	r13
    1c48:	cf 90       	pop	r12
    1c4a:	bf 90       	pop	r11
    1c4c:	af 90       	pop	r10
    1c4e:	9f 90       	pop	r9
    1c50:	8f 90       	pop	r8
    1c52:	08 95       	ret

00001c54 <rand_r>:
    1c54:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <do_rand>
    1c58:	08 95       	ret

00001c5a <rand>:
    1c5a:	86 e0       	ldi	r24, 0x06	; 6
    1c5c:	91 e0       	ldi	r25, 0x01	; 1
    1c5e:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <do_rand>
    1c62:	08 95       	ret

00001c64 <srand>:
    1c64:	a0 e0       	ldi	r26, 0x00	; 0
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    1c6c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    1c70:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1c74:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    1c78:	08 95       	ret

00001c7a <realloc>:
    1c7a:	a0 e0       	ldi	r26, 0x00	; 0
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e3 e4       	ldi	r30, 0x43	; 67
    1c80:	fe e0       	ldi	r31, 0x0E	; 14
    1c82:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__prologue_saves__+0x8>
    1c86:	ec 01       	movw	r28, r24
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	21 f4       	brne	.+8      	; 0x1c94 <realloc+0x1a>
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	0e 94 c0 0c 	call	0x1980	; 0x1980 <malloc>
    1c92:	b4 c0       	rjmp	.+360    	; 0x1dfc <realloc+0x182>
    1c94:	fc 01       	movw	r30, r24
    1c96:	e6 0f       	add	r30, r22
    1c98:	f7 1f       	adc	r31, r23
    1c9a:	9c 01       	movw	r18, r24
    1c9c:	22 50       	subi	r18, 0x02	; 2
    1c9e:	31 09       	sbc	r19, r1
    1ca0:	e2 17       	cp	r30, r18
    1ca2:	f3 07       	cpc	r31, r19
    1ca4:	08 f4       	brcc	.+2      	; 0x1ca8 <realloc+0x2e>
    1ca6:	a8 c0       	rjmp	.+336    	; 0x1df8 <realloc+0x17e>
    1ca8:	d9 01       	movw	r26, r18
    1caa:	0d 91       	ld	r16, X+
    1cac:	1c 91       	ld	r17, X
    1cae:	11 97       	sbiw	r26, 0x01	; 1
    1cb0:	06 17       	cp	r16, r22
    1cb2:	17 07       	cpc	r17, r23
    1cb4:	b0 f0       	brcs	.+44     	; 0x1ce2 <realloc+0x68>
    1cb6:	05 30       	cpi	r16, 0x05	; 5
    1cb8:	11 05       	cpc	r17, r1
    1cba:	08 f4       	brcc	.+2      	; 0x1cbe <realloc+0x44>
    1cbc:	9b c0       	rjmp	.+310    	; 0x1df4 <realloc+0x17a>
    1cbe:	c8 01       	movw	r24, r16
    1cc0:	04 97       	sbiw	r24, 0x04	; 4
    1cc2:	86 17       	cp	r24, r22
    1cc4:	97 07       	cpc	r25, r23
    1cc6:	08 f4       	brcc	.+2      	; 0x1cca <realloc+0x50>
    1cc8:	95 c0       	rjmp	.+298    	; 0x1df4 <realloc+0x17a>
    1cca:	02 50       	subi	r16, 0x02	; 2
    1ccc:	11 09       	sbc	r17, r1
    1cce:	06 1b       	sub	r16, r22
    1cd0:	17 0b       	sbc	r17, r23
    1cd2:	01 93       	st	Z+, r16
    1cd4:	11 93       	st	Z+, r17
    1cd6:	6d 93       	st	X+, r22
    1cd8:	7c 93       	st	X, r23
    1cda:	cf 01       	movw	r24, r30
    1cdc:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <free>
    1ce0:	89 c0       	rjmp	.+274    	; 0x1df4 <realloc+0x17a>
    1ce2:	5b 01       	movw	r10, r22
    1ce4:	a0 1a       	sub	r10, r16
    1ce6:	b1 0a       	sbc	r11, r17
    1ce8:	4c 01       	movw	r8, r24
    1cea:	80 0e       	add	r8, r16
    1cec:	91 1e       	adc	r9, r17
    1cee:	a0 91 90 02 	lds	r26, 0x0290	; 0x800290 <__flp>
    1cf2:	b0 91 91 02 	lds	r27, 0x0291	; 0x800291 <__flp+0x1>
    1cf6:	61 2c       	mov	r6, r1
    1cf8:	71 2c       	mov	r7, r1
    1cfa:	e1 2c       	mov	r14, r1
    1cfc:	f1 2c       	mov	r15, r1
    1cfe:	10 97       	sbiw	r26, 0x00	; 0
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <realloc+0x8a>
    1d02:	46 c0       	rjmp	.+140    	; 0x1d90 <realloc+0x116>
    1d04:	8d 91       	ld	r24, X+
    1d06:	9c 91       	ld	r25, X
    1d08:	11 97       	sbiw	r26, 0x01	; 1
    1d0a:	a8 15       	cp	r26, r8
    1d0c:	b9 05       	cpc	r27, r9
    1d0e:	b1 f5       	brne	.+108    	; 0x1d7c <realloc+0x102>
    1d10:	6c 01       	movw	r12, r24
    1d12:	42 e0       	ldi	r20, 0x02	; 2
    1d14:	c4 0e       	add	r12, r20
    1d16:	d1 1c       	adc	r13, r1
    1d18:	ca 14       	cp	r12, r10
    1d1a:	db 04       	cpc	r13, r11
    1d1c:	78 f1       	brcs	.+94     	; 0x1d7c <realloc+0x102>
    1d1e:	4c 01       	movw	r8, r24
    1d20:	8a 18       	sub	r8, r10
    1d22:	9b 08       	sbc	r9, r11
    1d24:	64 01       	movw	r12, r8
    1d26:	42 e0       	ldi	r20, 0x02	; 2
    1d28:	c4 0e       	add	r12, r20
    1d2a:	d1 1c       	adc	r13, r1
    1d2c:	12 96       	adiw	r26, 0x02	; 2
    1d2e:	bc 90       	ld	r11, X
    1d30:	12 97       	sbiw	r26, 0x02	; 2
    1d32:	13 96       	adiw	r26, 0x03	; 3
    1d34:	ac 91       	ld	r26, X
    1d36:	b5 e0       	ldi	r27, 0x05	; 5
    1d38:	cb 16       	cp	r12, r27
    1d3a:	d1 04       	cpc	r13, r1
    1d3c:	40 f0       	brcs	.+16     	; 0x1d4e <realloc+0xd4>
    1d3e:	b2 82       	std	Z+2, r11	; 0x02
    1d40:	a3 83       	std	Z+3, r26	; 0x03
    1d42:	91 82       	std	Z+1, r9	; 0x01
    1d44:	80 82       	st	Z, r8
    1d46:	d9 01       	movw	r26, r18
    1d48:	6d 93       	st	X+, r22
    1d4a:	7c 93       	st	X, r23
    1d4c:	09 c0       	rjmp	.+18     	; 0x1d60 <realloc+0xe6>
    1d4e:	0e 5f       	subi	r16, 0xFE	; 254
    1d50:	1f 4f       	sbci	r17, 0xFF	; 255
    1d52:	80 0f       	add	r24, r16
    1d54:	91 1f       	adc	r25, r17
    1d56:	f9 01       	movw	r30, r18
    1d58:	91 83       	std	Z+1, r25	; 0x01
    1d5a:	80 83       	st	Z, r24
    1d5c:	eb 2d       	mov	r30, r11
    1d5e:	fa 2f       	mov	r31, r26
    1d60:	e1 14       	cp	r14, r1
    1d62:	f1 04       	cpc	r15, r1
    1d64:	31 f0       	breq	.+12     	; 0x1d72 <realloc+0xf8>
    1d66:	d7 01       	movw	r26, r14
    1d68:	13 96       	adiw	r26, 0x03	; 3
    1d6a:	fc 93       	st	X, r31
    1d6c:	ee 93       	st	-X, r30
    1d6e:	12 97       	sbiw	r26, 0x02	; 2
    1d70:	41 c0       	rjmp	.+130    	; 0x1df4 <realloc+0x17a>
    1d72:	f0 93 91 02 	sts	0x0291, r31	; 0x800291 <__flp+0x1>
    1d76:	e0 93 90 02 	sts	0x0290, r30	; 0x800290 <__flp>
    1d7a:	3c c0       	rjmp	.+120    	; 0x1df4 <realloc+0x17a>
    1d7c:	68 16       	cp	r6, r24
    1d7e:	79 06       	cpc	r7, r25
    1d80:	08 f4       	brcc	.+2      	; 0x1d84 <realloc+0x10a>
    1d82:	3c 01       	movw	r6, r24
    1d84:	7d 01       	movw	r14, r26
    1d86:	12 96       	adiw	r26, 0x02	; 2
    1d88:	0d 90       	ld	r0, X+
    1d8a:	bc 91       	ld	r27, X
    1d8c:	a0 2d       	mov	r26, r0
    1d8e:	b7 cf       	rjmp	.-146    	; 0x1cfe <realloc+0x84>
    1d90:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <__brkval>
    1d94:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <__brkval+0x1>
    1d98:	88 16       	cp	r8, r24
    1d9a:	99 06       	cpc	r9, r25
    1d9c:	e1 f4       	brne	.+56     	; 0x1dd6 <realloc+0x15c>
    1d9e:	66 16       	cp	r6, r22
    1da0:	77 06       	cpc	r7, r23
    1da2:	c8 f4       	brcc	.+50     	; 0x1dd6 <realloc+0x15c>
    1da4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1da8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	41 f4       	brne	.+16     	; 0x1dc0 <realloc+0x146>
    1db0:	8d b7       	in	r24, 0x3d	; 61
    1db2:	9e b7       	in	r25, 0x3e	; 62
    1db4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1db8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1dbc:	84 1b       	sub	r24, r20
    1dbe:	95 0b       	sbc	r25, r21
    1dc0:	e8 17       	cp	r30, r24
    1dc2:	f9 07       	cpc	r31, r25
    1dc4:	c8 f4       	brcc	.+50     	; 0x1df8 <realloc+0x17e>
    1dc6:	f0 93 8f 02 	sts	0x028F, r31	; 0x80028f <__brkval+0x1>
    1dca:	e0 93 8e 02 	sts	0x028E, r30	; 0x80028e <__brkval>
    1dce:	f9 01       	movw	r30, r18
    1dd0:	71 83       	std	Z+1, r23	; 0x01
    1dd2:	60 83       	st	Z, r22
    1dd4:	0f c0       	rjmp	.+30     	; 0x1df4 <realloc+0x17a>
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <malloc>
    1ddc:	7c 01       	movw	r14, r24
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	59 f0       	breq	.+22     	; 0x1df8 <realloc+0x17e>
    1de2:	a8 01       	movw	r20, r16
    1de4:	be 01       	movw	r22, r28
    1de6:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <memcpy>
    1dea:	ce 01       	movw	r24, r28
    1dec:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <free>
    1df0:	c7 01       	movw	r24, r14
    1df2:	04 c0       	rjmp	.+8      	; 0x1dfc <realloc+0x182>
    1df4:	ce 01       	movw	r24, r28
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <realloc+0x182>
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	ee e0       	ldi	r30, 0x0E	; 14
    1e02:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__epilogue_restores__+0x8>

00001e06 <memcpy>:
    1e06:	fb 01       	movw	r30, r22
    1e08:	dc 01       	movw	r26, r24
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <memcpy+0xa>
    1e0c:	01 90       	ld	r0, Z+
    1e0e:	0d 92       	st	X+, r0
    1e10:	41 50       	subi	r20, 0x01	; 1
    1e12:	50 40       	sbci	r21, 0x00	; 0
    1e14:	d8 f7       	brcc	.-10     	; 0x1e0c <memcpy+0x6>
    1e16:	08 95       	ret

00001e18 <snprintf>:
    1e18:	ae e0       	ldi	r26, 0x0E	; 14
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e2 e1       	ldi	r30, 0x12	; 18
    1e1e:	ff e0       	ldi	r31, 0x0F	; 15
    1e20:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__prologue_saves__+0x1c>
    1e24:	0d 89       	ldd	r16, Y+21	; 0x15
    1e26:	1e 89       	ldd	r17, Y+22	; 0x16
    1e28:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2c:	26 e0       	ldi	r18, 0x06	; 6
    1e2e:	2c 83       	std	Y+4, r18	; 0x04
    1e30:	1a 83       	std	Y+2, r17	; 0x02
    1e32:	09 83       	std	Y+1, r16	; 0x01
    1e34:	97 ff       	sbrs	r25, 7
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <snprintf+0x24>
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	90 e8       	ldi	r25, 0x80	; 128
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	8d 83       	std	Y+5, r24	; 0x05
    1e42:	ae 01       	movw	r20, r28
    1e44:	45 5e       	subi	r20, 0xE5	; 229
    1e46:	5f 4f       	sbci	r21, 0xFF	; 255
    1e48:	69 8d       	ldd	r22, Y+25	; 0x19
    1e4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	01 96       	adiw	r24, 0x01	; 1
    1e50:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <vfprintf>
    1e54:	4d 81       	ldd	r20, Y+5	; 0x05
    1e56:	5e 81       	ldd	r21, Y+6	; 0x06
    1e58:	57 fd       	sbrc	r21, 7
    1e5a:	0a c0       	rjmp	.+20     	; 0x1e70 <snprintf+0x58>
    1e5c:	2f 81       	ldd	r18, Y+7	; 0x07
    1e5e:	38 85       	ldd	r19, Y+8	; 0x08
    1e60:	42 17       	cp	r20, r18
    1e62:	53 07       	cpc	r21, r19
    1e64:	0c f4       	brge	.+2      	; 0x1e68 <snprintf+0x50>
    1e66:	9a 01       	movw	r18, r20
    1e68:	f8 01       	movw	r30, r16
    1e6a:	e2 0f       	add	r30, r18
    1e6c:	f3 1f       	adc	r31, r19
    1e6e:	10 82       	st	Z, r1
    1e70:	2e 96       	adiw	r28, 0x0e	; 14
    1e72:	e4 e0       	ldi	r30, 0x04	; 4
    1e74:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__epilogue_restores__+0x1c>

00001e78 <vfprintf>:
    1e78:	ab e0       	ldi	r26, 0x0B	; 11
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e2 e4       	ldi	r30, 0x42	; 66
    1e7e:	ff e0       	ldi	r31, 0x0F	; 15
    1e80:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__prologue_saves__>
    1e84:	6c 01       	movw	r12, r24
    1e86:	7b 01       	movw	r14, r22
    1e88:	8a 01       	movw	r16, r20
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	17 82       	std	Z+7, r1	; 0x07
    1e8e:	16 82       	std	Z+6, r1	; 0x06
    1e90:	83 81       	ldd	r24, Z+3	; 0x03
    1e92:	81 ff       	sbrs	r24, 1
    1e94:	cc c1       	rjmp	.+920    	; 0x222e <vfprintf+0x3b6>
    1e96:	ce 01       	movw	r24, r28
    1e98:	01 96       	adiw	r24, 0x01	; 1
    1e9a:	3c 01       	movw	r6, r24
    1e9c:	f6 01       	movw	r30, r12
    1e9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ea0:	f7 01       	movw	r30, r14
    1ea2:	93 fd       	sbrc	r25, 3
    1ea4:	85 91       	lpm	r24, Z+
    1ea6:	93 ff       	sbrs	r25, 3
    1ea8:	81 91       	ld	r24, Z+
    1eaa:	7f 01       	movw	r14, r30
    1eac:	88 23       	and	r24, r24
    1eae:	09 f4       	brne	.+2      	; 0x1eb2 <vfprintf+0x3a>
    1eb0:	ba c1       	rjmp	.+884    	; 0x2226 <vfprintf+0x3ae>
    1eb2:	85 32       	cpi	r24, 0x25	; 37
    1eb4:	39 f4       	brne	.+14     	; 0x1ec4 <vfprintf+0x4c>
    1eb6:	93 fd       	sbrc	r25, 3
    1eb8:	85 91       	lpm	r24, Z+
    1eba:	93 ff       	sbrs	r25, 3
    1ebc:	81 91       	ld	r24, Z+
    1ebe:	7f 01       	movw	r14, r30
    1ec0:	85 32       	cpi	r24, 0x25	; 37
    1ec2:	29 f4       	brne	.+10     	; 0x1ece <vfprintf+0x56>
    1ec4:	b6 01       	movw	r22, r12
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 33 11 	call	0x2266	; 0x2266 <fputc>
    1ecc:	e7 cf       	rjmp	.-50     	; 0x1e9c <vfprintf+0x24>
    1ece:	91 2c       	mov	r9, r1
    1ed0:	21 2c       	mov	r2, r1
    1ed2:	31 2c       	mov	r3, r1
    1ed4:	ff e1       	ldi	r31, 0x1F	; 31
    1ed6:	f3 15       	cp	r31, r3
    1ed8:	d8 f0       	brcs	.+54     	; 0x1f10 <vfprintf+0x98>
    1eda:	8b 32       	cpi	r24, 0x2B	; 43
    1edc:	79 f0       	breq	.+30     	; 0x1efc <vfprintf+0x84>
    1ede:	38 f4       	brcc	.+14     	; 0x1eee <vfprintf+0x76>
    1ee0:	80 32       	cpi	r24, 0x20	; 32
    1ee2:	79 f0       	breq	.+30     	; 0x1f02 <vfprintf+0x8a>
    1ee4:	83 32       	cpi	r24, 0x23	; 35
    1ee6:	a1 f4       	brne	.+40     	; 0x1f10 <vfprintf+0x98>
    1ee8:	23 2d       	mov	r18, r3
    1eea:	20 61       	ori	r18, 0x10	; 16
    1eec:	1d c0       	rjmp	.+58     	; 0x1f28 <vfprintf+0xb0>
    1eee:	8d 32       	cpi	r24, 0x2D	; 45
    1ef0:	61 f0       	breq	.+24     	; 0x1f0a <vfprintf+0x92>
    1ef2:	80 33       	cpi	r24, 0x30	; 48
    1ef4:	69 f4       	brne	.+26     	; 0x1f10 <vfprintf+0x98>
    1ef6:	23 2d       	mov	r18, r3
    1ef8:	21 60       	ori	r18, 0x01	; 1
    1efa:	16 c0       	rjmp	.+44     	; 0x1f28 <vfprintf+0xb0>
    1efc:	83 2d       	mov	r24, r3
    1efe:	82 60       	ori	r24, 0x02	; 2
    1f00:	38 2e       	mov	r3, r24
    1f02:	e3 2d       	mov	r30, r3
    1f04:	e4 60       	ori	r30, 0x04	; 4
    1f06:	3e 2e       	mov	r3, r30
    1f08:	2a c0       	rjmp	.+84     	; 0x1f5e <vfprintf+0xe6>
    1f0a:	f3 2d       	mov	r31, r3
    1f0c:	f8 60       	ori	r31, 0x08	; 8
    1f0e:	1d c0       	rjmp	.+58     	; 0x1f4a <vfprintf+0xd2>
    1f10:	37 fc       	sbrc	r3, 7
    1f12:	2d c0       	rjmp	.+90     	; 0x1f6e <vfprintf+0xf6>
    1f14:	20 ed       	ldi	r18, 0xD0	; 208
    1f16:	28 0f       	add	r18, r24
    1f18:	2a 30       	cpi	r18, 0x0A	; 10
    1f1a:	40 f0       	brcs	.+16     	; 0x1f2c <vfprintf+0xb4>
    1f1c:	8e 32       	cpi	r24, 0x2E	; 46
    1f1e:	b9 f4       	brne	.+46     	; 0x1f4e <vfprintf+0xd6>
    1f20:	36 fc       	sbrc	r3, 6
    1f22:	81 c1       	rjmp	.+770    	; 0x2226 <vfprintf+0x3ae>
    1f24:	23 2d       	mov	r18, r3
    1f26:	20 64       	ori	r18, 0x40	; 64
    1f28:	32 2e       	mov	r3, r18
    1f2a:	19 c0       	rjmp	.+50     	; 0x1f5e <vfprintf+0xe6>
    1f2c:	36 fe       	sbrs	r3, 6
    1f2e:	06 c0       	rjmp	.+12     	; 0x1f3c <vfprintf+0xc4>
    1f30:	8a e0       	ldi	r24, 0x0A	; 10
    1f32:	98 9e       	mul	r9, r24
    1f34:	20 0d       	add	r18, r0
    1f36:	11 24       	eor	r1, r1
    1f38:	92 2e       	mov	r9, r18
    1f3a:	11 c0       	rjmp	.+34     	; 0x1f5e <vfprintf+0xe6>
    1f3c:	ea e0       	ldi	r30, 0x0A	; 10
    1f3e:	2e 9e       	mul	r2, r30
    1f40:	20 0d       	add	r18, r0
    1f42:	11 24       	eor	r1, r1
    1f44:	22 2e       	mov	r2, r18
    1f46:	f3 2d       	mov	r31, r3
    1f48:	f0 62       	ori	r31, 0x20	; 32
    1f4a:	3f 2e       	mov	r3, r31
    1f4c:	08 c0       	rjmp	.+16     	; 0x1f5e <vfprintf+0xe6>
    1f4e:	8c 36       	cpi	r24, 0x6C	; 108
    1f50:	21 f4       	brne	.+8      	; 0x1f5a <vfprintf+0xe2>
    1f52:	83 2d       	mov	r24, r3
    1f54:	80 68       	ori	r24, 0x80	; 128
    1f56:	38 2e       	mov	r3, r24
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <vfprintf+0xe6>
    1f5a:	88 36       	cpi	r24, 0x68	; 104
    1f5c:	41 f4       	brne	.+16     	; 0x1f6e <vfprintf+0xf6>
    1f5e:	f7 01       	movw	r30, r14
    1f60:	93 fd       	sbrc	r25, 3
    1f62:	85 91       	lpm	r24, Z+
    1f64:	93 ff       	sbrs	r25, 3
    1f66:	81 91       	ld	r24, Z+
    1f68:	7f 01       	movw	r14, r30
    1f6a:	81 11       	cpse	r24, r1
    1f6c:	b3 cf       	rjmp	.-154    	; 0x1ed4 <vfprintf+0x5c>
    1f6e:	98 2f       	mov	r25, r24
    1f70:	9f 7d       	andi	r25, 0xDF	; 223
    1f72:	95 54       	subi	r25, 0x45	; 69
    1f74:	93 30       	cpi	r25, 0x03	; 3
    1f76:	28 f4       	brcc	.+10     	; 0x1f82 <vfprintf+0x10a>
    1f78:	0c 5f       	subi	r16, 0xFC	; 252
    1f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7c:	9f e3       	ldi	r25, 0x3F	; 63
    1f7e:	99 83       	std	Y+1, r25	; 0x01
    1f80:	0d c0       	rjmp	.+26     	; 0x1f9c <vfprintf+0x124>
    1f82:	83 36       	cpi	r24, 0x63	; 99
    1f84:	31 f0       	breq	.+12     	; 0x1f92 <vfprintf+0x11a>
    1f86:	83 37       	cpi	r24, 0x73	; 115
    1f88:	71 f0       	breq	.+28     	; 0x1fa6 <vfprintf+0x12e>
    1f8a:	83 35       	cpi	r24, 0x53	; 83
    1f8c:	09 f0       	breq	.+2      	; 0x1f90 <vfprintf+0x118>
    1f8e:	59 c0       	rjmp	.+178    	; 0x2042 <vfprintf+0x1ca>
    1f90:	21 c0       	rjmp	.+66     	; 0x1fd4 <vfprintf+0x15c>
    1f92:	f8 01       	movw	r30, r16
    1f94:	80 81       	ld	r24, Z
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	0e 5f       	subi	r16, 0xFE	; 254
    1f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9c:	88 24       	eor	r8, r8
    1f9e:	83 94       	inc	r8
    1fa0:	91 2c       	mov	r9, r1
    1fa2:	53 01       	movw	r10, r6
    1fa4:	13 c0       	rjmp	.+38     	; 0x1fcc <vfprintf+0x154>
    1fa6:	28 01       	movw	r4, r16
    1fa8:	f2 e0       	ldi	r31, 0x02	; 2
    1faa:	4f 0e       	add	r4, r31
    1fac:	51 1c       	adc	r5, r1
    1fae:	f8 01       	movw	r30, r16
    1fb0:	a0 80       	ld	r10, Z
    1fb2:	b1 80       	ldd	r11, Z+1	; 0x01
    1fb4:	36 fe       	sbrs	r3, 6
    1fb6:	03 c0       	rjmp	.+6      	; 0x1fbe <vfprintf+0x146>
    1fb8:	69 2d       	mov	r22, r9
    1fba:	70 e0       	ldi	r23, 0x00	; 0
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <vfprintf+0x14a>
    1fbe:	6f ef       	ldi	r22, 0xFF	; 255
    1fc0:	7f ef       	ldi	r23, 0xFF	; 255
    1fc2:	c5 01       	movw	r24, r10
    1fc4:	0e 94 28 11 	call	0x2250	; 0x2250 <strnlen>
    1fc8:	4c 01       	movw	r8, r24
    1fca:	82 01       	movw	r16, r4
    1fcc:	f3 2d       	mov	r31, r3
    1fce:	ff 77       	andi	r31, 0x7F	; 127
    1fd0:	3f 2e       	mov	r3, r31
    1fd2:	16 c0       	rjmp	.+44     	; 0x2000 <vfprintf+0x188>
    1fd4:	28 01       	movw	r4, r16
    1fd6:	22 e0       	ldi	r18, 0x02	; 2
    1fd8:	42 0e       	add	r4, r18
    1fda:	51 1c       	adc	r5, r1
    1fdc:	f8 01       	movw	r30, r16
    1fde:	a0 80       	ld	r10, Z
    1fe0:	b1 80       	ldd	r11, Z+1	; 0x01
    1fe2:	36 fe       	sbrs	r3, 6
    1fe4:	03 c0       	rjmp	.+6      	; 0x1fec <vfprintf+0x174>
    1fe6:	69 2d       	mov	r22, r9
    1fe8:	70 e0       	ldi	r23, 0x00	; 0
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <vfprintf+0x178>
    1fec:	6f ef       	ldi	r22, 0xFF	; 255
    1fee:	7f ef       	ldi	r23, 0xFF	; 255
    1ff0:	c5 01       	movw	r24, r10
    1ff2:	0e 94 1d 11 	call	0x223a	; 0x223a <strnlen_P>
    1ff6:	4c 01       	movw	r8, r24
    1ff8:	f3 2d       	mov	r31, r3
    1ffa:	f0 68       	ori	r31, 0x80	; 128
    1ffc:	3f 2e       	mov	r3, r31
    1ffe:	82 01       	movw	r16, r4
    2000:	33 fc       	sbrc	r3, 3
    2002:	1b c0       	rjmp	.+54     	; 0x203a <vfprintf+0x1c2>
    2004:	82 2d       	mov	r24, r2
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	88 16       	cp	r8, r24
    200a:	99 06       	cpc	r9, r25
    200c:	b0 f4       	brcc	.+44     	; 0x203a <vfprintf+0x1c2>
    200e:	b6 01       	movw	r22, r12
    2010:	80 e2       	ldi	r24, 0x20	; 32
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0e 94 33 11 	call	0x2266	; 0x2266 <fputc>
    2018:	2a 94       	dec	r2
    201a:	f4 cf       	rjmp	.-24     	; 0x2004 <vfprintf+0x18c>
    201c:	f5 01       	movw	r30, r10
    201e:	37 fc       	sbrc	r3, 7
    2020:	85 91       	lpm	r24, Z+
    2022:	37 fe       	sbrs	r3, 7
    2024:	81 91       	ld	r24, Z+
    2026:	5f 01       	movw	r10, r30
    2028:	b6 01       	movw	r22, r12
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	0e 94 33 11 	call	0x2266	; 0x2266 <fputc>
    2030:	21 10       	cpse	r2, r1
    2032:	2a 94       	dec	r2
    2034:	21 e0       	ldi	r18, 0x01	; 1
    2036:	82 1a       	sub	r8, r18
    2038:	91 08       	sbc	r9, r1
    203a:	81 14       	cp	r8, r1
    203c:	91 04       	cpc	r9, r1
    203e:	71 f7       	brne	.-36     	; 0x201c <vfprintf+0x1a4>
    2040:	e8 c0       	rjmp	.+464    	; 0x2212 <vfprintf+0x39a>
    2042:	84 36       	cpi	r24, 0x64	; 100
    2044:	11 f0       	breq	.+4      	; 0x204a <vfprintf+0x1d2>
    2046:	89 36       	cpi	r24, 0x69	; 105
    2048:	41 f5       	brne	.+80     	; 0x209a <vfprintf+0x222>
    204a:	f8 01       	movw	r30, r16
    204c:	37 fe       	sbrs	r3, 7
    204e:	07 c0       	rjmp	.+14     	; 0x205e <vfprintf+0x1e6>
    2050:	60 81       	ld	r22, Z
    2052:	71 81       	ldd	r23, Z+1	; 0x01
    2054:	82 81       	ldd	r24, Z+2	; 0x02
    2056:	93 81       	ldd	r25, Z+3	; 0x03
    2058:	0c 5f       	subi	r16, 0xFC	; 252
    205a:	1f 4f       	sbci	r17, 0xFF	; 255
    205c:	08 c0       	rjmp	.+16     	; 0x206e <vfprintf+0x1f6>
    205e:	60 81       	ld	r22, Z
    2060:	71 81       	ldd	r23, Z+1	; 0x01
    2062:	07 2e       	mov	r0, r23
    2064:	00 0c       	add	r0, r0
    2066:	88 0b       	sbc	r24, r24
    2068:	99 0b       	sbc	r25, r25
    206a:	0e 5f       	subi	r16, 0xFE	; 254
    206c:	1f 4f       	sbci	r17, 0xFF	; 255
    206e:	f3 2d       	mov	r31, r3
    2070:	ff 76       	andi	r31, 0x6F	; 111
    2072:	3f 2e       	mov	r3, r31
    2074:	97 ff       	sbrs	r25, 7
    2076:	09 c0       	rjmp	.+18     	; 0x208a <vfprintf+0x212>
    2078:	90 95       	com	r25
    207a:	80 95       	com	r24
    207c:	70 95       	com	r23
    207e:	61 95       	neg	r22
    2080:	7f 4f       	sbci	r23, 0xFF	; 255
    2082:	8f 4f       	sbci	r24, 0xFF	; 255
    2084:	9f 4f       	sbci	r25, 0xFF	; 255
    2086:	f0 68       	ori	r31, 0x80	; 128
    2088:	3f 2e       	mov	r3, r31
    208a:	2a e0       	ldi	r18, 0x0A	; 10
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	a3 01       	movw	r20, r6
    2090:	0e 94 6f 11 	call	0x22de	; 0x22de <__ultoa_invert>
    2094:	88 2e       	mov	r8, r24
    2096:	86 18       	sub	r8, r6
    2098:	45 c0       	rjmp	.+138    	; 0x2124 <vfprintf+0x2ac>
    209a:	85 37       	cpi	r24, 0x75	; 117
    209c:	31 f4       	brne	.+12     	; 0x20aa <vfprintf+0x232>
    209e:	23 2d       	mov	r18, r3
    20a0:	2f 7e       	andi	r18, 0xEF	; 239
    20a2:	b2 2e       	mov	r11, r18
    20a4:	2a e0       	ldi	r18, 0x0A	; 10
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	25 c0       	rjmp	.+74     	; 0x20f4 <vfprintf+0x27c>
    20aa:	93 2d       	mov	r25, r3
    20ac:	99 7f       	andi	r25, 0xF9	; 249
    20ae:	b9 2e       	mov	r11, r25
    20b0:	8f 36       	cpi	r24, 0x6F	; 111
    20b2:	c1 f0       	breq	.+48     	; 0x20e4 <vfprintf+0x26c>
    20b4:	18 f4       	brcc	.+6      	; 0x20bc <vfprintf+0x244>
    20b6:	88 35       	cpi	r24, 0x58	; 88
    20b8:	79 f0       	breq	.+30     	; 0x20d8 <vfprintf+0x260>
    20ba:	b5 c0       	rjmp	.+362    	; 0x2226 <vfprintf+0x3ae>
    20bc:	80 37       	cpi	r24, 0x70	; 112
    20be:	19 f0       	breq	.+6      	; 0x20c6 <vfprintf+0x24e>
    20c0:	88 37       	cpi	r24, 0x78	; 120
    20c2:	21 f0       	breq	.+8      	; 0x20cc <vfprintf+0x254>
    20c4:	b0 c0       	rjmp	.+352    	; 0x2226 <vfprintf+0x3ae>
    20c6:	e9 2f       	mov	r30, r25
    20c8:	e0 61       	ori	r30, 0x10	; 16
    20ca:	be 2e       	mov	r11, r30
    20cc:	b4 fe       	sbrs	r11, 4
    20ce:	0d c0       	rjmp	.+26     	; 0x20ea <vfprintf+0x272>
    20d0:	fb 2d       	mov	r31, r11
    20d2:	f4 60       	ori	r31, 0x04	; 4
    20d4:	bf 2e       	mov	r11, r31
    20d6:	09 c0       	rjmp	.+18     	; 0x20ea <vfprintf+0x272>
    20d8:	34 fe       	sbrs	r3, 4
    20da:	0a c0       	rjmp	.+20     	; 0x20f0 <vfprintf+0x278>
    20dc:	29 2f       	mov	r18, r25
    20de:	26 60       	ori	r18, 0x06	; 6
    20e0:	b2 2e       	mov	r11, r18
    20e2:	06 c0       	rjmp	.+12     	; 0x20f0 <vfprintf+0x278>
    20e4:	28 e0       	ldi	r18, 0x08	; 8
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	05 c0       	rjmp	.+10     	; 0x20f4 <vfprintf+0x27c>
    20ea:	20 e1       	ldi	r18, 0x10	; 16
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <vfprintf+0x27c>
    20f0:	20 e1       	ldi	r18, 0x10	; 16
    20f2:	32 e0       	ldi	r19, 0x02	; 2
    20f4:	f8 01       	movw	r30, r16
    20f6:	b7 fe       	sbrs	r11, 7
    20f8:	07 c0       	rjmp	.+14     	; 0x2108 <vfprintf+0x290>
    20fa:	60 81       	ld	r22, Z
    20fc:	71 81       	ldd	r23, Z+1	; 0x01
    20fe:	82 81       	ldd	r24, Z+2	; 0x02
    2100:	93 81       	ldd	r25, Z+3	; 0x03
    2102:	0c 5f       	subi	r16, 0xFC	; 252
    2104:	1f 4f       	sbci	r17, 0xFF	; 255
    2106:	06 c0       	rjmp	.+12     	; 0x2114 <vfprintf+0x29c>
    2108:	60 81       	ld	r22, Z
    210a:	71 81       	ldd	r23, Z+1	; 0x01
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	0e 5f       	subi	r16, 0xFE	; 254
    2112:	1f 4f       	sbci	r17, 0xFF	; 255
    2114:	a3 01       	movw	r20, r6
    2116:	0e 94 6f 11 	call	0x22de	; 0x22de <__ultoa_invert>
    211a:	88 2e       	mov	r8, r24
    211c:	86 18       	sub	r8, r6
    211e:	fb 2d       	mov	r31, r11
    2120:	ff 77       	andi	r31, 0x7F	; 127
    2122:	3f 2e       	mov	r3, r31
    2124:	36 fe       	sbrs	r3, 6
    2126:	0d c0       	rjmp	.+26     	; 0x2142 <vfprintf+0x2ca>
    2128:	23 2d       	mov	r18, r3
    212a:	2e 7f       	andi	r18, 0xFE	; 254
    212c:	a2 2e       	mov	r10, r18
    212e:	89 14       	cp	r8, r9
    2130:	58 f4       	brcc	.+22     	; 0x2148 <vfprintf+0x2d0>
    2132:	34 fe       	sbrs	r3, 4
    2134:	0b c0       	rjmp	.+22     	; 0x214c <vfprintf+0x2d4>
    2136:	32 fc       	sbrc	r3, 2
    2138:	09 c0       	rjmp	.+18     	; 0x214c <vfprintf+0x2d4>
    213a:	83 2d       	mov	r24, r3
    213c:	8e 7e       	andi	r24, 0xEE	; 238
    213e:	a8 2e       	mov	r10, r24
    2140:	05 c0       	rjmp	.+10     	; 0x214c <vfprintf+0x2d4>
    2142:	b8 2c       	mov	r11, r8
    2144:	a3 2c       	mov	r10, r3
    2146:	03 c0       	rjmp	.+6      	; 0x214e <vfprintf+0x2d6>
    2148:	b8 2c       	mov	r11, r8
    214a:	01 c0       	rjmp	.+2      	; 0x214e <vfprintf+0x2d6>
    214c:	b9 2c       	mov	r11, r9
    214e:	a4 fe       	sbrs	r10, 4
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <vfprintf+0x2f8>
    2152:	fe 01       	movw	r30, r28
    2154:	e8 0d       	add	r30, r8
    2156:	f1 1d       	adc	r31, r1
    2158:	80 81       	ld	r24, Z
    215a:	80 33       	cpi	r24, 0x30	; 48
    215c:	21 f4       	brne	.+8      	; 0x2166 <vfprintf+0x2ee>
    215e:	9a 2d       	mov	r25, r10
    2160:	99 7e       	andi	r25, 0xE9	; 233
    2162:	a9 2e       	mov	r10, r25
    2164:	09 c0       	rjmp	.+18     	; 0x2178 <vfprintf+0x300>
    2166:	a2 fe       	sbrs	r10, 2
    2168:	06 c0       	rjmp	.+12     	; 0x2176 <vfprintf+0x2fe>
    216a:	b3 94       	inc	r11
    216c:	b3 94       	inc	r11
    216e:	04 c0       	rjmp	.+8      	; 0x2178 <vfprintf+0x300>
    2170:	8a 2d       	mov	r24, r10
    2172:	86 78       	andi	r24, 0x86	; 134
    2174:	09 f0       	breq	.+2      	; 0x2178 <vfprintf+0x300>
    2176:	b3 94       	inc	r11
    2178:	a3 fc       	sbrc	r10, 3
    217a:	11 c0       	rjmp	.+34     	; 0x219e <vfprintf+0x326>
    217c:	a0 fe       	sbrs	r10, 0
    217e:	06 c0       	rjmp	.+12     	; 0x218c <vfprintf+0x314>
    2180:	b2 14       	cp	r11, r2
    2182:	88 f4       	brcc	.+34     	; 0x21a6 <vfprintf+0x32e>
    2184:	28 0c       	add	r2, r8
    2186:	92 2c       	mov	r9, r2
    2188:	9b 18       	sub	r9, r11
    218a:	0e c0       	rjmp	.+28     	; 0x21a8 <vfprintf+0x330>
    218c:	b2 14       	cp	r11, r2
    218e:	60 f4       	brcc	.+24     	; 0x21a8 <vfprintf+0x330>
    2190:	b6 01       	movw	r22, r12
    2192:	80 e2       	ldi	r24, 0x20	; 32
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	0e 94 33 11 	call	0x2266	; 0x2266 <fputc>
    219a:	b3 94       	inc	r11
    219c:	f7 cf       	rjmp	.-18     	; 0x218c <vfprintf+0x314>
    219e:	b2 14       	cp	r11, r2
    21a0:	18 f4       	brcc	.+6      	; 0x21a8 <vfprintf+0x330>
    21a2:	2b 18       	sub	r2, r11
    21a4:	02 c0       	rjmp	.+4      	; 0x21aa <vfprintf+0x332>
    21a6:	98 2c       	mov	r9, r8
    21a8:	21 2c       	mov	r2, r1
    21aa:	a4 fe       	sbrs	r10, 4
    21ac:	10 c0       	rjmp	.+32     	; 0x21ce <vfprintf+0x356>
    21ae:	b6 01       	movw	r22, r12
    21b0:	80 e3       	ldi	r24, 0x30	; 48
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	0e 94 33 11 	call	0x2266	; 0x2266 <fputc>
    21b8:	a2 fe       	sbrs	r10, 2
    21ba:	17 c0       	rjmp	.+46     	; 0x21ea <vfprintf+0x372>
    21bc:	a1 fc       	sbrc	r10, 1
    21be:	03 c0       	rjmp	.+6      	; 0x21c6 <vfprintf+0x34e>
    21c0:	88 e7       	ldi	r24, 0x78	; 120
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <vfprintf+0x352>
    21c6:	88 e5       	ldi	r24, 0x58	; 88
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	b6 01       	movw	r22, r12
    21cc:	0c c0       	rjmp	.+24     	; 0x21e6 <vfprintf+0x36e>
    21ce:	8a 2d       	mov	r24, r10
    21d0:	86 78       	andi	r24, 0x86	; 134
    21d2:	59 f0       	breq	.+22     	; 0x21ea <vfprintf+0x372>
    21d4:	a1 fe       	sbrs	r10, 1
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <vfprintf+0x364>
    21d8:	8b e2       	ldi	r24, 0x2B	; 43
    21da:	01 c0       	rjmp	.+2      	; 0x21de <vfprintf+0x366>
    21dc:	80 e2       	ldi	r24, 0x20	; 32
    21de:	a7 fc       	sbrc	r10, 7
    21e0:	8d e2       	ldi	r24, 0x2D	; 45
    21e2:	b6 01       	movw	r22, r12
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	0e 94 33 11 	call	0x2266	; 0x2266 <fputc>
    21ea:	89 14       	cp	r8, r9
    21ec:	38 f4       	brcc	.+14     	; 0x21fc <vfprintf+0x384>
    21ee:	b6 01       	movw	r22, r12
    21f0:	80 e3       	ldi	r24, 0x30	; 48
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	0e 94 33 11 	call	0x2266	; 0x2266 <fputc>
    21f8:	9a 94       	dec	r9
    21fa:	f7 cf       	rjmp	.-18     	; 0x21ea <vfprintf+0x372>
    21fc:	8a 94       	dec	r8
    21fe:	f3 01       	movw	r30, r6
    2200:	e8 0d       	add	r30, r8
    2202:	f1 1d       	adc	r31, r1
    2204:	80 81       	ld	r24, Z
    2206:	b6 01       	movw	r22, r12
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	0e 94 33 11 	call	0x2266	; 0x2266 <fputc>
    220e:	81 10       	cpse	r8, r1
    2210:	f5 cf       	rjmp	.-22     	; 0x21fc <vfprintf+0x384>
    2212:	22 20       	and	r2, r2
    2214:	09 f4       	brne	.+2      	; 0x2218 <vfprintf+0x3a0>
    2216:	42 ce       	rjmp	.-892    	; 0x1e9c <vfprintf+0x24>
    2218:	b6 01       	movw	r22, r12
    221a:	80 e2       	ldi	r24, 0x20	; 32
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	0e 94 33 11 	call	0x2266	; 0x2266 <fputc>
    2222:	2a 94       	dec	r2
    2224:	f6 cf       	rjmp	.-20     	; 0x2212 <vfprintf+0x39a>
    2226:	f6 01       	movw	r30, r12
    2228:	86 81       	ldd	r24, Z+6	; 0x06
    222a:	97 81       	ldd	r25, Z+7	; 0x07
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <vfprintf+0x3ba>
    222e:	8f ef       	ldi	r24, 0xFF	; 255
    2230:	9f ef       	ldi	r25, 0xFF	; 255
    2232:	2b 96       	adiw	r28, 0x0b	; 11
    2234:	e2 e1       	ldi	r30, 0x12	; 18
    2236:	0c 94 1b 12 	jmp	0x2436	; 0x2436 <__epilogue_restores__>

0000223a <strnlen_P>:
    223a:	fc 01       	movw	r30, r24
    223c:	05 90       	lpm	r0, Z+
    223e:	61 50       	subi	r22, 0x01	; 1
    2240:	70 40       	sbci	r23, 0x00	; 0
    2242:	01 10       	cpse	r0, r1
    2244:	d8 f7       	brcc	.-10     	; 0x223c <strnlen_P+0x2>
    2246:	80 95       	com	r24
    2248:	90 95       	com	r25
    224a:	8e 0f       	add	r24, r30
    224c:	9f 1f       	adc	r25, r31
    224e:	08 95       	ret

00002250 <strnlen>:
    2250:	fc 01       	movw	r30, r24
    2252:	61 50       	subi	r22, 0x01	; 1
    2254:	70 40       	sbci	r23, 0x00	; 0
    2256:	01 90       	ld	r0, Z+
    2258:	01 10       	cpse	r0, r1
    225a:	d8 f7       	brcc	.-10     	; 0x2252 <strnlen+0x2>
    225c:	80 95       	com	r24
    225e:	90 95       	com	r25
    2260:	8e 0f       	add	r24, r30
    2262:	9f 1f       	adc	r25, r31
    2264:	08 95       	ret

00002266 <fputc>:
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	fb 01       	movw	r30, r22
    2270:	23 81       	ldd	r18, Z+3	; 0x03
    2272:	21 fd       	sbrc	r18, 1
    2274:	03 c0       	rjmp	.+6      	; 0x227c <fputc+0x16>
    2276:	8f ef       	ldi	r24, 0xFF	; 255
    2278:	9f ef       	ldi	r25, 0xFF	; 255
    227a:	2c c0       	rjmp	.+88     	; 0x22d4 <fputc+0x6e>
    227c:	22 ff       	sbrs	r18, 2
    227e:	16 c0       	rjmp	.+44     	; 0x22ac <fputc+0x46>
    2280:	46 81       	ldd	r20, Z+6	; 0x06
    2282:	57 81       	ldd	r21, Z+7	; 0x07
    2284:	24 81       	ldd	r18, Z+4	; 0x04
    2286:	35 81       	ldd	r19, Z+5	; 0x05
    2288:	42 17       	cp	r20, r18
    228a:	53 07       	cpc	r21, r19
    228c:	44 f4       	brge	.+16     	; 0x229e <fputc+0x38>
    228e:	a0 81       	ld	r26, Z
    2290:	b1 81       	ldd	r27, Z+1	; 0x01
    2292:	9d 01       	movw	r18, r26
    2294:	2f 5f       	subi	r18, 0xFF	; 255
    2296:	3f 4f       	sbci	r19, 0xFF	; 255
    2298:	31 83       	std	Z+1, r19	; 0x01
    229a:	20 83       	st	Z, r18
    229c:	8c 93       	st	X, r24
    229e:	26 81       	ldd	r18, Z+6	; 0x06
    22a0:	37 81       	ldd	r19, Z+7	; 0x07
    22a2:	2f 5f       	subi	r18, 0xFF	; 255
    22a4:	3f 4f       	sbci	r19, 0xFF	; 255
    22a6:	37 83       	std	Z+7, r19	; 0x07
    22a8:	26 83       	std	Z+6, r18	; 0x06
    22aa:	14 c0       	rjmp	.+40     	; 0x22d4 <fputc+0x6e>
    22ac:	8b 01       	movw	r16, r22
    22ae:	ec 01       	movw	r28, r24
    22b0:	fb 01       	movw	r30, r22
    22b2:	00 84       	ldd	r0, Z+8	; 0x08
    22b4:	f1 85       	ldd	r31, Z+9	; 0x09
    22b6:	e0 2d       	mov	r30, r0
    22b8:	09 95       	icall
    22ba:	89 2b       	or	r24, r25
    22bc:	e1 f6       	brne	.-72     	; 0x2276 <fputc+0x10>
    22be:	d8 01       	movw	r26, r16
    22c0:	16 96       	adiw	r26, 0x06	; 6
    22c2:	8d 91       	ld	r24, X+
    22c4:	9c 91       	ld	r25, X
    22c6:	17 97       	sbiw	r26, 0x07	; 7
    22c8:	01 96       	adiw	r24, 0x01	; 1
    22ca:	17 96       	adiw	r26, 0x07	; 7
    22cc:	9c 93       	st	X, r25
    22ce:	8e 93       	st	-X, r24
    22d0:	16 97       	sbiw	r26, 0x06	; 6
    22d2:	ce 01       	movw	r24, r28
    22d4:	df 91       	pop	r29
    22d6:	cf 91       	pop	r28
    22d8:	1f 91       	pop	r17
    22da:	0f 91       	pop	r16
    22dc:	08 95       	ret

000022de <__ultoa_invert>:
    22de:	fa 01       	movw	r30, r20
    22e0:	aa 27       	eor	r26, r26
    22e2:	28 30       	cpi	r18, 0x08	; 8
    22e4:	51 f1       	breq	.+84     	; 0x233a <__ultoa_invert+0x5c>
    22e6:	20 31       	cpi	r18, 0x10	; 16
    22e8:	81 f1       	breq	.+96     	; 0x234a <__ultoa_invert+0x6c>
    22ea:	e8 94       	clt
    22ec:	6f 93       	push	r22
    22ee:	6e 7f       	andi	r22, 0xFE	; 254
    22f0:	6e 5f       	subi	r22, 0xFE	; 254
    22f2:	7f 4f       	sbci	r23, 0xFF	; 255
    22f4:	8f 4f       	sbci	r24, 0xFF	; 255
    22f6:	9f 4f       	sbci	r25, 0xFF	; 255
    22f8:	af 4f       	sbci	r26, 0xFF	; 255
    22fa:	b1 e0       	ldi	r27, 0x01	; 1
    22fc:	3e d0       	rcall	.+124    	; 0x237a <__ultoa_invert+0x9c>
    22fe:	b4 e0       	ldi	r27, 0x04	; 4
    2300:	3c d0       	rcall	.+120    	; 0x237a <__ultoa_invert+0x9c>
    2302:	67 0f       	add	r22, r23
    2304:	78 1f       	adc	r23, r24
    2306:	89 1f       	adc	r24, r25
    2308:	9a 1f       	adc	r25, r26
    230a:	a1 1d       	adc	r26, r1
    230c:	68 0f       	add	r22, r24
    230e:	79 1f       	adc	r23, r25
    2310:	8a 1f       	adc	r24, r26
    2312:	91 1d       	adc	r25, r1
    2314:	a1 1d       	adc	r26, r1
    2316:	6a 0f       	add	r22, r26
    2318:	71 1d       	adc	r23, r1
    231a:	81 1d       	adc	r24, r1
    231c:	91 1d       	adc	r25, r1
    231e:	a1 1d       	adc	r26, r1
    2320:	20 d0       	rcall	.+64     	; 0x2362 <__ultoa_invert+0x84>
    2322:	09 f4       	brne	.+2      	; 0x2326 <__ultoa_invert+0x48>
    2324:	68 94       	set
    2326:	3f 91       	pop	r19
    2328:	2a e0       	ldi	r18, 0x0A	; 10
    232a:	26 9f       	mul	r18, r22
    232c:	11 24       	eor	r1, r1
    232e:	30 19       	sub	r19, r0
    2330:	30 5d       	subi	r19, 0xD0	; 208
    2332:	31 93       	st	Z+, r19
    2334:	de f6       	brtc	.-74     	; 0x22ec <__ultoa_invert+0xe>
    2336:	cf 01       	movw	r24, r30
    2338:	08 95       	ret
    233a:	46 2f       	mov	r20, r22
    233c:	47 70       	andi	r20, 0x07	; 7
    233e:	40 5d       	subi	r20, 0xD0	; 208
    2340:	41 93       	st	Z+, r20
    2342:	b3 e0       	ldi	r27, 0x03	; 3
    2344:	0f d0       	rcall	.+30     	; 0x2364 <__ultoa_invert+0x86>
    2346:	c9 f7       	brne	.-14     	; 0x233a <__ultoa_invert+0x5c>
    2348:	f6 cf       	rjmp	.-20     	; 0x2336 <__ultoa_invert+0x58>
    234a:	46 2f       	mov	r20, r22
    234c:	4f 70       	andi	r20, 0x0F	; 15
    234e:	40 5d       	subi	r20, 0xD0	; 208
    2350:	4a 33       	cpi	r20, 0x3A	; 58
    2352:	18 f0       	brcs	.+6      	; 0x235a <__ultoa_invert+0x7c>
    2354:	49 5d       	subi	r20, 0xD9	; 217
    2356:	31 fd       	sbrc	r19, 1
    2358:	40 52       	subi	r20, 0x20	; 32
    235a:	41 93       	st	Z+, r20
    235c:	02 d0       	rcall	.+4      	; 0x2362 <__ultoa_invert+0x84>
    235e:	a9 f7       	brne	.-22     	; 0x234a <__ultoa_invert+0x6c>
    2360:	ea cf       	rjmp	.-44     	; 0x2336 <__ultoa_invert+0x58>
    2362:	b4 e0       	ldi	r27, 0x04	; 4
    2364:	a6 95       	lsr	r26
    2366:	97 95       	ror	r25
    2368:	87 95       	ror	r24
    236a:	77 95       	ror	r23
    236c:	67 95       	ror	r22
    236e:	ba 95       	dec	r27
    2370:	c9 f7       	brne	.-14     	; 0x2364 <__ultoa_invert+0x86>
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	61 05       	cpc	r22, r1
    2376:	71 05       	cpc	r23, r1
    2378:	08 95       	ret
    237a:	9b 01       	movw	r18, r22
    237c:	ac 01       	movw	r20, r24
    237e:	0a 2e       	mov	r0, r26
    2380:	06 94       	lsr	r0
    2382:	57 95       	ror	r21
    2384:	47 95       	ror	r20
    2386:	37 95       	ror	r19
    2388:	27 95       	ror	r18
    238a:	ba 95       	dec	r27
    238c:	c9 f7       	brne	.-14     	; 0x2380 <__ultoa_invert+0xa2>
    238e:	62 0f       	add	r22, r18
    2390:	73 1f       	adc	r23, r19
    2392:	84 1f       	adc	r24, r20
    2394:	95 1f       	adc	r25, r21
    2396:	a0 1d       	adc	r26, r0
    2398:	08 95       	ret

0000239a <__divmodsi4>:
    239a:	05 2e       	mov	r0, r21
    239c:	97 fb       	bst	r25, 7
    239e:	1e f4       	brtc	.+6      	; 0x23a6 <__divmodsi4+0xc>
    23a0:	00 94       	com	r0
    23a2:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__negsi2>
    23a6:	57 fd       	sbrc	r21, 7
    23a8:	07 d0       	rcall	.+14     	; 0x23b8 <__divmodsi4_neg2>
    23aa:	0e 94 36 12 	call	0x246c	; 0x246c <__udivmodsi4>
    23ae:	07 fc       	sbrc	r0, 7
    23b0:	03 d0       	rcall	.+6      	; 0x23b8 <__divmodsi4_neg2>
    23b2:	4e f4       	brtc	.+18     	; 0x23c6 <__divmodsi4_exit>
    23b4:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <__negsi2>

000023b8 <__divmodsi4_neg2>:
    23b8:	50 95       	com	r21
    23ba:	40 95       	com	r20
    23bc:	30 95       	com	r19
    23be:	21 95       	neg	r18
    23c0:	3f 4f       	sbci	r19, 0xFF	; 255
    23c2:	4f 4f       	sbci	r20, 0xFF	; 255
    23c4:	5f 4f       	sbci	r21, 0xFF	; 255

000023c6 <__divmodsi4_exit>:
    23c6:	08 95       	ret

000023c8 <__negsi2>:
    23c8:	90 95       	com	r25
    23ca:	80 95       	com	r24
    23cc:	70 95       	com	r23
    23ce:	61 95       	neg	r22
    23d0:	7f 4f       	sbci	r23, 0xFF	; 255
    23d2:	8f 4f       	sbci	r24, 0xFF	; 255
    23d4:	9f 4f       	sbci	r25, 0xFF	; 255
    23d6:	08 95       	ret

000023d8 <__muluhisi3>:
    23d8:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__umulhisi3>
    23dc:	a5 9f       	mul	r26, r21
    23de:	90 0d       	add	r25, r0
    23e0:	b4 9f       	mul	r27, r20
    23e2:	90 0d       	add	r25, r0
    23e4:	a4 9f       	mul	r26, r20
    23e6:	80 0d       	add	r24, r0
    23e8:	91 1d       	adc	r25, r1
    23ea:	11 24       	eor	r1, r1
    23ec:	08 95       	ret

000023ee <__mulshisi3>:
    23ee:	b7 ff       	sbrs	r27, 7
    23f0:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__muluhisi3>

000023f4 <__mulohisi3>:
    23f4:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__muluhisi3>
    23f8:	82 1b       	sub	r24, r18
    23fa:	93 0b       	sbc	r25, r19
    23fc:	08 95       	ret

000023fe <__prologue_saves__>:
    23fe:	2f 92       	push	r2
    2400:	3f 92       	push	r3
    2402:	4f 92       	push	r4
    2404:	5f 92       	push	r5
    2406:	6f 92       	push	r6
    2408:	7f 92       	push	r7
    240a:	8f 92       	push	r8
    240c:	9f 92       	push	r9
    240e:	af 92       	push	r10
    2410:	bf 92       	push	r11
    2412:	cf 92       	push	r12
    2414:	df 92       	push	r13
    2416:	ef 92       	push	r14
    2418:	ff 92       	push	r15
    241a:	0f 93       	push	r16
    241c:	1f 93       	push	r17
    241e:	cf 93       	push	r28
    2420:	df 93       	push	r29
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	ca 1b       	sub	r28, r26
    2428:	db 0b       	sbc	r29, r27
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	f8 94       	cli
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	09 94       	ijmp

00002436 <__epilogue_restores__>:
    2436:	2a 88       	ldd	r2, Y+18	; 0x12
    2438:	39 88       	ldd	r3, Y+17	; 0x11
    243a:	48 88       	ldd	r4, Y+16	; 0x10
    243c:	5f 84       	ldd	r5, Y+15	; 0x0f
    243e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2440:	7d 84       	ldd	r7, Y+13	; 0x0d
    2442:	8c 84       	ldd	r8, Y+12	; 0x0c
    2444:	9b 84       	ldd	r9, Y+11	; 0x0b
    2446:	aa 84       	ldd	r10, Y+10	; 0x0a
    2448:	b9 84       	ldd	r11, Y+9	; 0x09
    244a:	c8 84       	ldd	r12, Y+8	; 0x08
    244c:	df 80       	ldd	r13, Y+7	; 0x07
    244e:	ee 80       	ldd	r14, Y+6	; 0x06
    2450:	fd 80       	ldd	r15, Y+5	; 0x05
    2452:	0c 81       	ldd	r16, Y+4	; 0x04
    2454:	1b 81       	ldd	r17, Y+3	; 0x03
    2456:	aa 81       	ldd	r26, Y+2	; 0x02
    2458:	b9 81       	ldd	r27, Y+1	; 0x01
    245a:	ce 0f       	add	r28, r30
    245c:	d1 1d       	adc	r29, r1
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
    2468:	ed 01       	movw	r28, r26
    246a:	08 95       	ret

0000246c <__udivmodsi4>:
    246c:	a1 e2       	ldi	r26, 0x21	; 33
    246e:	1a 2e       	mov	r1, r26
    2470:	aa 1b       	sub	r26, r26
    2472:	bb 1b       	sub	r27, r27
    2474:	fd 01       	movw	r30, r26
    2476:	0d c0       	rjmp	.+26     	; 0x2492 <__udivmodsi4_ep>

00002478 <__udivmodsi4_loop>:
    2478:	aa 1f       	adc	r26, r26
    247a:	bb 1f       	adc	r27, r27
    247c:	ee 1f       	adc	r30, r30
    247e:	ff 1f       	adc	r31, r31
    2480:	a2 17       	cp	r26, r18
    2482:	b3 07       	cpc	r27, r19
    2484:	e4 07       	cpc	r30, r20
    2486:	f5 07       	cpc	r31, r21
    2488:	20 f0       	brcs	.+8      	; 0x2492 <__udivmodsi4_ep>
    248a:	a2 1b       	sub	r26, r18
    248c:	b3 0b       	sbc	r27, r19
    248e:	e4 0b       	sbc	r30, r20
    2490:	f5 0b       	sbc	r31, r21

00002492 <__udivmodsi4_ep>:
    2492:	66 1f       	adc	r22, r22
    2494:	77 1f       	adc	r23, r23
    2496:	88 1f       	adc	r24, r24
    2498:	99 1f       	adc	r25, r25
    249a:	1a 94       	dec	r1
    249c:	69 f7       	brne	.-38     	; 0x2478 <__udivmodsi4_loop>
    249e:	60 95       	com	r22
    24a0:	70 95       	com	r23
    24a2:	80 95       	com	r24
    24a4:	90 95       	com	r25
    24a6:	9b 01       	movw	r18, r22
    24a8:	ac 01       	movw	r20, r24
    24aa:	bd 01       	movw	r22, r26
    24ac:	cf 01       	movw	r24, r30
    24ae:	08 95       	ret

000024b0 <__umulhisi3>:
    24b0:	a2 9f       	mul	r26, r18
    24b2:	b0 01       	movw	r22, r0
    24b4:	b3 9f       	mul	r27, r19
    24b6:	c0 01       	movw	r24, r0
    24b8:	a3 9f       	mul	r26, r19
    24ba:	70 0d       	add	r23, r0
    24bc:	81 1d       	adc	r24, r1
    24be:	11 24       	eor	r1, r1
    24c0:	91 1d       	adc	r25, r1
    24c2:	b2 9f       	mul	r27, r18
    24c4:	70 0d       	add	r23, r0
    24c6:	81 1d       	adc	r24, r1
    24c8:	11 24       	eor	r1, r1
    24ca:	91 1d       	adc	r25, r1
    24cc:	08 95       	ret

000024ce <atexit_fini>:
    24ce:	0e 94 63 00 	call	0xc6	; 0xc6 <atexit_finido>

000024d2 <__do_global_dtors>:
    24d2:	10 e0       	ldi	r17, 0x00	; 0
    24d4:	c7 e3       	ldi	r28, 0x37	; 55
    24d6:	d0 e0       	ldi	r29, 0x00	; 0
    24d8:	04 c0       	rjmp	.+8      	; 0x24e2 <__do_global_dtors+0x10>
    24da:	fe 01       	movw	r30, r28
    24dc:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__tablejump2__>
    24e0:	21 96       	adiw	r28, 0x01	; 1
    24e2:	c9 33       	cpi	r28, 0x39	; 57
    24e4:	d1 07       	cpc	r29, r17
    24e6:	c9 f7       	brne	.-14     	; 0x24da <__do_global_dtors+0x8>
    24e8:	f8 94       	cli

000024ea <__stop_program>:
    24ea:	ff cf       	rjmp	.-2      	; 0x24ea <__stop_program>
