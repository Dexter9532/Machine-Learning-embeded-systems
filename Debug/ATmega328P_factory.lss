
ATmega328P_factory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ba  00800100  0000369c  00003730  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000369c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  008003ba  008003ba  000039ea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000039ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000698  00000000  00000000  00003a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c2f7  00000000  00000000  00004120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003452  00000000  00000000  00010417  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000330f  00000000  00000000  00013869  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001444  00000000  00000000  00016b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004e9a  00000000  00000000  00017fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005657  00000000  00000000  0001ce56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000610  00000000  00000000  000224ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__dtors_end>
       4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       c:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__vector_3>
      10:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__vector_4>
      14:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__vector_5>
      18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      24:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__vector_9>
      28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      2c:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__vector_11>
      30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      40:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__vector_16>
      44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

00000068 <__ctors_start>:
      68:	81 05       	cpc	r24, r1
      6a:	bc 08       	sbc	r11, r12
      6c:	e3 0c       	add	r14, r3

0000006e <__ctors_end>:
      6e:	88 05       	cpc	r24, r8
      70:	c3 08       	sbc	r12, r3

00000072 <__dtors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf ef       	ldi	r28, 0xFF	; 255
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	13 e0       	ldi	r17, 0x03	; 3
      80:	a0 e0       	ldi	r26, 0x00	; 0
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	ec e9       	ldi	r30, 0x9C	; 156
      86:	f6 e3       	ldi	r31, 0x36	; 54
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	aa 3b       	cpi	r26, 0xBA	; 186
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	24 e0       	ldi	r18, 0x04	; 4
      96:	aa eb       	ldi	r26, 0xBA	; 186
      98:	b3 e0       	ldi	r27, 0x03	; 3
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	ad 30       	cpi	r26, 0x0D	; 13
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>

000000a4 <__do_global_ctors>:
      a4:	10 e0       	ldi	r17, 0x00	; 0
      a6:	c7 e3       	ldi	r28, 0x37	; 55
      a8:	d0 e0       	ldi	r29, 0x00	; 0
      aa:	04 c0       	rjmp	.+8      	; 0xb4 <__do_global_ctors+0x10>
      ac:	21 97       	sbiw	r28, 0x01	; 1
      ae:	fe 01       	movw	r30, r28
      b0:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__tablejump2__>
      b4:	c4 33       	cpi	r28, 0x34	; 52
      b6:	d1 07       	cpc	r29, r17
      b8:	c9 f7       	brne	.-14     	; 0xac <__do_global_ctors+0x8>
      ba:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <main>
      be:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <atexit_fini>

000000c2 <__bad_interrupt>:
      c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <atexit_finido>:
      c6:	a0 91 ba 03 	lds	r26, 0x03BA	; 0x8003ba <__data_end>
      ca:	b0 91 bb 03 	lds	r27, 0x03BB	; 0x8003bb <__data_end+0x1>
      ce:	10 97       	sbiw	r26, 0x00	; 0
      d0:	69 f0       	breq	.+26     	; 0xec <atexit_finido+0x26>
      d2:	ed 91       	ld	r30, X+
      d4:	fc 91       	ld	r31, X
      d6:	11 97       	sbiw	r26, 0x01	; 1
      d8:	12 96       	adiw	r26, 0x02	; 2
      da:	8d 91       	ld	r24, X+
      dc:	9c 91       	ld	r25, X
      de:	13 97       	sbiw	r26, 0x03	; 3
      e0:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <__data_end+0x1>
      e4:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <__data_end>
      e8:	09 95       	icall
      ea:	ed cf       	rjmp	.-38     	; 0xc6 <atexit_finido>
      ec:	08 95       	ret

000000ee <atexit>:
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	ec 01       	movw	r28, r24
      f4:	84 e0       	ldi	r24, 0x04	; 4
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 98 15 	call	0x2b30	; 0x2b30 <malloc>
      fc:	00 97       	sbiw	r24, 0x00	; 0
      fe:	81 f0       	breq	.+32     	; 0x120 <atexit+0x32>
     100:	fc 01       	movw	r30, r24
     102:	d1 83       	std	Z+1, r29	; 0x01
     104:	c0 83       	st	Z, r28
     106:	20 91 ba 03 	lds	r18, 0x03BA	; 0x8003ba <__data_end>
     10a:	30 91 bb 03 	lds	r19, 0x03BB	; 0x8003bb <__data_end+0x1>
     10e:	33 83       	std	Z+3, r19	; 0x03
     110:	22 83       	std	Z+2, r18	; 0x02
     112:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <__data_end+0x1>
     116:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <__data_end>
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	02 c0       	rjmp	.+4      	; 0x124 <atexit+0x36>
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <time>:
     12a:	fc 01       	movw	r30, r24
     12c:	0f b6       	in	r0, 0x3f	; 63
     12e:	f8 94       	cli
     130:	60 91 09 04 	lds	r22, 0x0409	; 0x800409 <__system_time>
     134:	70 91 0a 04 	lds	r23, 0x040A	; 0x80040a <__system_time+0x1>
     138:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <__system_time+0x2>
     13c:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <__system_time+0x3>
     140:	0f be       	out	0x3f, r0	; 63
     142:	30 97       	sbiw	r30, 0x00	; 0
     144:	21 f0       	breq	.+8      	; 0x14e <time+0x24>
     146:	60 83       	st	Z, r22
     148:	71 83       	std	Z+1, r23	; 0x01
     14a:	82 83       	std	Z+2, r24	; 0x02
     14c:	93 83       	std	Z+3, r25	; 0x03
     14e:	08 95       	ret

00000150 <__tcf_0>:
{
public:
    /**
     * @brief Delete the ADC.
     */
    virtual ~AdcInterface() noexcept = default;
     150:	8c e2       	ldi	r24, 0x2C	; 44
     152:	91 e0       	ldi	r25, 0x01	; 1
     154:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <_ZZN6driver10atmega328p3Adc11getInstanceEvE10myInstance+0x1>
     158:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <_ZZN6driver10atmega328p3Adc11getInstanceEvE10myInstance>
     15c:	08 95       	ret

0000015e <_ZNK6driver10atmega328p3Adc10resolutionEv>:
    // Return a reference to the singleton ADC instance, cast to the corresponding interface.
    return myInstance; 
}

// -----------------------------------------------------------------------------
uint8_t Adc::resolution() const noexcept { return AdcParam::Resolution; }
     15e:	8a e0       	ldi	r24, 0x0A	; 10
     160:	08 95       	ret

00000162 <_ZNK6driver10atmega328p3Adc8maxValueEv>:

// -----------------------------------------------------------------------------
uint16_t Adc::maxValue() const noexcept { return AdcParam::MaxValue; }
     162:	8f ef       	ldi	r24, 0xFF	; 255
     164:	93 e0       	ldi	r25, 0x03	; 3
     166:	08 95       	ret

00000168 <_ZNK6driver10atmega328p3Adc13supplyVoltageEv>:

// -----------------------------------------------------------------------------
double Adc::supplyVoltage() const noexcept { return AdcParam::SupplyVoltage; }
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	70 e0       	ldi	r23, 0x00	; 0
     16c:	80 ea       	ldi	r24, 0xA0	; 160
     16e:	90 e4       	ldi	r25, 0x40	; 64
     170:	08 95       	ret

00000172 <_ZNK6driver10atmega328p3Adc4readEh>:

// -----------------------------------------------------------------------------
uint16_t Adc::read(const uint8_t analogPin) const noexcept
{ 
     172:	0f 93       	push	r16
    return myEnabled ? adcValue(analogPin) : 0U;
     174:	fc 01       	movw	r30, r24
     176:	82 81       	ldd	r24, Z+2	; 0x02
     178:	88 23       	and	r24, r24
     17a:	09 f4       	brne	.+2      	; 0x17e <_ZNK6driver10atmega328p3Adc4readEh+0xc>
     17c:	4a c0       	rjmp	.+148    	; 0x212 <_ZNK6driver10atmega328p3Adc4readEh+0xa0>
template <typename T>
constexpr bool inRange(const T number, const T min, const T max) noexcept
{
    static_assert(type_traits::is_arithmetic<T>::value, 
        "Range checks are only supported for arithmetic types!");
    return ((min <= number) && (max >= number));
     17e:	66 30       	cpi	r22, 0x06	; 6
     180:	10 f4       	brcc	.+4      	; 0x186 <_ZNK6driver10atmega328p3Adc4readEh+0x14>
     182:	98 2f       	mov	r25, r24
     184:	01 c0       	rjmp	.+2      	; 0x188 <_ZNK6driver10atmega328p3Adc4readEh+0x16>
     186:	90 e0       	ldi	r25, 0x00	; 0

// -----------------------------------------------------------------------------
constexpr bool isPinNumberValid(const uint8_t pin) noexcept
{
    return utils::inRange(pin, Adc::Pin::A0, Adc::Pin::A5) 
        || utils::inRange(pin, Adc::Port::C0, Adc::Port::C5);
     188:	91 11       	cpse	r25, r1
     18a:	05 c0       	rjmp	.+10     	; 0x196 <_ZNK6driver10atmega328p3Adc4readEh+0x24>
     18c:	6e 30       	cpi	r22, 0x0E	; 14
     18e:	18 f0       	brcs	.+6      	; 0x196 <_ZNK6driver10atmega328p3Adc4readEh+0x24>
     190:	64 31       	cpi	r22, 0x14	; 20
     192:	08 f4       	brcc	.+2      	; 0x196 <_ZNK6driver10atmega328p3Adc4readEh+0x24>
     194:	98 2f       	mov	r25, r24
}

// -----------------------------------------------------------------------------
inline uint16_t adcValue(const uint8_t pin) noexcept
{
    if (!isPinNumberValid(pin)) { return 0U; }
     196:	99 23       	and	r25, r25
     198:	c9 f1       	breq	.+114    	; 0x20c <_ZNK6driver10atmega328p3Adc4readEh+0x9a>
}

// -----------------------------------------------------------------------------
constexpr uint8_t isPinAdjustedForOffset(const uint8_t pin) noexcept
{
    return Adc::Pin::A5 >= pin ? pin : pin - AdcParam::PortOffset;
     19a:	66 30       	cpi	r22, 0x06	; 6
     19c:	08 f0       	brcs	.+2      	; 0x1a0 <_ZNK6driver10atmega328p3Adc4readEh+0x2e>
     19e:	6e 50       	subi	r22, 0x0E	; 14

// -----------------------------------------------------------------------------
inline uint16_t adcValue(const uint8_t pin) noexcept
{
    if (!isPinNumberValid(pin)) { return 0U; }
    ADMUX = (1U << REFS0) | isPinAdjustedForOffset(pin);
     1a0:	60 64       	ori	r22, 0x40	; 64
     1a2:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     1a6:	ea e7       	ldi	r30, 0x7A	; 122
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	80 81       	ld	r24, Z
     1ac:	80 68       	ori	r24, 0x80	; 128
     1ae:	80 83       	st	Z, r24
     1b0:	80 81       	ld	r24, Z
     1b2:	80 64       	ori	r24, 0x40	; 64
     1b4:	80 83       	st	Z, r24
     1b6:	80 81       	ld	r24, Z
     1b8:	81 60       	ori	r24, 0x01	; 1
     1ba:	80 83       	st	Z, r24
     1bc:	80 81       	ld	r24, Z
     1be:	82 60       	ori	r24, 0x02	; 2
     1c0:	80 83       	st	Z, r24
     1c2:	80 81       	ld	r24, Z
     1c4:	84 60       	ori	r24, 0x04	; 4
     1c6:	80 83       	st	Z, r24
// -----------------------------------------------------------------------------
template <typename T>
constexpr bool read(const volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    return reg & (1ULL << bit);
     1c8:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	40 e0       	ldi	r20, 0x00	; 0
     1d0:	50 e0       	ldi	r21, 0x00	; 0
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	70 e0       	ldi	r23, 0x00	; 0
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	04 e0       	ldi	r16, 0x04	; 4
     1dc:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__lshrdi3>
     1e0:	21 70       	andi	r18, 0x01	; 1
    utils::set(ADCSRA, ADEN, ADSC, ADPS0, ADPS1, ADPS2);
    while (!utils::read(ADCSRA, ADIF));
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	40 e0       	ldi	r20, 0x00	; 0
     1e6:	50 e0       	ldi	r21, 0x00	; 0
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	a0 e0       	ldi	r26, 0x00	; 0
     1f2:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <__cmpdi2_s8>
     1f6:	41 f3       	breq	.-48     	; 0x1c8 <_ZNK6driver10atmega328p3Adc4readEh+0x56>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     1f8:	ea e7       	ldi	r30, 0x7A	; 122
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	80 81       	ld	r24, Z
     1fe:	80 61       	ori	r24, 0x10	; 16
     200:	80 83       	st	Z, r24
    utils::set(ADCSRA, ADIF);
    return ADC;
     202:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     206:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     20a:	05 c0       	rjmp	.+10     	; 0x216 <_ZNK6driver10atmega328p3Adc4readEh+0xa4>
}

// -----------------------------------------------------------------------------
inline uint16_t adcValue(const uint8_t pin) noexcept
{
    if (!isPinNumberValid(pin)) { return 0U; }
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	02 c0       	rjmp	.+4      	; 0x216 <_ZNK6driver10atmega328p3Adc4readEh+0xa4>
double Adc::supplyVoltage() const noexcept { return AdcParam::SupplyVoltage; }

// -----------------------------------------------------------------------------
uint16_t Adc::read(const uint8_t analogPin) const noexcept
{ 
    return myEnabled ? adcValue(analogPin) : 0U;
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	90 e0       	ldi	r25, 0x00	; 0
}
     216:	0f 91       	pop	r16
     218:	08 95       	ret

0000021a <_ZNK6driver10atmega328p3Adc9dutyCycleEh>:

// -----------------------------------------------------------------------------
double Adc::dutyCycle(const uint8_t analogPin) const noexcept
{
    return read(analogPin) / static_cast<double>(AdcParam::MaxValue);
     21a:	0e 94 b9 00 	call	0x172	; 0x172 <_ZNK6driver10atmega328p3Adc4readEh>
     21e:	bc 01       	movw	r22, r24
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 17 14 	call	0x282e	; 0x282e <__floatunsisf>
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	30 ec       	ldi	r19, 0xC0	; 192
     22c:	4f e7       	ldi	r20, 0x7F	; 127
     22e:	54 e4       	ldi	r21, 0x44	; 68
     230:	0e 94 6f 13 	call	0x26de	; 0x26de <__divsf3>
}
     234:	08 95       	ret

00000236 <_ZNK6driver10atmega328p3Adc12inputVoltageEh>:

// -----------------------------------------------------------------------------
double Adc::inputVoltage(const uint8_t analogPin) const noexcept
{
    return dutyCycle(analogPin) * AdcParam::SupplyVoltage;
     236:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZNK6driver10atmega328p3Adc9dutyCycleEh>
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	40 ea       	ldi	r20, 0xA0	; 160
     240:	50 e4       	ldi	r21, 0x40	; 64
     242:	0e 94 ce 14 	call	0x299c	; 0x299c <__mulsf3>
}
     246:	08 95       	ret

00000248 <_ZNK6driver10atmega328p3Adc13isInitializedEv>:

// -----------------------------------------------------------------------------
bool Adc::isInitialized() const noexcept { return true; }
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	08 95       	ret

0000024c <_ZNK6driver10atmega328p3Adc9isEnabledEv>:

// -----------------------------------------------------------------------------
bool Adc::isEnabled() const noexcept { return myEnabled; }
     24c:	fc 01       	movw	r30, r24
     24e:	82 81       	ldd	r24, Z+2	; 0x02
     250:	08 95       	ret

00000252 <_ZN6driver10atmega328p3Adc10setEnabledEb>:

// -----------------------------------------------------------------------------
void Adc::setEnabled(const bool enable) noexcept { myEnabled = enable; }
     252:	fc 01       	movw	r30, r24
     254:	62 83       	std	Z+2, r22	; 0x02
     256:	08 95       	ret

00000258 <_ZN6driver10atmega328p3AdcD1Ev>:
     258:	2c e2       	ldi	r18, 0x2C	; 44
     25a:	31 e0       	ldi	r19, 0x01	; 1
     25c:	fc 01       	movw	r30, r24
     25e:	31 83       	std	Z+1, r19	; 0x01
     260:	20 83       	st	Z, r18
     262:	08 95       	ret

00000264 <_ZN6driver10atmega328p3AdcD0Ev>:
     264:	2c e2       	ldi	r18, 0x2C	; 44
     266:	31 e0       	ldi	r19, 0x01	; 1
     268:	fc 01       	movw	r30, r24
     26a:	31 83       	std	Z+1, r19	; 0x01
     26c:	20 83       	st	Z, r18
    Adc& operator=(const Adc&) = delete; // No copy assignment.
    Adc& operator=(Adc&&)      = delete; // No move assignment.

private:
    Adc() noexcept;
    ~Adc() noexcept override = default;
     26e:	63 e0       	ldi	r22, 0x03	; 3
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZdlPvj>
     276:	08 95       	ret

00000278 <_ZN6driver10atmega328p3AdcC1Ev>:

// -----------------------------------------------------------------------------
Adc::Adc() noexcept
    : myEnabled{false}
     278:	26 e4       	ldi	r18, 0x46	; 70
     27a:	31 e0       	ldi	r19, 0x01	; 1
     27c:	fc 01       	movw	r30, r24
     27e:	31 83       	std	Z+1, r19	; 0x01
     280:	20 83       	st	Z, r18
     282:	12 82       	std	Z+2, r1	; 0x02
{
    read(Pin::A0);
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	0e 94 b9 00 	call	0x172	; 0x172 <_ZNK6driver10atmega328p3Adc4readEh>
     28a:	08 95       	ret

0000028c <_ZN6driver10atmega328p3Adc11getInstanceEv>:

// -----------------------------------------------------------------------------
AdcInterface& Adc::getInstance() noexcept
{ 
    // Create and initialize the singleton ADC instance (once only).
    static Adc myInstance{};
     28c:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <_ZGVZN6driver10atmega328p3Adc11getInstanceEvE10myInstance>
     290:	81 11       	cpse	r24, r1
     292:	12 c0       	rjmp	.+36     	; 0x2b8 <_ZN6driver10atmega328p3Adc11getInstanceEv+0x2c>
     294:	8f eb       	ldi	r24, 0xBF	; 191
     296:	93 e0       	ldi	r25, 0x03	; 3
     298:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <__cxa_guard_acquire>
     29c:	89 2b       	or	r24, r25
     29e:	61 f0       	breq	.+24     	; 0x2b8 <_ZN6driver10atmega328p3Adc11getInstanceEv+0x2c>
     2a0:	8c eb       	ldi	r24, 0xBC	; 188
     2a2:	93 e0       	ldi	r25, 0x03	; 3
     2a4:	0e 94 3c 01 	call	0x278	; 0x278 <_ZN6driver10atmega328p3AdcC1Ev>
     2a8:	8f eb       	ldi	r24, 0xBF	; 191
     2aa:	93 e0       	ldi	r25, 0x03	; 3
     2ac:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__cxa_guard_release>
     2b0:	88 ea       	ldi	r24, 0xA8	; 168
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0e 94 77 00 	call	0xee	; 0xee <atexit>

    // Return a reference to the singleton ADC instance, cast to the corresponding interface.
    return myInstance; 
}
     2b8:	8c eb       	ldi	r24, 0xBC	; 188
     2ba:	93 e0       	ldi	r25, 0x03	; 3
     2bc:	08 95       	ret

000002be <__tcf_0>:
{
public:
    /**
     * @brief Delete the EEPROM stream.
     */
    virtual ~EepromInterface() noexcept = default;
     2be:	80 e6       	ldi	r24, 0x60	; 96
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	90 93 c8 03 	sts	0x03C8, r25	; 0x8003c8 <_ZZN6driver10atmega328p6Eeprom11getInstanceEvE10myInstance+0x1>
     2c6:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <_ZZN6driver10atmega328p6Eeprom11getInstanceEvE10myInstance>
     2ca:	08 95       	ret

000002cc <_ZNK6driver10atmega328p6Eeprom13isInitializedEv>:
    // Return a reference to the singleton EEPROM instance, cast to the corresponding interface.
    return myInstance; 
}

// -----------------------------------------------------------------------------
bool Eeprom::isInitialized() const noexcept { return true; }
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	08 95       	ret

000002d0 <_ZNK6driver10atmega328p6Eeprom9isEnabledEv>:

// -----------------------------------------------------------------------------
bool Eeprom::isEnabled() const noexcept { return myEnabled; }
     2d0:	fc 01       	movw	r30, r24
     2d2:	82 81       	ldd	r24, Z+2	; 0x02
     2d4:	08 95       	ret

000002d6 <_ZN6driver10atmega328p6Eeprom10setEnabledEb>:

// -----------------------------------------------------------------------------
void Eeprom::setEnabled(const bool enable) noexcept { myEnabled = enable; }
     2d6:	fc 01       	movw	r30, r24
     2d8:	62 83       	std	Z+2, r22	; 0x02
     2da:	08 95       	ret

000002dc <_ZNK6driver10atmega328p6Eeprom14isAddressValidEjh>:
{}

// -----------------------------------------------------------------------------
bool Eeprom::isAddressValid(const uint16_t address, const uint8_t dataSize) const noexcept
{
    return EepromParam::MaxAddress >= address + dataSize;
     2dc:	64 0f       	add	r22, r20
     2de:	71 1d       	adc	r23, r1
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	61 15       	cp	r22, r1
     2e4:	74 40       	sbci	r23, 0x04	; 4
     2e6:	08 f0       	brcs	.+2      	; 0x2ea <_ZNK6driver10atmega328p6Eeprom14isAddressValidEjh+0xe>
     2e8:	80 e0       	ldi	r24, 0x00	; 0
}
     2ea:	08 95       	ret

000002ec <_ZNK6driver10atmega328p6Eeprom8readByteEj>:
    utils::globalInterruptEnable();
}

// -----------------------------------------------------------------------------
uint8_t Eeprom::readByte(const uint16_t address) const noexcept
{
     2ec:	0f 93       	push	r16
     2ee:	fb 01       	movw	r30, r22
// -----------------------------------------------------------------------------
template <typename T>
constexpr bool read(const volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    return reg & (1ULL << bit);
     2f0:	2f b3       	in	r18, 0x1f	; 31
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	40 e0       	ldi	r20, 0x00	; 0
     2f6:	50 e0       	ldi	r21, 0x00	; 0
     2f8:	60 e0       	ldi	r22, 0x00	; 0
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	01 e0       	ldi	r16, 0x01	; 1
     302:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__lshrdi3>
     306:	21 70       	andi	r18, 0x01	; 1
    // Wait until EEPROM is ready to read the next byte.
    while (utils::read(EECR, EEPE));
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	40 e0       	ldi	r20, 0x00	; 0
     30c:	50 e0       	ldi	r21, 0x00	; 0
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	70 e0       	ldi	r23, 0x00	; 0
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	a0 e0       	ldi	r26, 0x00	; 0
     318:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <__cmpdi2_s8>
     31c:	49 f7       	brne	.-46     	; 0x2f0 <_ZNK6driver10atmega328p6Eeprom8readByteEj+0x4>

    // Set the address from which to read.
    EEAR = address;
     31e:	f2 bd       	out	0x22, r31	; 34
     320:	e1 bd       	out	0x21, r30	; 33
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     322:	8f b3       	in	r24, 0x1f	; 31
     324:	81 60       	ori	r24, 0x01	; 1
     326:	8f bb       	out	0x1f, r24	; 31

    // Read and return the value of the given address.
    utils::set(EECR, EERE);
    return EEDR;
     328:	80 b5       	in	r24, 0x20	; 32
}
     32a:	0f 91       	pop	r16
     32c:	08 95       	ret

0000032e <_ZN6driver10atmega328p6EepromD1Ev>:
     32e:	20 e6       	ldi	r18, 0x60	; 96
     330:	31 e0       	ldi	r19, 0x01	; 1
     332:	fc 01       	movw	r30, r24
     334:	31 83       	std	Z+1, r19	; 0x01
     336:	20 83       	st	Z, r18
     338:	08 95       	ret

0000033a <_ZN6driver10atmega328p6EepromD0Ev>:
     33a:	20 e6       	ldi	r18, 0x60	; 96
     33c:	31 e0       	ldi	r19, 0x01	; 1
     33e:	fc 01       	movw	r30, r24
     340:	31 83       	std	Z+1, r19	; 0x01
     342:	20 83       	st	Z, r18
    Eeprom& operator=(const Eeprom&) = delete; // No copy assignment.
    Eeprom& operator=(Eeprom&&)      = delete; // No move assignment.

private: 
    Eeprom() noexcept;
    ~Eeprom() noexcept override = default;
     344:	63 e0       	ldi	r22, 0x03	; 3
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZdlPvj>
     34c:	08 95       	ret

0000034e <_ZNK6driver10atmega328p6Eeprom9writeByteEjh>:
    return EepromParam::MaxAddress >= address + dataSize;
}

// -----------------------------------------------------------------------------
void Eeprom::writeByte(const uint16_t address, const uint8_t data) const noexcept
{
     34e:	0f 93       	push	r16
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	eb 01       	movw	r28, r22
     356:	e4 2f       	mov	r30, r20
// -----------------------------------------------------------------------------
template <typename T>
constexpr bool read(const volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    return reg & (1ULL << bit);
     358:	2f b3       	in	r18, 0x1f	; 31
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	40 e0       	ldi	r20, 0x00	; 0
     35e:	50 e0       	ldi	r21, 0x00	; 0
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	01 e0       	ldi	r16, 0x01	; 1
     36a:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__lshrdi3>
     36e:	21 70       	andi	r18, 0x01	; 1
    // Wait until EEPROM is ready to send the next byte.
    while (utils::read(EECR, EEPE));
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	40 e0       	ldi	r20, 0x00	; 0
     374:	50 e0       	ldi	r21, 0x00	; 0
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	a0 e0       	ldi	r26, 0x00	; 0
     380:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <__cmpdi2_s8>
     384:	49 f7       	brne	.-46     	; 0x358 <_ZNK6driver10atmega328p6Eeprom9writeByteEjh+0xa>

    // Set the address and data to write.
    EEAR = address;
     386:	d2 bd       	out	0x22, r29	; 34
     388:	c1 bd       	out	0x21, r28	; 33
    EEDR = data;
     38a:	e0 bd       	out	0x20, r30	; 32

    // Perform write, disable interrupts during the write sequence.
    utils::globalInterruptDisable();
     38c:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN5utils22globalInterruptDisableEv>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     390:	8f b3       	in	r24, 0x1f	; 31
     392:	84 60       	ori	r24, 0x04	; 4
     394:	8f bb       	out	0x1f, r24	; 31
     396:	8f b3       	in	r24, 0x1f	; 31
     398:	82 60       	ori	r24, 0x02	; 2
     39a:	8f bb       	out	0x1f, r24	; 31
    utils::set(EECR, EEMPE);
    utils::set(EECR, EEPE);

    // Re-enable interrupts once the write sequence is complete.
    utils::globalInterruptEnable();
     39c:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <_ZN5utils21globalInterruptEnableEv>
}
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	0f 91       	pop	r16
     3a6:	08 95       	ret

000003a8 <_ZN6driver10atmega328p6EepromC1Ev>:
// -----------------------------------------------------------------------------
void Eeprom::setEnabled(const bool enable) noexcept { myEnabled = enable; }

// -----------------------------------------------------------------------------
Eeprom::Eeprom() noexcept
    : myEnabled{false} 
     3a8:	24 e7       	ldi	r18, 0x74	; 116
     3aa:	31 e0       	ldi	r19, 0x01	; 1
     3ac:	fc 01       	movw	r30, r24
     3ae:	31 83       	std	Z+1, r19	; 0x01
     3b0:	20 83       	st	Z, r18
     3b2:	12 82       	std	Z+2, r1	; 0x02
     3b4:	08 95       	ret

000003b6 <_ZN6driver10atmega328p6Eeprom11getInstanceEv>:

// -----------------------------------------------------------------------------
EepromInterface& Eeprom::getInstance() noexcept
{
    // Create and initialize the singleton EEPROM instance (once only).
    static Eeprom myInstance{};
     3b6:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <_ZGVZN6driver10atmega328p6Eeprom11getInstanceEvE10myInstance>
     3ba:	81 11       	cpse	r24, r1
     3bc:	12 c0       	rjmp	.+36     	; 0x3e2 <_ZN6driver10atmega328p6Eeprom11getInstanceEv+0x2c>
     3be:	8a ec       	ldi	r24, 0xCA	; 202
     3c0:	93 e0       	ldi	r25, 0x03	; 3
     3c2:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <__cxa_guard_acquire>
     3c6:	89 2b       	or	r24, r25
     3c8:	61 f0       	breq	.+24     	; 0x3e2 <_ZN6driver10atmega328p6Eeprom11getInstanceEv+0x2c>
     3ca:	87 ec       	ldi	r24, 0xC7	; 199
     3cc:	93 e0       	ldi	r25, 0x03	; 3
     3ce:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <_ZN6driver10atmega328p6EepromC1Ev>
     3d2:	8a ec       	ldi	r24, 0xCA	; 202
     3d4:	93 e0       	ldi	r25, 0x03	; 3
     3d6:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__cxa_guard_release>
     3da:	8f e5       	ldi	r24, 0x5F	; 95
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	0e 94 77 00 	call	0xee	; 0xee <atexit>

    // Return a reference to the singleton EEPROM instance, cast to the corresponding interface.
    return myInstance; 
}
     3e2:	87 ec       	ldi	r24, 0xC7	; 199
     3e4:	93 e0       	ldi	r25, 0x03	; 3
     3e6:	08 95       	ret

000003e8 <_ZNK6driver10atmega328p4Gpio13isInitializedEv>:
 *        This class is non-copyable and non-movable.
 * 
 * @tparam Size The array size. Must be greater than 0.
 */
template <size_t Size>
class CallbackArray : public Array<void (*)(), Size>
     3e8:	21 e0       	ldi	r18, 0x01	; 1
     3ea:	fc 01       	movw	r30, r24
     3ec:	82 81       	ldd	r24, Z+2	; 0x02
     3ee:	93 81       	ldd	r25, Z+3	; 0x03
     3f0:	89 2b       	or	r24, r25
     3f2:	09 f4       	brne	.+2      	; 0x3f6 <_ZNK6driver10atmega328p4Gpio13isInitializedEv+0xe>
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	82 2f       	mov	r24, r18
     3f8:	08 95       	ret

000003fa <_ZNK6driver10atmega328p4Gpio4readEv>:
     3fa:	0f 93       	push	r16
     3fc:	dc 01       	movw	r26, r24
     3fe:	14 96       	adiw	r26, 0x04	; 4
     400:	0c 91       	ld	r16, X
     402:	14 97       	sbiw	r26, 0x04	; 4
     404:	12 96       	adiw	r26, 0x02	; 2
     406:	ed 91       	ld	r30, X+
     408:	fc 91       	ld	r31, X
     40a:	13 97       	sbiw	r26, 0x03	; 3
     40c:	04 80       	ldd	r0, Z+4	; 0x04
     40e:	f5 81       	ldd	r31, Z+5	; 0x05
     410:	e0 2d       	mov	r30, r0
     412:	20 81       	ld	r18, Z
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	40 e0       	ldi	r20, 0x00	; 0
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__lshrdi3>
     426:	82 2f       	mov	r24, r18
     428:	81 70       	andi	r24, 0x01	; 1
     42a:	0f 91       	pop	r16
     42c:	08 95       	ret

0000042e <_ZN6driver10atmega328p4Gpio5writeEb>:
     42e:	0f 93       	push	r16
     430:	66 23       	and	r22, r22
     432:	c9 f0       	breq	.+50     	; 0x466 <_ZN6driver10atmega328p4Gpio5writeEb+0x38>
     434:	dc 01       	movw	r26, r24
     436:	14 96       	adiw	r26, 0x04	; 4
     438:	0c 91       	ld	r16, X
     43a:	14 97       	sbiw	r26, 0x04	; 4
     43c:	12 96       	adiw	r26, 0x02	; 2
     43e:	ed 91       	ld	r30, X+
     440:	fc 91       	ld	r31, X
     442:	13 97       	sbiw	r26, 0x03	; 3
     444:	02 80       	ldd	r0, Z+2	; 0x02
     446:	f3 81       	ldd	r31, Z+3	; 0x03
     448:	e0 2d       	mov	r30, r0
     44a:	a0 81       	ld	r26, Z
     44c:	21 e0       	ldi	r18, 0x01	; 1
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__ashldi3>
     460:	2a 2b       	or	r18, r26
     462:	20 83       	st	Z, r18
     464:	15 c0       	rjmp	.+42     	; 0x490 <_ZN6driver10atmega328p4Gpio5writeEb+0x62>
     466:	fc 01       	movw	r30, r24
     468:	04 81       	ldd	r16, Z+4	; 0x04
     46a:	02 80       	ldd	r0, Z+2	; 0x02
     46c:	f3 81       	ldd	r31, Z+3	; 0x03
     46e:	e0 2d       	mov	r30, r0
     470:	a2 81       	ldd	r26, Z+2	; 0x02
     472:	b3 81       	ldd	r27, Z+3	; 0x03
     474:	ec 91       	ld	r30, X
     476:	21 e0       	ldi	r18, 0x01	; 1
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	40 e0       	ldi	r20, 0x00	; 0
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__ashldi3>
     48a:	20 95       	com	r18
     48c:	e2 23       	and	r30, r18
     48e:	ec 93       	st	X, r30
     490:	0f 91       	pop	r16
     492:	08 95       	ret

00000494 <_ZN6driver10atmega328p4Gpio6toggleEv>:
     494:	0f 93       	push	r16
     496:	dc 01       	movw	r26, r24
     498:	14 96       	adiw	r26, 0x04	; 4
     49a:	0c 91       	ld	r16, X
     49c:	14 97       	sbiw	r26, 0x04	; 4
     49e:	12 96       	adiw	r26, 0x02	; 2
     4a0:	ed 91       	ld	r30, X+
     4a2:	fc 91       	ld	r31, X
     4a4:	13 97       	sbiw	r26, 0x03	; 3
     4a6:	04 80       	ldd	r0, Z+4	; 0x04
     4a8:	f5 81       	ldd	r31, Z+5	; 0x05
     4aa:	e0 2d       	mov	r30, r0
     4ac:	a0 81       	ld	r26, Z
     4ae:	21 e0       	ldi	r18, 0x01	; 1
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__ashldi3>
     4c2:	2a 2b       	or	r18, r26
     4c4:	20 83       	st	Z, r18
     4c6:	0f 91       	pop	r16
     4c8:	08 95       	ret

000004ca <_ZN6driver10atmega328p4Gpio21enableInterruptOnPortEb>:
     4ca:	0f 93       	push	r16
     4cc:	66 23       	and	r22, r22
     4ce:	b1 f0       	breq	.+44     	; 0x4fc <_ZN6driver10atmega328p4Gpio21enableInterruptOnPortEb+0x32>
     4d0:	dc 01       	movw	r26, r24
     4d2:	12 96       	adiw	r26, 0x02	; 2
     4d4:	ed 91       	ld	r30, X+
     4d6:	fc 91       	ld	r31, X
     4d8:	13 97       	sbiw	r26, 0x03	; 3
     4da:	00 85       	ldd	r16, Z+8	; 0x08
     4dc:	e8 e6       	ldi	r30, 0x68	; 104
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	a0 81       	ld	r26, Z
     4e2:	21 e0       	ldi	r18, 0x01	; 1
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__ashldi3>
     4f6:	2a 2b       	or	r18, r26
     4f8:	20 83       	st	Z, r18
     4fa:	16 c0       	rjmp	.+44     	; 0x528 <_ZN6driver10atmega328p4Gpio21enableInterruptOnPortEb+0x5e>
     4fc:	dc 01       	movw	r26, r24
     4fe:	12 96       	adiw	r26, 0x02	; 2
     500:	ed 91       	ld	r30, X+
     502:	fc 91       	ld	r31, X
     504:	13 97       	sbiw	r26, 0x03	; 3
     506:	00 85       	ldd	r16, Z+8	; 0x08
     508:	a8 e6       	ldi	r26, 0x68	; 104
     50a:	b0 e0       	ldi	r27, 0x00	; 0
     50c:	ec 91       	ld	r30, X
     50e:	21 e0       	ldi	r18, 0x01	; 1
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__ashldi3>
     522:	20 95       	com	r18
     524:	e2 23       	and	r30, r18
     526:	ec 93       	st	X, r30
     528:	0f 91       	pop	r16
     52a:	08 95       	ret

0000052c <_ZN6driver10atmega328p4Gpio15enableInterruptEb>:
     52c:	0f 93       	push	r16
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	66 23       	and	r22, r22
     534:	49 f1       	breq	.+82     	; 0x588 <_ZN6driver10atmega328p4Gpio15enableInterruptEb+0x5c>
     536:	ec 01       	movw	r28, r24
     538:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <_ZN5utils21globalInterruptEnableEv>
     53c:	ea 81       	ldd	r30, Y+2	; 0x02
     53e:	fb 81       	ldd	r31, Y+3	; 0x03
     540:	00 85       	ldd	r16, Z+8	; 0x08
     542:	e8 e6       	ldi	r30, 0x68	; 104
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	a0 81       	ld	r26, Z
     548:	21 e0       	ldi	r18, 0x01	; 1
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	40 e0       	ldi	r20, 0x00	; 0
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__ashldi3>
     55c:	2a 2b       	or	r18, r26
     55e:	20 83       	st	Z, r18
     560:	0c 81       	ldd	r16, Y+4	; 0x04
     562:	ea 81       	ldd	r30, Y+2	; 0x02
     564:	fb 81       	ldd	r31, Y+3	; 0x03
     566:	06 80       	ldd	r0, Z+6	; 0x06
     568:	f7 81       	ldd	r31, Z+7	; 0x07
     56a:	e0 2d       	mov	r30, r0
     56c:	a0 81       	ld	r26, Z
     56e:	21 e0       	ldi	r18, 0x01	; 1
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	40 e0       	ldi	r20, 0x00	; 0
     574:	50 e0       	ldi	r21, 0x00	; 0
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	70 e0       	ldi	r23, 0x00	; 0
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__ashldi3>
     582:	2a 2b       	or	r18, r26
     584:	20 83       	st	Z, r18
     586:	18 c0       	rjmp	.+48     	; 0x5b8 <_ZN6driver10atmega328p4Gpio15enableInterruptEb+0x8c>
     588:	dc 01       	movw	r26, r24
     58a:	14 96       	adiw	r26, 0x04	; 4
     58c:	0c 91       	ld	r16, X
     58e:	14 97       	sbiw	r26, 0x04	; 4
     590:	12 96       	adiw	r26, 0x02	; 2
     592:	ed 91       	ld	r30, X+
     594:	fc 91       	ld	r31, X
     596:	13 97       	sbiw	r26, 0x03	; 3
     598:	a6 81       	ldd	r26, Z+6	; 0x06
     59a:	b7 81       	ldd	r27, Z+7	; 0x07
     59c:	ec 91       	ld	r30, X
     59e:	21 e0       	ldi	r18, 0x01	; 1
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	40 e0       	ldi	r20, 0x00	; 0
     5a4:	50 e0       	ldi	r21, 0x00	; 0
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__ashldi3>
     5b2:	20 95       	com	r18
     5b4:	e2 23       	and	r30, r18
     5b6:	ec 93       	st	X, r30
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	0f 91       	pop	r16
     5be:	08 95       	ret

000005c0 <_ZN6driver10atmega328p4GpioD1Ev>:
     5c0:	4f 92       	push	r4
     5c2:	5f 92       	push	r5
     5c4:	6f 92       	push	r6
     5c6:	7f 92       	push	r7
     5c8:	8f 92       	push	r8
     5ca:	9f 92       	push	r9
     5cc:	af 92       	push	r10
     5ce:	bf 92       	push	r11
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	ec 01       	movw	r28, r24
     5e0:	8c e9       	ldi	r24, 0x9C	; 156
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	99 83       	std	Y+1, r25	; 0x01
     5e6:	88 83       	st	Y, r24
     5e8:	0c 81       	ldd	r16, Y+4	; 0x04
     5ea:	ea 81       	ldd	r30, Y+2	; 0x02
     5ec:	fb 81       	ldd	r31, Y+3	; 0x03
     5ee:	a0 81       	ld	r26, Z
     5f0:	b1 81       	ldd	r27, Z+1	; 0x01
     5f2:	ec 91       	ld	r30, X
     5f4:	21 e0       	ldi	r18, 0x01	; 1
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__ashldi3>
     608:	20 95       	com	r18
     60a:	e2 23       	and	r30, r18
     60c:	ec 93       	st	X, r30
     60e:	0c 81       	ldd	r16, Y+4	; 0x04
     610:	ea 81       	ldd	r30, Y+2	; 0x02
     612:	fb 81       	ldd	r31, Y+3	; 0x03
     614:	a2 81       	ldd	r26, Z+2	; 0x02
     616:	b3 81       	ldd	r27, Z+3	; 0x03
     618:	ec 91       	ld	r30, X
     61a:	21 e0       	ldi	r18, 0x01	; 1
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	40 e0       	ldi	r20, 0x00	; 0
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__ashldi3>
     62e:	20 95       	com	r18
     630:	e2 23       	and	r30, r18
     632:	ec 93       	st	X, r30
     634:	0c 81       	ldd	r16, Y+4	; 0x04
     636:	e2 ed       	ldi	r30, 0xD2	; 210
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	40 80       	ld	r4, Z
     63c:	51 80       	ldd	r5, Z+1	; 0x01
     63e:	62 80       	ldd	r6, Z+2	; 0x02
     640:	73 80       	ldd	r7, Z+3	; 0x03
     642:	21 e0       	ldi	r18, 0x01	; 1
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	40 e0       	ldi	r20, 0x00	; 0
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__ashldi3>
     656:	82 2e       	mov	r8, r18
     658:	93 2e       	mov	r9, r19
     65a:	a4 2e       	mov	r10, r20
     65c:	b5 2e       	mov	r11, r21
     65e:	80 94       	com	r8
     660:	90 94       	com	r9
     662:	a0 94       	com	r10
     664:	b0 94       	com	r11
     666:	84 20       	and	r8, r4
     668:	95 20       	and	r9, r5
     66a:	a6 20       	and	r10, r6
     66c:	b7 20       	and	r11, r7
     66e:	80 82       	st	Z, r8
     670:	91 82       	std	Z+1, r9	; 0x01
     672:	a2 82       	std	Z+2, r10	; 0x02
     674:	b3 82       	std	Z+3, r11	; 0x03
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	ce 01       	movw	r24, r28
     67a:	0e 94 96 02 	call	0x52c	; 0x52c <_ZN6driver10atmega328p4Gpio15enableInterruptEb>
     67e:	1b 82       	std	Y+3, r1	; 0x03
     680:	1a 82       	std	Y+2, r1	; 0x02
     682:	88 e8       	ldi	r24, 0x88	; 136
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	99 83       	std	Y+1, r25	; 0x01
     688:	88 83       	st	Y, r24
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	0f 91       	pop	r16
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	df 90       	pop	r13
     696:	cf 90       	pop	r12
     698:	bf 90       	pop	r11
     69a:	af 90       	pop	r10
     69c:	9f 90       	pop	r9
     69e:	8f 90       	pop	r8
     6a0:	7f 90       	pop	r7
     6a2:	6f 90       	pop	r6
     6a4:	5f 90       	pop	r5
     6a6:	4f 90       	pop	r4
     6a8:	08 95       	ret

000006aa <_ZN6driver10atmega328p4GpioD0Ev>:
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	ec 01       	movw	r28, r24
     6b0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6driver10atmega328p4GpioD1Ev>
     6b4:	65 e0       	ldi	r22, 0x05	; 5
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	ce 01       	movw	r24, r28
     6ba:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZdlPvj>
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <_ZN6driver10atmega328p4Gpio12initHardwareEh>:
     6c4:	88 30       	cpi	r24, 0x08	; 8
     6c6:	20 f0       	brcs	.+8      	; 0x6d0 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0xc>
     6c8:	8e 30       	cpi	r24, 0x0E	; 14
     6ca:	20 f0       	brcs	.+8      	; 0x6d4 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x10>
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x12>
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x12>
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	91 11       	cpse	r25, r1
     6d8:	0f c0       	rjmp	.+30     	; 0x6f8 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x34>
     6da:	8e 30       	cpi	r24, 0x0E	; 14
     6dc:	18 f0       	brcs	.+6      	; 0x6e4 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x20>
     6de:	84 31       	cpi	r24, 0x14	; 20
     6e0:	08 f4       	brcc	.+2      	; 0x6e4 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x20>
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	91 11       	cpse	r25, r1
     6e6:	0b c0       	rjmp	.+22     	; 0x6fe <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x3a>
     6e8:	86 30       	cpi	r24, 0x06	; 6
     6ea:	08 f4       	brcc	.+2      	; 0x6ee <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x2a>
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	99 23       	and	r25, r25
     6f0:	49 f0       	breq	.+18     	; 0x704 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x40>
     6f2:	8a e0       	ldi	r24, 0x0A	; 10
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	08 95       	ret
     6f8:	8e e1       	ldi	r24, 0x1E	; 30
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	08 95       	ret
     6fe:	84 e1       	ldi	r24, 0x14	; 20
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	08 95       	ret
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	08 95       	ret

0000070a <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE>:
     70a:	4f 92       	push	r4
     70c:	5f 92       	push	r5
     70e:	6f 92       	push	r6
     710:	7f 92       	push	r7
     712:	8f 92       	push	r8
     714:	9f 92       	push	r9
     716:	af 92       	push	r10
     718:	bf 92       	push	r11
     71a:	cf 92       	push	r12
     71c:	df 92       	push	r13
     71e:	ef 92       	push	r14
     720:	ff 92       	push	r15
     722:	0f 93       	push	r16
     724:	e8 2f       	mov	r30, r24
     726:	84 31       	cpi	r24, 0x14	; 20
     728:	d8 f4       	brcc	.+54     	; 0x760 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x56>
     72a:	63 30       	cpi	r22, 0x03	; 3
     72c:	d8 f4       	brcc	.+54     	; 0x764 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x5a>
     72e:	84 31       	cpi	r24, 0x14	; 20
     730:	a8 f4       	brcc	.+42     	; 0x75c <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x52>
     732:	80 90 d2 03 	lds	r8, 0x03D2	; 0x8003d2 <_ZN6driver10atmega328p12_GLOBAL__N_19GpioParam11pinRegistryE>
     736:	90 90 d3 03 	lds	r9, 0x03D3	; 0x8003d3 <_ZN6driver10atmega328p12_GLOBAL__N_19GpioParam11pinRegistryE+0x1>
     73a:	a0 90 d4 03 	lds	r10, 0x03D4	; 0x8003d4 <_ZN6driver10atmega328p12_GLOBAL__N_19GpioParam11pinRegistryE+0x2>
     73e:	b0 90 d5 03 	lds	r11, 0x03D5	; 0x8003d5 <_ZN6driver10atmega328p12_GLOBAL__N_19GpioParam11pinRegistryE+0x3>
     742:	28 2d       	mov	r18, r8
     744:	39 2d       	mov	r19, r9
     746:	4a 2d       	mov	r20, r10
     748:	5b 2d       	mov	r21, r11
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 2f       	mov	r16, r30
     754:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__lshrdi3>
     758:	21 70       	andi	r18, 0x01	; 1
     75a:	05 c0       	rjmp	.+10     	; 0x766 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x5c>
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	03 c0       	rjmp	.+6      	; 0x766 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x5c>
     760:	21 e0       	ldi	r18, 0x01	; 1
     762:	01 c0       	rjmp	.+2      	; 0x766 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x5c>
     764:	21 e0       	ldi	r18, 0x01	; 1
     766:	21 11       	cpse	r18, r1
     768:	28 c0       	rjmp	.+80     	; 0x7ba <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0xb0>
     76a:	0e 2f       	mov	r16, r30
     76c:	8e 2f       	mov	r24, r30
     76e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN6driver10atmega328p4Gpio12initHardwareEh>
     772:	fc 01       	movw	r30, r24
     774:	00 97       	sbiw	r24, 0x00	; 0
     776:	21 f1       	breq	.+72     	; 0x7c0 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0xb6>
     778:	a2 ed       	ldi	r26, 0xD2	; 210
     77a:	b3 e0       	ldi	r27, 0x03	; 3
     77c:	4d 90       	ld	r4, X+
     77e:	5d 90       	ld	r5, X+
     780:	6d 90       	ld	r6, X+
     782:	7c 90       	ld	r7, X
     784:	13 97       	sbiw	r26, 0x03	; 3
     786:	21 e0       	ldi	r18, 0x01	; 1
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	40 e0       	ldi	r20, 0x00	; 0
     78c:	50 e0       	ldi	r21, 0x00	; 0
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__ashldi3>
     79a:	82 2e       	mov	r8, r18
     79c:	93 2e       	mov	r9, r19
     79e:	a4 2e       	mov	r10, r20
     7a0:	b5 2e       	mov	r11, r21
     7a2:	84 28       	or	r8, r4
     7a4:	95 28       	or	r9, r5
     7a6:	a6 28       	or	r10, r6
     7a8:	b7 28       	or	r11, r7
     7aa:	8d 92       	st	X+, r8
     7ac:	9d 92       	st	X+, r9
     7ae:	ad 92       	st	X+, r10
     7b0:	bc 92       	st	X, r11
     7b2:	13 97       	sbiw	r26, 0x03	; 3
     7b4:	8e 2f       	mov	r24, r30
     7b6:	9f 2f       	mov	r25, r31
     7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0xb8>
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	01 c0       	rjmp	.+2      	; 0x7c2 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0xb8>
     7c0:	9f 2f       	mov	r25, r31
     7c2:	0f 91       	pop	r16
     7c4:	ff 90       	pop	r15
     7c6:	ef 90       	pop	r14
     7c8:	df 90       	pop	r13
     7ca:	cf 90       	pop	r12
     7cc:	bf 90       	pop	r11
     7ce:	af 90       	pop	r10
     7d0:	9f 90       	pop	r9
     7d2:	8f 90       	pop	r8
     7d4:	7f 90       	pop	r7
     7d6:	6f 90       	pop	r6
     7d8:	5f 90       	pop	r5
     7da:	4f 90       	pop	r4
     7dc:	08 95       	ret

000007de <_ZN6driver10atmega328p4Gpio12setDirectionENS1_9DirectionE>:
     7de:	0f 93       	push	r16
     7e0:	61 30       	cpi	r22, 0x01	; 1
     7e2:	c9 f4       	brne	.+50     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     7e4:	dc 01       	movw	r26, r24
     7e6:	14 96       	adiw	r26, 0x04	; 4
     7e8:	0c 91       	ld	r16, X
     7ea:	14 97       	sbiw	r26, 0x04	; 4
     7ec:	12 96       	adiw	r26, 0x02	; 2
     7ee:	ed 91       	ld	r30, X+
     7f0:	fc 91       	ld	r31, X
     7f2:	13 97       	sbiw	r26, 0x03	; 3
     7f4:	02 80       	ldd	r0, Z+2	; 0x02
     7f6:	f3 81       	ldd	r31, Z+3	; 0x03
     7f8:	e0 2d       	mov	r30, r0
     7fa:	a0 81       	ld	r26, Z
     7fc:	21 e0       	ldi	r18, 0x01	; 1
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	40 e0       	ldi	r20, 0x00	; 0
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__ashldi3>
     810:	2a 2b       	or	r18, r26
     812:	20 83       	st	Z, r18
     814:	17 c0       	rjmp	.+46     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     816:	62 30       	cpi	r22, 0x02	; 2
     818:	a9 f4       	brne	.+42     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     81a:	fc 01       	movw	r30, r24
     81c:	04 81       	ldd	r16, Z+4	; 0x04
     81e:	02 80       	ldd	r0, Z+2	; 0x02
     820:	f3 81       	ldd	r31, Z+3	; 0x03
     822:	e0 2d       	mov	r30, r0
     824:	01 90       	ld	r0, Z+
     826:	f0 81       	ld	r31, Z
     828:	e0 2d       	mov	r30, r0
     82a:	a0 81       	ld	r26, Z
     82c:	21 e0       	ldi	r18, 0x01	; 1
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	40 e0       	ldi	r20, 0x00	; 0
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__ashldi3>
     840:	2a 2b       	or	r18, r26
     842:	20 83       	st	Z, r18
     844:	0f 91       	pop	r16
     846:	08 95       	ret

00000848 <_ZN9container5ArrayIPFvvELj3EEC1Ev>:
     848:	26 e0       	ldi	r18, 0x06	; 6
     84a:	fc 01       	movw	r30, r24
     84c:	11 92       	st	Z+, r1
     84e:	2a 95       	dec	r18
     850:	e9 f7       	brne	.-6      	; 0x84c <_ZN9container5ArrayIPFvvELj3EEC1Ev+0x4>
     852:	08 95       	ret

00000854 <_ZN9container13CallbackArrayILj3EEC1Ev>:
     854:	0e 94 24 04 	call	0x848	; 0x848 <_ZN9container5ArrayIPFvvELj3EEC1Ev>
     858:	08 95       	ret

0000085a <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj>:
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	63 30       	cpi	r22, 0x03	; 3
     85e:	71 05       	cpc	r23, r1
     860:	08 f0       	brcs	.+2      	; 0x864 <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj+0xa>
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	08 95       	ret

00000866 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>:
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	8c 01       	movw	r16, r24
     874:	7b 01       	movw	r14, r22
     876:	ea 01       	movw	r28, r20
     878:	ba 01       	movw	r22, r20
     87a:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj>
     87e:	88 23       	and	r24, r24
     880:	21 f0       	breq	.+8      	; 0x88a <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x24>
     882:	e1 14       	cp	r14, r1
     884:	f1 04       	cpc	r15, r1
     886:	19 f4       	brne	.+6      	; 0x88e <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x28>
     888:	03 c0       	rjmp	.+6      	; 0x890 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x2a>
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	01 c0       	rjmp	.+2      	; 0x890 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x2a>
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	81 11       	cpse	r24, r1
     892:	08 c0       	rjmp	.+16     	; 0x8a4 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x3e>
     894:	cc 0f       	add	r28, r28
     896:	dd 1f       	adc	r29, r29
     898:	c0 0f       	add	r28, r16
     89a:	d1 1f       	adc	r29, r17
     89c:	f9 82       	std	Y+1, r15	; 0x01
     89e:	e8 82       	st	Y, r14
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x40>
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	ff 90       	pop	r15
     8b0:	ef 90       	pop	r14
     8b2:	08 95       	ret

000008b4 <_ZNK6driver10atmega328p4Gpio11setCallbackEPFvvE>:
     8b4:	dc 01       	movw	r26, r24
     8b6:	12 96       	adiw	r26, 0x02	; 2
     8b8:	ed 91       	ld	r30, X+
     8ba:	fc 91       	ld	r31, X
     8bc:	13 97       	sbiw	r26, 0x03	; 3
     8be:	02 80       	ldd	r0, Z+2	; 0x02
     8c0:	f3 81       	ldd	r31, Z+3	; 0x03
     8c2:	e0 2d       	mov	r30, r0
     8c4:	90 81       	ld	r25, Z
     8c6:	85 b1       	in	r24, 0x05	; 5
     8c8:	98 13       	cpse	r25, r24
     8ca:	07 c0       	rjmp	.+14     	; 0x8da <_ZNK6driver10atmega328p4Gpio11setCallbackEPFvvE+0x26>
     8cc:	40 e0       	ldi	r20, 0x00	; 0
     8ce:	50 e0       	ldi	r21, 0x00	; 0
     8d0:	86 ed       	ldi	r24, 0xD6	; 214
     8d2:	93 e0       	ldi	r25, 0x03	; 3
     8d4:	0e 94 33 04 	call	0x866	; 0x866 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>
     8d8:	08 95       	ret
     8da:	90 81       	ld	r25, Z
     8dc:	88 b1       	in	r24, 0x08	; 8
     8de:	98 13       	cpse	r25, r24
     8e0:	07 c0       	rjmp	.+14     	; 0x8f0 <_ZNK6driver10atmega328p4Gpio11setCallbackEPFvvE+0x3c>
     8e2:	41 e0       	ldi	r20, 0x01	; 1
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	86 ed       	ldi	r24, 0xD6	; 214
     8e8:	93 e0       	ldi	r25, 0x03	; 3
     8ea:	0e 94 33 04 	call	0x866	; 0x866 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>
     8ee:	08 95       	ret
     8f0:	90 81       	ld	r25, Z
     8f2:	8b b1       	in	r24, 0x0b	; 11
     8f4:	98 13       	cpse	r25, r24
     8f6:	06 c0       	rjmp	.+12     	; 0x904 <__stack+0x5>
     8f8:	42 e0       	ldi	r20, 0x02	; 2
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	86 ed       	ldi	r24, 0xD6	; 214
     8fe:	93 e0       	ldi	r25, 0x03	; 3
     900:	0e 94 33 04 	call	0x866	; 0x866 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>
     904:	08 95       	ret

00000906 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE>:
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	8c 01       	movw	r16, r24
     914:	c6 2f       	mov	r28, r22
     916:	d4 2f       	mov	r29, r20
     918:	79 01       	movw	r14, r18
     91a:	8c e9       	ldi	r24, 0x9C	; 156
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	f8 01       	movw	r30, r16
     920:	91 83       	std	Z+1, r25	; 0x01
     922:	80 83       	st	Z, r24
     924:	64 2f       	mov	r22, r20
     926:	8c 2f       	mov	r24, r28
     928:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE>
     92c:	9c 01       	movw	r18, r24
     92e:	f8 01       	movw	r30, r16
     930:	93 83       	std	Z+3, r25	; 0x03
     932:	82 83       	std	Z+2, r24	; 0x02
     934:	c8 30       	cpi	r28, 0x08	; 8
     936:	20 f0       	brcs	.+8      	; 0x940 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x3a>
     938:	ce 30       	cpi	r28, 0x0E	; 14
     93a:	20 f0       	brcs	.+8      	; 0x944 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x3e>
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	03 c0       	rjmp	.+6      	; 0x946 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x40>
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	01 c0       	rjmp	.+2      	; 0x946 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x40>
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	99 23       	and	r25, r25
     948:	11 f0       	breq	.+4      	; 0x94e <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x48>
     94a:	c8 50       	subi	r28, 0x08	; 8
     94c:	0f c0       	rjmp	.+30     	; 0x96c <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x66>
     94e:	ce 30       	cpi	r28, 0x0E	; 14
     950:	18 f0       	brcs	.+6      	; 0x958 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x52>
     952:	c4 31       	cpi	r28, 0x14	; 20
     954:	08 f4       	brcc	.+2      	; 0x958 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x52>
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	99 23       	and	r25, r25
     95a:	11 f0       	breq	.+4      	; 0x960 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x5a>
     95c:	ce 50       	subi	r28, 0x0E	; 14
     95e:	06 c0       	rjmp	.+12     	; 0x96c <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x66>
     960:	c6 30       	cpi	r28, 0x06	; 6
     962:	08 f4       	brcc	.+2      	; 0x966 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x60>
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	91 11       	cpse	r25, r1
     968:	01 c0       	rjmp	.+2      	; 0x96c <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x66>
     96a:	cf ef       	ldi	r28, 0xFF	; 255
     96c:	f8 01       	movw	r30, r16
     96e:	c4 83       	std	Z+4, r28	; 0x04
     970:	23 2b       	or	r18, r19
     972:	59 f0       	breq	.+22     	; 0x98a <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x84>
     974:	6d 2f       	mov	r22, r29
     976:	c8 01       	movw	r24, r16
     978:	0e 94 ef 03 	call	0x7de	; 0x7de <_ZN6driver10atmega328p4Gpio12setDirectionENS1_9DirectionE>
     97c:	e1 14       	cp	r14, r1
     97e:	f1 04       	cpc	r15, r1
     980:	21 f0       	breq	.+8      	; 0x98a <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x84>
     982:	b7 01       	movw	r22, r14
     984:	c8 01       	movw	r24, r16
     986:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZNK6driver10atmega328p4Gpio11setCallbackEPFvvE>
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	08 95       	ret

00000998 <_ZNK9container13CallbackArrayILj3EE17isCallbackDefinedEj>:
     998:	66 0f       	add	r22, r22
     99a:	77 1f       	adc	r23, r23
     99c:	86 0f       	add	r24, r22
     99e:	97 1f       	adc	r25, r23
     9a0:	fc 01       	movw	r30, r24
     9a2:	20 81       	ld	r18, Z
     9a4:	31 81       	ldd	r19, Z+1	; 0x01
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	23 2b       	or	r18, r19
     9aa:	09 f4       	brne	.+2      	; 0x9ae <_ZNK9container13CallbackArrayILj3EE17isCallbackDefinedEj+0x16>
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	08 95       	ret

000009b0 <_ZN9container13CallbackArrayILj3EE6invokeEj>:
     9b0:	ef 92       	push	r14
     9b2:	ff 92       	push	r15
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	7c 01       	movw	r14, r24
     9bc:	eb 01       	movw	r28, r22
     9be:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj>
     9c2:	18 2f       	mov	r17, r24
     9c4:	88 23       	and	r24, r24
     9c6:	41 f0       	breq	.+16     	; 0x9d8 <_ZN9container13CallbackArrayILj3EE6invokeEj+0x28>
     9c8:	be 01       	movw	r22, r28
     9ca:	c7 01       	movw	r24, r14
     9cc:	0e 94 cc 04 	call	0x998	; 0x998 <_ZNK9container13CallbackArrayILj3EE17isCallbackDefinedEj>
     9d0:	88 23       	and	r24, r24
     9d2:	19 f0       	breq	.+6      	; 0x9da <_ZN9container13CallbackArrayILj3EE6invokeEj+0x2a>
     9d4:	10 e0       	ldi	r17, 0x00	; 0
     9d6:	01 c0       	rjmp	.+2      	; 0x9da <_ZN9container13CallbackArrayILj3EE6invokeEj+0x2a>
     9d8:	11 e0       	ldi	r17, 0x01	; 1
     9da:	11 11       	cpse	r17, r1
     9dc:	09 c0       	rjmp	.+18     	; 0x9f0 <_ZN9container13CallbackArrayILj3EE6invokeEj+0x40>
     9de:	cc 0f       	add	r28, r28
     9e0:	dd 1f       	adc	r29, r29
     9e2:	ce 0d       	add	r28, r14
     9e4:	df 1d       	adc	r29, r15
     9e6:	e8 81       	ld	r30, Y
     9e8:	f9 81       	ldd	r31, Y+1	; 0x01
     9ea:	09 95       	icall
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <_ZN9container13CallbackArrayILj3EE6invokeEj+0x42>
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	ff 90       	pop	r15
     9fa:	ef 90       	pop	r14
     9fc:	08 95       	ret

000009fe <__vector_3>:
     9fe:	1f 92       	push	r1
     a00:	0f 92       	push	r0
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	0f 92       	push	r0
     a06:	11 24       	eor	r1, r1
     a08:	2f 93       	push	r18
     a0a:	3f 93       	push	r19
     a0c:	4f 93       	push	r20
     a0e:	5f 93       	push	r21
     a10:	6f 93       	push	r22
     a12:	7f 93       	push	r23
     a14:	8f 93       	push	r24
     a16:	9f 93       	push	r25
     a18:	af 93       	push	r26
     a1a:	bf 93       	push	r27
     a1c:	ef 93       	push	r30
     a1e:	ff 93       	push	r31
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	86 ed       	ldi	r24, 0xD6	; 214
     a26:	93 e0       	ldi	r25, 0x03	; 3
     a28:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_ZN9container13CallbackArrayILj3EE6invokeEj>
     a2c:	ff 91       	pop	r31
     a2e:	ef 91       	pop	r30
     a30:	bf 91       	pop	r27
     a32:	af 91       	pop	r26
     a34:	9f 91       	pop	r25
     a36:	8f 91       	pop	r24
     a38:	7f 91       	pop	r23
     a3a:	6f 91       	pop	r22
     a3c:	5f 91       	pop	r21
     a3e:	4f 91       	pop	r20
     a40:	3f 91       	pop	r19
     a42:	2f 91       	pop	r18
     a44:	0f 90       	pop	r0
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	0f 90       	pop	r0
     a4a:	1f 90       	pop	r1
     a4c:	18 95       	reti

00000a4e <__vector_4>:
     a4e:	1f 92       	push	r1
     a50:	0f 92       	push	r0
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	0f 92       	push	r0
     a56:	11 24       	eor	r1, r1
     a58:	2f 93       	push	r18
     a5a:	3f 93       	push	r19
     a5c:	4f 93       	push	r20
     a5e:	5f 93       	push	r21
     a60:	6f 93       	push	r22
     a62:	7f 93       	push	r23
     a64:	8f 93       	push	r24
     a66:	9f 93       	push	r25
     a68:	af 93       	push	r26
     a6a:	bf 93       	push	r27
     a6c:	ef 93       	push	r30
     a6e:	ff 93       	push	r31
     a70:	61 e0       	ldi	r22, 0x01	; 1
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	86 ed       	ldi	r24, 0xD6	; 214
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_ZN9container13CallbackArrayILj3EE6invokeEj>
     a7c:	ff 91       	pop	r31
     a7e:	ef 91       	pop	r30
     a80:	bf 91       	pop	r27
     a82:	af 91       	pop	r26
     a84:	9f 91       	pop	r25
     a86:	8f 91       	pop	r24
     a88:	7f 91       	pop	r23
     a8a:	6f 91       	pop	r22
     a8c:	5f 91       	pop	r21
     a8e:	4f 91       	pop	r20
     a90:	3f 91       	pop	r19
     a92:	2f 91       	pop	r18
     a94:	0f 90       	pop	r0
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	0f 90       	pop	r0
     a9a:	1f 90       	pop	r1
     a9c:	18 95       	reti

00000a9e <__vector_5>:
     a9e:	1f 92       	push	r1
     aa0:	0f 92       	push	r0
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	0f 92       	push	r0
     aa6:	11 24       	eor	r1, r1
     aa8:	2f 93       	push	r18
     aaa:	3f 93       	push	r19
     aac:	4f 93       	push	r20
     aae:	5f 93       	push	r21
     ab0:	6f 93       	push	r22
     ab2:	7f 93       	push	r23
     ab4:	8f 93       	push	r24
     ab6:	9f 93       	push	r25
     ab8:	af 93       	push	r26
     aba:	bf 93       	push	r27
     abc:	ef 93       	push	r30
     abe:	ff 93       	push	r31
     ac0:	62 e0       	ldi	r22, 0x02	; 2
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	86 ed       	ldi	r24, 0xD6	; 214
     ac6:	93 e0       	ldi	r25, 0x03	; 3
     ac8:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_ZN9container13CallbackArrayILj3EE6invokeEj>
     acc:	ff 91       	pop	r31
     ace:	ef 91       	pop	r30
     ad0:	bf 91       	pop	r27
     ad2:	af 91       	pop	r26
     ad4:	9f 91       	pop	r25
     ad6:	8f 91       	pop	r24
     ad8:	7f 91       	pop	r23
     ada:	6f 91       	pop	r22
     adc:	5f 91       	pop	r21
     ade:	4f 91       	pop	r20
     ae0:	3f 91       	pop	r19
     ae2:	2f 91       	pop	r18
     ae4:	0f 90       	pop	r0
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	0f 90       	pop	r0
     aea:	1f 90       	pop	r1
     aec:	18 95       	reti

00000aee <_Z41__static_initialization_and_destruction_0ii>:

// -----------------------------------------------------------------------------
ISR (PCINT2_vect) { invokeCallback(CallbackIndex::PortD); }

} // namespace atmega328p
} // namespace driver
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	39 f4       	brne	.+14     	; 0xb00 <_Z41__static_initialization_and_destruction_0ii+0x12>
     af2:	6f 3f       	cpi	r22, 0xFF	; 255
     af4:	7f 4f       	sbci	r23, 0xFF	; 255
     af6:	21 f4       	brne	.+8      	; 0xb00 <_Z41__static_initialization_and_destruction_0ii+0x12>
    /** Pin registry (1 = reserved, 0 = free). */
    static uint32_t pinRegistry;
};

/** Pointers to callbacks. */
container::CallbackArray<GpioParam::IoPortCount> GpioParam::callbacks{};
     af8:	86 ed       	ldi	r24, 0xD6	; 214
     afa:	93 e0       	ldi	r25, 0x03	; 3
     afc:	0e 94 2a 04 	call	0x854	; 0x854 <_ZN9container13CallbackArrayILj3EEC1Ev>
     b00:	08 95       	ret

00000b02 <_GLOBAL__sub_I__ZN6driver10atmega328p4Gpio9myHwPortBE>:

// -----------------------------------------------------------------------------
ISR (PCINT2_vect) { invokeCallback(CallbackIndex::PortD); }

} // namespace atmega328p
} // namespace driver
     b02:	6f ef       	ldi	r22, 0xFF	; 255
     b04:	7f ef       	ldi	r23, 0xFF	; 255
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 77 05 	call	0xaee	; 0xaee <_Z41__static_initialization_and_destruction_0ii>
     b0e:	08 95       	ret

00000b10 <_GLOBAL__sub_D__ZN6driver10atmega328p4Gpio9myHwPortBE>:
     b10:	6f ef       	ldi	r22, 0xFF	; 255
     b12:	7f ef       	ldi	r23, 0xFF	; 255
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	0e 94 77 05 	call	0xaee	; 0xaee <_Z41__static_initialization_and_destruction_0ii>
     b1c:	08 95       	ret

00000b1e <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc>:
    static constexpr char NewLine{'\n'};
};

// -----------------------------------------------------------------------------
void transmitChar(const char character) noexcept
{
     b1e:	0f 93       	push	r16
     b20:	e8 2f       	mov	r30, r24
// -----------------------------------------------------------------------------
template <typename T>
constexpr bool read(const volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    return reg & (1ULL << bit);
     b22:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	40 e0       	ldi	r20, 0x00	; 0
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	05 e0       	ldi	r16, 0x05	; 5
     b36:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__lshrdi3>
     b3a:	21 70       	andi	r18, 0x01	; 1
    // Wait until the previous character has been sent.
    while (!utils::read(UCSR0A, UDRE0));
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	40 e0       	ldi	r20, 0x00	; 0
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	a0 e0       	ldi	r26, 0x00	; 0
     b4c:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <__cmpdi2_s8>
     b50:	41 f3       	breq	.-48     	; 0xb22 <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc+0x4>

    // Put the new character in the transmission register.
    UDR0 = character;
     b52:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
     b56:	0f 91       	pop	r16
     b58:	08 95       	ret

00000b5a <__tcf_0>:
{
public:
    /**
     * @brief Delete the serial device.
     */
    virtual ~SerialInterface() noexcept = default;
     b5a:	80 eb       	ldi	r24, 0xB0	; 176
     b5c:	91 e0       	ldi	r25, 0x01	; 1
     b5e:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <_ZZN6driver10atmega328p6Serial11getInstanceEvE10myInstance+0x1>
     b62:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <_ZZN6driver10atmega328p6Serial11getInstanceEvE10myInstance>
     b66:	08 95       	ret

00000b68 <_ZNK6driver10atmega328p6Serial12baudRate_bpsEv>:
    // Return a reference to the singleton serial instance, cast to the corresponding interface.
    return myInstance; 
}

// -----------------------------------------------------------------------------
uint32_t Serial::baudRate_bps() const { return Param::BaudRate_bps; }
     b68:	60 e8       	ldi	r22, 0x80	; 128
     b6a:	75 e2       	ldi	r23, 0x25	; 37
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	08 95       	ret

00000b72 <_ZNK6driver10atmega328p6Serial13isInitializedEv>:

// -----------------------------------------------------------------------------
bool Serial::isInitialized() const noexcept { return true; }
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	08 95       	ret

00000b76 <_ZNK6driver10atmega328p6Serial9isEnabledEv>:

// -----------------------------------------------------------------------------
bool Serial::isEnabled() const noexcept { return myEnabled; }
     b76:	fc 01       	movw	r30, r24
     b78:	82 81       	ldd	r24, Z+2	; 0x02
     b7a:	08 95       	ret

00000b7c <_ZN6driver10atmega328p6Serial10setEnabledEb>:

// -----------------------------------------------------------------------------
void Serial::setEnabled(const bool enable) noexcept { myEnabled = enable; }
     b7c:	fc 01       	movw	r30, r24
     b7e:	62 83       	std	Z+2, r22	; 0x02
     b80:	08 95       	ret

00000b82 <_ZNK6driver10atmega328p6Serial5printEPKc>:
    UDR0 = Param::CarriageReturn;
}

// -----------------------------------------------------------------------------
void Serial::print(const char* message) const noexcept
{
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	eb 01       	movw	r28, r22
    // Terminate the function if serial transmission isn't enabled.
    if (!myEnabled) { return; }
     b88:	fc 01       	movw	r30, r24
     b8a:	82 81       	ldd	r24, Z+2	; 0x02
     b8c:	88 23       	and	r24, r24
     b8e:	69 f0       	breq	.+26     	; 0xbaa <_ZNK6driver10atmega328p6Serial5printEPKc+0x28>

    // Transmit each character of the string one by one.
    for (const char* it{message}; *it; ++it)
     b90:	88 81       	ld	r24, Y
     b92:	88 23       	and	r24, r24
     b94:	51 f0       	breq	.+20     	; 0xbaa <_ZNK6driver10atmega328p6Serial5printEPKc+0x28>
    {
        transmitChar(*it);
     b96:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc>
        
        // Send new line characters instead of carriage returns.
        if (Param::CarriageReturn == *it) 
     b9a:	88 81       	ld	r24, Y
     b9c:	8d 30       	cpi	r24, 0x0D	; 13
     b9e:	19 f4       	brne	.+6      	; 0xba6 <_ZNK6driver10atmega328p6Serial5printEPKc+0x24>
        { 
            transmitChar(Param::NewLine); 
     ba0:	8a e0       	ldi	r24, 0x0A	; 10
     ba2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc>
{
    // Terminate the function if serial transmission isn't enabled.
    if (!myEnabled) { return; }

    // Transmit each character of the string one by one.
    for (const char* it{message}; *it; ++it)
     ba6:	21 96       	adiw	r28, 0x01	; 1
     ba8:	f3 cf       	rjmp	.-26     	; 0xb90 <_ZNK6driver10atmega328p6Serial5printEPKc+0xe>
        if (Param::CarriageReturn == *it) 
        { 
            transmitChar(Param::NewLine); 
        }
    }
}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	08 95       	ret

00000bb0 <_ZN6driver10atmega328p6SerialD1Ev>:
     bb0:	20 eb       	ldi	r18, 0xB0	; 176
     bb2:	31 e0       	ldi	r19, 0x01	; 1
     bb4:	fc 01       	movw	r30, r24
     bb6:	31 83       	std	Z+1, r19	; 0x01
     bb8:	20 83       	st	Z, r18
     bba:	08 95       	ret

00000bbc <_ZN6driver10atmega328p6SerialD0Ev>:
     bbc:	20 eb       	ldi	r18, 0xB0	; 176
     bbe:	31 e0       	ldi	r19, 0x01	; 1
     bc0:	fc 01       	movw	r30, r24
     bc2:	31 83       	std	Z+1, r19	; 0x01
     bc4:	20 83       	st	Z, r18
    Serial() noexcept;

    /**
     * @brief Delete the serial device.
     */
    ~Serial() noexcept override = default;
     bc6:	63 e0       	ldi	r22, 0x03	; 3
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZdlPvj>
     bce:	08 95       	ret

00000bd0 <_ZN6driver10atmega328p6SerialC1Ev>:
// -----------------------------------------------------------------------------
void Serial::setEnabled(const bool enable) noexcept { myEnabled = enable; }

// -----------------------------------------------------------------------------
Serial::Serial() noexcept 
    : myEnabled{false}
     bd0:	22 ec       	ldi	r18, 0xC2	; 194
     bd2:	31 e0       	ldi	r19, 0x01	; 1
     bd4:	fc 01       	movw	r30, r24
     bd6:	31 83       	std	Z+1, r19	; 0x01
     bd8:	20 83       	st	Z, r18
     bda:	12 82       	std	Z+2, r1	; 0x02
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     bdc:	e1 ec       	ldi	r30, 0xC1	; 193
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	88 60       	ori	r24, 0x08	; 8
     be4:	80 83       	st	Z, r24
     be6:	e2 ec       	ldi	r30, 0xC2	; 194
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	82 60       	ori	r24, 0x02	; 2
     bee:	80 83       	st	Z, r24
     bf0:	80 81       	ld	r24, Z
     bf2:	84 60       	ori	r24, 0x04	; 4
     bf4:	80 83       	st	Z, r24

    // Set the data size to eight bits per byte.
    utils::set(UCSR0C, UCSZ00, UCSZ01);

    // Set the baud rate to 9600 kbps.
    UBRR0 = baudRateValue;
     bf6:	87 e6       	ldi	r24, 0x67	; 103
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     bfe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

    // Send carriage return to align the first message left.
    UDR0 = Param::CarriageReturn;
     c02:	8d e0       	ldi	r24, 0x0D	; 13
     c04:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     c08:	08 95       	ret

00000c0a <_ZN6driver10atmega328p6Serial11getInstanceEv>:

// -----------------------------------------------------------------------------
SerialInterface& Serial::getInstance() noexcept
{ 
    // Create and initialize the singleton serial instance (once only).
    static Serial myInstance{};
     c0a:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <_ZGVZN6driver10atmega328p6Serial11getInstanceEvE10myInstance>
     c0e:	81 11       	cpse	r24, r1
     c10:	12 c0       	rjmp	.+36     	; 0xc36 <_ZN6driver10atmega328p6Serial11getInstanceEv+0x2c>
     c12:	8f ed       	ldi	r24, 0xDF	; 223
     c14:	93 e0       	ldi	r25, 0x03	; 3
     c16:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <__cxa_guard_acquire>
     c1a:	89 2b       	or	r24, r25
     c1c:	61 f0       	breq	.+24     	; 0xc36 <_ZN6driver10atmega328p6Serial11getInstanceEv+0x2c>
     c1e:	8c ed       	ldi	r24, 0xDC	; 220
     c20:	93 e0       	ldi	r25, 0x03	; 3
     c22:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN6driver10atmega328p6SerialC1Ev>
     c26:	8f ed       	ldi	r24, 0xDF	; 223
     c28:	93 e0       	ldi	r25, 0x03	; 3
     c2a:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__cxa_guard_release>
     c2e:	8d ea       	ldi	r24, 0xAD	; 173
     c30:	95 e0       	ldi	r25, 0x05	; 5
     c32:	0e 94 77 00 	call	0xee	; 0xee <atexit>

    // Return a reference to the singleton serial instance, cast to the corresponding interface.
    return myInstance; 
}
     c36:	8c ed       	ldi	r24, 0xDC	; 220
     c38:	93 e0       	ldi	r25, 0x03	; 3
     c3a:	08 95       	ret

00000c3c <_ZNK6driver10atmega328p5Timer13isInitializedEv>:
     c3c:	21 e0       	ldi	r18, 0x01	; 1
     c3e:	fc 01       	movw	r30, r24
     c40:	82 81       	ldd	r24, Z+2	; 0x02
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	89 2b       	or	r24, r25
     c46:	09 f4       	brne	.+2      	; 0xc4a <_ZNK6driver10atmega328p5Timer13isInitializedEv+0xe>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	82 2f       	mov	r24, r18
     c4c:	08 95       	ret

00000c4e <_ZNK6driver10atmega328p5Timer9isEnabledEv>:
     c4e:	fc 01       	movw	r30, r24
     c50:	80 85       	ldd	r24, Z+8	; 0x08
     c52:	08 95       	ret

00000c54 <_ZN6driver10atmega328p5Timer11hasTimedOutEv>:
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	fc 01       	movw	r30, r24
     c5a:	90 85       	ldd	r25, Z+8	; 0x08
     c5c:	99 23       	and	r25, r25
     c5e:	81 f0       	breq	.+32     	; 0xc80 <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x2c>
     c60:	a2 81       	ldd	r26, Z+2	; 0x02
     c62:	b3 81       	ldd	r27, Z+3	; 0x03
     c64:	0d 91       	ld	r16, X+
     c66:	1d 91       	ld	r17, X+
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	44 81       	ldd	r20, Z+4	; 0x04
     c6e:	55 81       	ldd	r21, Z+5	; 0x05
     c70:	66 81       	ldd	r22, Z+6	; 0x06
     c72:	77 81       	ldd	r23, Z+7	; 0x07
     c74:	04 17       	cp	r16, r20
     c76:	15 07       	cpc	r17, r21
     c78:	26 07       	cpc	r18, r22
     c7a:	37 07       	cpc	r19, r23
     c7c:	18 f4       	brcc	.+6      	; 0xc84 <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x30>
     c7e:	03 c0       	rjmp	.+6      	; 0xc86 <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x32>
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x32>
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	91 11       	cpse	r25, r1
     c88:	09 c0       	rjmp	.+18     	; 0xc9c <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x48>
     c8a:	02 80       	ldd	r0, Z+2	; 0x02
     c8c:	f3 81       	ldd	r31, Z+3	; 0x03
     c8e:	e0 2d       	mov	r30, r0
     c90:	10 82       	st	Z, r1
     c92:	11 82       	std	Z+1, r1	; 0x01
     c94:	12 82       	std	Z+2, r1	; 0x02
     c96:	13 82       	std	Z+3, r1	; 0x03
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	01 c0       	rjmp	.+2      	; 0xc9e <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x4a>
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	08 95       	ret

00000ca4 <_ZNK6driver10atmega328p5Timer10timeout_msEv>:
     ca4:	fc 01       	movw	r30, r24
     ca6:	64 81       	ldd	r22, Z+4	; 0x04
     ca8:	75 81       	ldd	r23, Z+5	; 0x05
     caa:	86 81       	ldd	r24, Z+6	; 0x06
     cac:	97 81       	ldd	r25, Z+7	; 0x07
     cae:	0e 94 17 14 	call	0x282e	; 0x282e <__floatunsisf>
     cb2:	2f e6       	ldi	r18, 0x6F	; 111
     cb4:	32 e1       	ldi	r19, 0x12	; 18
     cb6:	43 e0       	ldi	r20, 0x03	; 3
     cb8:	5e e3       	ldi	r21, 0x3E	; 62
     cba:	0e 94 ce 14 	call	0x299c	; 0x299c <__mulsf3>
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	5f e3       	ldi	r21, 0x3F	; 63
     cc6:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__addsf3>
     cca:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__fixunssfsi>
     cce:	08 95       	ret

00000cd0 <_ZN6driver10atmega328p5Timer4stopEv>:
     cd0:	dc 01       	movw	r26, r24
     cd2:	12 96       	adiw	r26, 0x02	; 2
     cd4:	ed 91       	ld	r30, X+
     cd6:	fc 91       	ld	r31, X
     cd8:	13 97       	sbiw	r26, 0x03	; 3
     cda:	04 80       	ldd	r0, Z+4	; 0x04
     cdc:	f5 81       	ldd	r31, Z+5	; 0x05
     cde:	e0 2d       	mov	r30, r0
     ce0:	10 82       	st	Z, r1
     ce2:	18 96       	adiw	r26, 0x08	; 8
     ce4:	1c 92       	st	X, r1
     ce6:	08 95       	ret

00000ce8 <_ZN6driver10atmega328p5Timer13setTimeout_msEm>:
     ce8:	cf 92       	push	r12
     cea:	df 92       	push	r13
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	ec 01       	movw	r28, r24
     cf6:	6a 01       	movw	r12, r20
     cf8:	7b 01       	movw	r14, r22
     cfa:	45 2b       	or	r20, r21
     cfc:	46 2b       	or	r20, r22
     cfe:	47 2b       	or	r20, r23
     d00:	11 f4       	brne	.+4      	; 0xd06 <_ZN6driver10atmega328p5Timer13setTimeout_msEm+0x1e>
     d02:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_ZN6driver10atmega328p5Timer4stopEv>
     d06:	c1 14       	cp	r12, r1
     d08:	d1 04       	cpc	r13, r1
     d0a:	e1 04       	cpc	r14, r1
     d0c:	f1 04       	cpc	r15, r1
     d0e:	99 f0       	breq	.+38     	; 0xd36 <_ZN6driver10atmega328p5Timer13setTimeout_msEm+0x4e>
     d10:	c7 01       	movw	r24, r14
     d12:	b6 01       	movw	r22, r12
     d14:	0e 94 17 14 	call	0x282e	; 0x282e <__floatunsisf>
     d18:	2f e6       	ldi	r18, 0x6F	; 111
     d1a:	32 e1       	ldi	r19, 0x12	; 18
     d1c:	43 e0       	ldi	r20, 0x03	; 3
     d1e:	5e e3       	ldi	r21, 0x3E	; 62
     d20:	0e 94 6f 13 	call	0x26de	; 0x26de <__divsf3>
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	5f e3       	ldi	r21, 0x3F	; 63
     d2c:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__addsf3>
     d30:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__fixunssfsi>
     d34:	03 c0       	rjmp	.+6      	; 0xd3c <_ZN6driver10atmega328p5Timer13setTimeout_msEm+0x54>
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	cb 01       	movw	r24, r22
     d3c:	6c 83       	std	Y+4, r22	; 0x04
     d3e:	7d 83       	std	Y+5, r23	; 0x05
     d40:	8e 83       	std	Y+6, r24	; 0x06
     d42:	9f 83       	std	Y+7, r25	; 0x07
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	df 90       	pop	r13
     d4e:	cf 90       	pop	r12
     d50:	08 95       	ret

00000d52 <_ZN6driver10atmega328p5Timer5startEv>:
     d52:	0f 93       	push	r16
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	fc 01       	movw	r30, r24
     d5a:	44 81       	ldd	r20, Z+4	; 0x04
     d5c:	55 81       	ldd	r21, Z+5	; 0x05
     d5e:	66 81       	ldd	r22, Z+6	; 0x06
     d60:	77 81       	ldd	r23, Z+7	; 0x07
     d62:	45 2b       	or	r20, r21
     d64:	46 2b       	or	r20, r22
     d66:	47 2b       	or	r20, r23
     d68:	c1 f0       	breq	.+48     	; 0xd9a <_ZN6driver10atmega328p5Timer5startEv+0x48>
     d6a:	ec 01       	movw	r28, r24
     d6c:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <_ZN5utils21globalInterruptEnableEv>
     d70:	ea 81       	ldd	r30, Y+2	; 0x02
     d72:	fb 81       	ldd	r31, Y+3	; 0x03
     d74:	06 81       	ldd	r16, Z+6	; 0x06
     d76:	04 80       	ldd	r0, Z+4	; 0x04
     d78:	f5 81       	ldd	r31, Z+5	; 0x05
     d7a:	e0 2d       	mov	r30, r0
     d7c:	a0 81       	ld	r26, Z
     d7e:	21 e0       	ldi	r18, 0x01	; 1
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__ashldi3>
     d92:	2a 2b       	or	r18, r26
     d94:	20 83       	st	Z, r18
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	88 87       	std	Y+8, r24	; 0x08
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	0f 91       	pop	r16
     da0:	08 95       	ret

00000da2 <_ZN6driver10atmega328p5Timer6toggleEv>:
     da2:	fc 01       	movw	r30, r24
     da4:	20 85       	ldd	r18, Z+8	; 0x08
     da6:	22 23       	and	r18, r18
     da8:	19 f0       	breq	.+6      	; 0xdb0 <_ZN6driver10atmega328p5Timer6toggleEv+0xe>
     daa:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_ZN6driver10atmega328p5Timer4stopEv>
     dae:	08 95       	ret
     db0:	0e 94 a9 06 	call	0xd52	; 0xd52 <_ZN6driver10atmega328p5Timer5startEv>
     db4:	08 95       	ret

00000db6 <_ZN6driver10atmega328p5Timer7restartEv>:
     db6:	dc 01       	movw	r26, r24
     db8:	12 96       	adiw	r26, 0x02	; 2
     dba:	ed 91       	ld	r30, X+
     dbc:	fc 91       	ld	r31, X
     dbe:	13 97       	sbiw	r26, 0x03	; 3
     dc0:	10 82       	st	Z, r1
     dc2:	11 82       	std	Z+1, r1	; 0x01
     dc4:	12 82       	std	Z+2, r1	; 0x02
     dc6:	13 82       	std	Z+3, r1	; 0x03
     dc8:	0e 94 a9 06 	call	0xd52	; 0xd52 <_ZN6driver10atmega328p5Timer5startEv>
     dcc:	08 95       	ret

00000dce <_ZN6driver10atmega328p5Timer9incrementEv>:
     dce:	fc 01       	movw	r30, r24
     dd0:	80 85       	ldd	r24, Z+8	; 0x08
     dd2:	88 23       	and	r24, r24
     dd4:	79 f0       	breq	.+30     	; 0xdf4 <_ZN6driver10atmega328p5Timer9incrementEv+0x26>
     dd6:	02 80       	ldd	r0, Z+2	; 0x02
     dd8:	f3 81       	ldd	r31, Z+3	; 0x03
     dda:	e0 2d       	mov	r30, r0
     ddc:	40 81       	ld	r20, Z
     dde:	51 81       	ldd	r21, Z+1	; 0x01
     de0:	62 81       	ldd	r22, Z+2	; 0x02
     de2:	73 81       	ldd	r23, Z+3	; 0x03
     de4:	4f 5f       	subi	r20, 0xFF	; 255
     de6:	5f 4f       	sbci	r21, 0xFF	; 255
     de8:	6f 4f       	sbci	r22, 0xFF	; 255
     dea:	7f 4f       	sbci	r23, 0xFF	; 255
     dec:	40 83       	st	Z, r20
     dee:	51 83       	std	Z+1, r21	; 0x01
     df0:	62 83       	std	Z+2, r22	; 0x02
     df2:	73 83       	std	Z+3, r23	; 0x03
     df4:	08 95       	ret

00000df6 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_>:
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	d9 f0       	breq	.+54     	; 0xe30 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x3a>
     dfa:	dc 01       	movw	r26, r24
     dfc:	14 96       	adiw	r26, 0x04	; 4
     dfe:	ed 91       	ld	r30, X+
     e00:	fc 91       	ld	r31, X
     e02:	15 97       	sbiw	r26, 0x05	; 5
     e04:	10 82       	st	Z, r1
     e06:	17 96       	adiw	r26, 0x07	; 7
     e08:	2c 91       	ld	r18, X
     e0a:	21 30       	cpi	r18, 0x01	; 1
     e0c:	31 f0       	breq	.+12     	; 0xe1a <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x24>
     e0e:	18 f0       	brcs	.+6      	; 0xe16 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x20>
     e10:	22 30       	cpi	r18, 0x02	; 2
     e12:	51 f0       	breq	.+20     	; 0xe28 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x32>
     e14:	0b c0       	rjmp	.+22     	; 0xe2c <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x36>
     e16:	15 bc       	out	0x25, r1	; 37
     e18:	09 c0       	rjmp	.+18     	; 0xe2c <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x36>
     e1a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e1e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     e22:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x36>
     e28:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     e2c:	0e 94 30 16 	call	0x2c60	; 0x2c60 <free>
     e30:	08 95       	ret

00000e32 <_ZN6driver10atmega328p5Timer8Hardware4initEh>:
     e32:	cf 93       	push	r28
     e34:	c8 2f       	mov	r28, r24
     e36:	88 e0       	ldi	r24, 0x08	; 8
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 98 15 	call	0x2b30	; 0x2b30 <malloc>
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	a9 f1       	breq	.+106    	; 0xeac <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x7a>
     e42:	c1 30       	cpi	r28, 0x01	; 1
     e44:	69 f0       	breq	.+26     	; 0xe60 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x2e>
     e46:	18 f0       	brcs	.+6      	; 0xe4e <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x1c>
     e48:	c2 30       	cpi	r28, 0x02	; 2
     e4a:	d9 f0       	breq	.+54     	; 0xe82 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x50>
     e4c:	24 c0       	rjmp	.+72     	; 0xe96 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x64>
     e4e:	2e e6       	ldi	r18, 0x6E	; 110
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	fc 01       	movw	r30, r24
     e54:	35 83       	std	Z+5, r19	; 0x05
     e56:	24 83       	std	Z+4, r18	; 0x04
     e58:	16 82       	std	Z+6, r1	; 0x06
     e5a:	22 e0       	ldi	r18, 0x02	; 2
     e5c:	25 bd       	out	0x25, r18	; 37
     e5e:	20 c0       	rjmp	.+64     	; 0xea0 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x6e>
     e60:	2f e6       	ldi	r18, 0x6F	; 111
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	fc 01       	movw	r30, r24
     e66:	35 83       	std	Z+5, r19	; 0x05
     e68:	24 83       	std	Z+4, r18	; 0x04
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	26 83       	std	Z+6, r18	; 0x06
     e6e:	2a e0       	ldi	r18, 0x0A	; 10
     e70:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	31 e0       	ldi	r19, 0x01	; 1
     e78:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     e7c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     e80:	0f c0       	rjmp	.+30     	; 0xea0 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x6e>
     e82:	20 e7       	ldi	r18, 0x70	; 112
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	fc 01       	movw	r30, r24
     e88:	35 83       	std	Z+5, r19	; 0x05
     e8a:	24 83       	std	Z+4, r18	; 0x04
     e8c:	16 82       	std	Z+6, r1	; 0x06
     e8e:	22 e0       	ldi	r18, 0x02	; 2
     e90:	20 93 b1 00 	sts	0x00B1, r18	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     e94:	05 c0       	rjmp	.+10     	; 0xea0 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x6e>
     e96:	0e 94 30 16 	call	0x2c60	; 0x2c60 <free>
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	06 c0       	rjmp	.+12     	; 0xeac <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x7a>
     ea0:	fc 01       	movw	r30, r24
     ea2:	10 82       	st	Z, r1
     ea4:	11 82       	std	Z+1, r1	; 0x01
     ea6:	12 82       	std	Z+2, r1	; 0x02
     ea8:	13 82       	std	Z+3, r1	; 0x03
     eaa:	c7 83       	std	Z+7, r28	; 0x07
     eac:	cf 91       	pop	r28
     eae:	08 95       	ret

00000eb0 <_ZN6driver10atmega328p5Timer8Hardware7reserveEv>:
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	83 30       	cpi	r24, 0x03	; 3
     eb4:	78 f4       	brcc	.+30     	; 0xed4 <_ZN6driver10atmega328p5Timer8Hardware7reserveEv+0x24>
     eb6:	e8 2f       	mov	r30, r24
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	ee 0f       	add	r30, r30
     ebc:	ff 1f       	adc	r31, r31
     ebe:	e3 51       	subi	r30, 0x13	; 19
     ec0:	fc 4f       	sbci	r31, 0xFC	; 252
     ec2:	20 81       	ld	r18, Z
     ec4:	31 81       	ldd	r19, Z+1	; 0x01
     ec6:	23 2b       	or	r18, r19
     ec8:	19 f4       	brne	.+6      	; 0xed0 <_ZN6driver10atmega328p5Timer8Hardware7reserveEv+0x20>
     eca:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN6driver10atmega328p5Timer8Hardware4initEh>
     ece:	08 95       	ret
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	ef cf       	rjmp	.-34     	; 0xeb2 <_ZN6driver10atmega328p5Timer8Hardware7reserveEv+0x2>
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	08 95       	ret

00000eda <_ZNK6driver10atmega328p5Timer11addCallbackEPFvvE>:
     eda:	dc 01       	movw	r26, r24
     edc:	12 96       	adiw	r26, 0x02	; 2
     ede:	ed 91       	ld	r30, X+
     ee0:	fc 91       	ld	r31, X
     ee2:	13 97       	sbiw	r26, 0x03	; 3
     ee4:	47 81       	ldd	r20, Z+7	; 0x07
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	87 ee       	ldi	r24, 0xE7	; 231
     eea:	93 e0       	ldi	r25, 0x03	; 3
     eec:	0e 94 33 04 	call	0x866	; 0x866 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>
     ef0:	08 95       	ret

00000ef2 <_ZN6driver10atmega328p5TimerC1EmPFvvEb>:
     ef2:	8f 92       	push	r8
     ef4:	9f 92       	push	r9
     ef6:	af 92       	push	r10
     ef8:	bf 92       	push	r11
     efa:	cf 92       	push	r12
     efc:	df 92       	push	r13
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	0f 93       	push	r16
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	ec 01       	movw	r28, r24
     f0a:	4a 01       	movw	r8, r20
     f0c:	5b 01       	movw	r10, r22
     f0e:	79 01       	movw	r14, r18
     f10:	8e ee       	ldi	r24, 0xEE	; 238
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	99 83       	std	Y+1, r25	; 0x01
     f16:	88 83       	st	Y, r24
     f18:	0e 94 58 07 	call	0xeb0	; 0xeb0 <_ZN6driver10atmega328p5Timer8Hardware7reserveEv>
     f1c:	6c 01       	movw	r12, r24
     f1e:	9b 83       	std	Y+3, r25	; 0x03
     f20:	8a 83       	std	Y+2, r24	; 0x02
     f22:	81 14       	cp	r8, r1
     f24:	91 04       	cpc	r9, r1
     f26:	a1 04       	cpc	r10, r1
     f28:	b1 04       	cpc	r11, r1
     f2a:	99 f0       	breq	.+38     	; 0xf52 <_ZN6driver10atmega328p5TimerC1EmPFvvEb+0x60>
     f2c:	c5 01       	movw	r24, r10
     f2e:	b4 01       	movw	r22, r8
     f30:	0e 94 17 14 	call	0x282e	; 0x282e <__floatunsisf>
     f34:	2f e6       	ldi	r18, 0x6F	; 111
     f36:	32 e1       	ldi	r19, 0x12	; 18
     f38:	43 e0       	ldi	r20, 0x03	; 3
     f3a:	5e e3       	ldi	r21, 0x3E	; 62
     f3c:	0e 94 6f 13 	call	0x26de	; 0x26de <__divsf3>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	5f e3       	ldi	r21, 0x3F	; 63
     f48:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__addsf3>
     f4c:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__fixunssfsi>
     f50:	03 c0       	rjmp	.+6      	; 0xf58 <_ZN6driver10atmega328p5TimerC1EmPFvvEb+0x66>
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	cb 01       	movw	r24, r22
     f58:	6c 83       	std	Y+4, r22	; 0x04
     f5a:	7d 83       	std	Y+5, r23	; 0x05
     f5c:	8e 83       	std	Y+6, r24	; 0x06
     f5e:	9f 83       	std	Y+7, r25	; 0x07
     f60:	18 86       	std	Y+8, r1	; 0x08
     f62:	c1 14       	cp	r12, r1
     f64:	d1 04       	cpc	r13, r1
     f66:	99 f0       	breq	.+38     	; 0xf8e <_ZN6driver10atmega328p5TimerC1EmPFvvEb+0x9c>
     f68:	d6 01       	movw	r26, r12
     f6a:	17 96       	adiw	r26, 0x07	; 7
     f6c:	ec 91       	ld	r30, X
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	ee 0f       	add	r30, r30
     f72:	ff 1f       	adc	r31, r31
     f74:	e3 51       	subi	r30, 0x13	; 19
     f76:	fc 4f       	sbci	r31, 0xFC	; 252
     f78:	d1 83       	std	Z+1, r29	; 0x01
     f7a:	c0 83       	st	Z, r28
     f7c:	b7 01       	movw	r22, r14
     f7e:	ce 01       	movw	r24, r28
     f80:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZNK6driver10atmega328p5Timer11addCallbackEPFvvE>
     f84:	00 23       	and	r16, r16
     f86:	19 f0       	breq	.+6      	; 0xf8e <_ZN6driver10atmega328p5TimerC1EmPFvvEb+0x9c>
     f88:	ce 01       	movw	r24, r28
     f8a:	0e 94 a9 06 	call	0xd52	; 0xd52 <_ZN6driver10atmega328p5Timer5startEv>
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	df 90       	pop	r13
     f9a:	cf 90       	pop	r12
     f9c:	bf 90       	pop	r11
     f9e:	af 90       	pop	r10
     fa0:	9f 90       	pop	r9
     fa2:	8f 90       	pop	r8
     fa4:	08 95       	ret

00000fa6 <_ZN9container13CallbackArrayILj3EE6removeEj>:
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	8c 01       	movw	r16, r24
     fb0:	eb 01       	movw	r28, r22
     fb2:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj>
     fb6:	88 23       	and	r24, r24
     fb8:	31 f0       	breq	.+12     	; 0xfc6 <_ZN9container13CallbackArrayILj3EE6removeEj+0x20>
     fba:	cc 0f       	add	r28, r28
     fbc:	dd 1f       	adc	r29, r29
     fbe:	c0 0f       	add	r28, r16
     fc0:	d1 1f       	adc	r29, r17
     fc2:	19 82       	std	Y+1, r1	; 0x01
     fc4:	18 82       	st	Y, r1
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	08 95       	ret

00000fd0 <_ZNK6driver10atmega328p5Timer14removeCallbackEv>:
     fd0:	dc 01       	movw	r26, r24
     fd2:	12 96       	adiw	r26, 0x02	; 2
     fd4:	ed 91       	ld	r30, X+
     fd6:	fc 91       	ld	r31, X
     fd8:	13 97       	sbiw	r26, 0x03	; 3
     fda:	67 81       	ldd	r22, Z+7	; 0x07
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	87 ee       	ldi	r24, 0xE7	; 231
     fe0:	93 e0       	ldi	r25, 0x03	; 3
     fe2:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <_ZN9container13CallbackArrayILj3EE6removeEj>
     fe6:	08 95       	ret

00000fe8 <_ZN6driver10atmega328p5TimerD1Ev>:
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	ec 01       	movw	r28, r24
     fee:	8e ee       	ldi	r24, 0xEE	; 238
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	99 83       	std	Y+1, r25	; 0x01
     ff4:	88 83       	st	Y, r24
     ff6:	ce 01       	movw	r24, r28
     ff8:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <_ZNK6driver10atmega328p5Timer14removeCallbackEv>
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    1000:	dc 01       	movw	r26, r24
    1002:	17 96       	adiw	r26, 0x07	; 7
    1004:	ec 91       	ld	r30, X
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	ee 0f       	add	r30, r30
    100a:	ff 1f       	adc	r31, r31
    100c:	e3 51       	subi	r30, 0x13	; 19
    100e:	fc 4f       	sbci	r31, 0xFC	; 252
    1010:	11 82       	std	Z+1, r1	; 0x01
    1012:	10 82       	st	Z, r1
    1014:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_>
    1018:	84 ed       	ldi	r24, 0xD4	; 212
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	99 83       	std	Y+1, r25	; 0x01
    101e:	88 83       	st	Y, r24
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <_ZN6driver10atmega328p5TimerD0Ev>:
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	ec 01       	movw	r28, r24
    102c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN6driver10atmega328p5TimerD1Ev>
    1030:	69 e0       	ldi	r22, 0x09	; 9
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	ce 01       	movw	r24, r28
    1036:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZdlPvj>
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	08 95       	ret

00001040 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>:
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	83 30       	cpi	r24, 0x03	; 3
    1048:	d0 f4       	brcc	.+52     	; 0x107e <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh+0x3e>
    104a:	e8 2f       	mov	r30, r24
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	ee 0f       	add	r30, r30
    1050:	ff 1f       	adc	r31, r31
    1052:	e3 51       	subi	r30, 0x13	; 19
    1054:	fc 4f       	sbci	r31, 0xFC	; 252
    1056:	00 81       	ld	r16, Z
    1058:	11 81       	ldd	r17, Z+1	; 0x01
    105a:	01 15       	cp	r16, r1
    105c:	11 05       	cpc	r17, r1
    105e:	79 f0       	breq	.+30     	; 0x107e <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh+0x3e>
    1060:	c8 2f       	mov	r28, r24
    1062:	c8 01       	movw	r24, r16
    1064:	0e 94 e7 06 	call	0xdce	; 0xdce <_ZN6driver10atmega328p5Timer9incrementEv>
    1068:	c8 01       	movw	r24, r16
    106a:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN6driver10atmega328p5Timer11hasTimedOutEv>
    106e:	88 23       	and	r24, r24
    1070:	31 f0       	breq	.+12     	; 0x107e <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh+0x3e>
    1072:	6c 2f       	mov	r22, r28
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	87 ee       	ldi	r24, 0xE7	; 231
    1078:	93 e0       	ldi	r25, 0x03	; 3
    107a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_ZN9container13CallbackArrayILj3EE6invokeEj>
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	08 95       	ret

00001086 <__vector_16>:
    1086:	1f 92       	push	r1
    1088:	0f 92       	push	r0
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	0f 92       	push	r0
    108e:	11 24       	eor	r1, r1
    1090:	2f 93       	push	r18
    1092:	3f 93       	push	r19
    1094:	4f 93       	push	r20
    1096:	5f 93       	push	r21
    1098:	6f 93       	push	r22
    109a:	7f 93       	push	r23
    109c:	8f 93       	push	r24
    109e:	9f 93       	push	r25
    10a0:	af 93       	push	r26
    10a2:	bf 93       	push	r27
    10a4:	ef 93       	push	r30
    10a6:	ff 93       	push	r31
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	0e 94 20 08 	call	0x1040	; 0x1040 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>
    10ae:	ff 91       	pop	r31
    10b0:	ef 91       	pop	r30
    10b2:	bf 91       	pop	r27
    10b4:	af 91       	pop	r26
    10b6:	9f 91       	pop	r25
    10b8:	8f 91       	pop	r24
    10ba:	7f 91       	pop	r23
    10bc:	6f 91       	pop	r22
    10be:	5f 91       	pop	r21
    10c0:	4f 91       	pop	r20
    10c2:	3f 91       	pop	r19
    10c4:	2f 91       	pop	r18
    10c6:	0f 90       	pop	r0
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	0f 90       	pop	r0
    10cc:	1f 90       	pop	r1
    10ce:	18 95       	reti

000010d0 <__vector_11>:
    10d0:	1f 92       	push	r1
    10d2:	0f 92       	push	r0
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	0f 92       	push	r0
    10d8:	11 24       	eor	r1, r1
    10da:	2f 93       	push	r18
    10dc:	3f 93       	push	r19
    10de:	4f 93       	push	r20
    10e0:	5f 93       	push	r21
    10e2:	6f 93       	push	r22
    10e4:	7f 93       	push	r23
    10e6:	8f 93       	push	r24
    10e8:	9f 93       	push	r25
    10ea:	af 93       	push	r26
    10ec:	bf 93       	push	r27
    10ee:	ef 93       	push	r30
    10f0:	ff 93       	push	r31
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	0e 94 20 08 	call	0x1040	; 0x1040 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>
    10f8:	ff 91       	pop	r31
    10fa:	ef 91       	pop	r30
    10fc:	bf 91       	pop	r27
    10fe:	af 91       	pop	r26
    1100:	9f 91       	pop	r25
    1102:	8f 91       	pop	r24
    1104:	7f 91       	pop	r23
    1106:	6f 91       	pop	r22
    1108:	5f 91       	pop	r21
    110a:	4f 91       	pop	r20
    110c:	3f 91       	pop	r19
    110e:	2f 91       	pop	r18
    1110:	0f 90       	pop	r0
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	0f 90       	pop	r0
    1116:	1f 90       	pop	r1
    1118:	18 95       	reti

0000111a <__vector_9>:
    111a:	1f 92       	push	r1
    111c:	0f 92       	push	r0
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	0f 92       	push	r0
    1122:	11 24       	eor	r1, r1
    1124:	2f 93       	push	r18
    1126:	3f 93       	push	r19
    1128:	4f 93       	push	r20
    112a:	5f 93       	push	r21
    112c:	6f 93       	push	r22
    112e:	7f 93       	push	r23
    1130:	8f 93       	push	r24
    1132:	9f 93       	push	r25
    1134:	af 93       	push	r26
    1136:	bf 93       	push	r27
    1138:	ef 93       	push	r30
    113a:	ff 93       	push	r31
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	0e 94 20 08 	call	0x1040	; 0x1040 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>
    1142:	ff 91       	pop	r31
    1144:	ef 91       	pop	r30
    1146:	bf 91       	pop	r27
    1148:	af 91       	pop	r26
    114a:	9f 91       	pop	r25
    114c:	8f 91       	pop	r24
    114e:	7f 91       	pop	r23
    1150:	6f 91       	pop	r22
    1152:	5f 91       	pop	r21
    1154:	4f 91       	pop	r20
    1156:	3f 91       	pop	r19
    1158:	2f 91       	pop	r18
    115a:	0f 90       	pop	r0
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	0f 90       	pop	r0
    1160:	1f 90       	pop	r1
    1162:	18 95       	reti

00001164 <_Z41__static_initialization_and_destruction_0ii>:

// -----------------------------------------------------------------------------
ISR (TIMER2_OVF_vect) { invokeCallback(TimerIndex::timer2); }

} // namespace atmega328p
} // namespace driver
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	39 f4       	brne	.+14     	; 0x1176 <_Z41__static_initialization_and_destruction_0ii+0x12>
    1168:	6f 3f       	cpi	r22, 0xFF	; 255
    116a:	7f 4f       	sbci	r23, 0xFF	; 255
    116c:	21 f4       	brne	.+8      	; 0x1176 <_Z41__static_initialization_and_destruction_0ii+0x12>

/** Array holding pointers to TimerParam::timers. */
Timer* TimerParam::TimerParam::timers[TimerParam::circuitCount]{};  

/** Array holding pointers to callbacks. */
CallbackArray<TimerParam::circuitCount> TimerParam::callbacks{};
    116e:	87 ee       	ldi	r24, 0xE7	; 231
    1170:	93 e0       	ldi	r25, 0x03	; 3
    1172:	0e 94 2a 04 	call	0x854	; 0x854 <_ZN9container13CallbackArrayILj3EEC1Ev>
    1176:	08 95       	ret

00001178 <_GLOBAL__sub_I__ZN6driver10atmega328p5TimerC2EmPFvvEb>:

// -----------------------------------------------------------------------------
ISR (TIMER2_OVF_vect) { invokeCallback(TimerIndex::timer2); }

} // namespace atmega328p
} // namespace driver
    1178:	6f ef       	ldi	r22, 0xFF	; 255
    117a:	7f ef       	ldi	r23, 0xFF	; 255
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 b2 08 	call	0x1164	; 0x1164 <_Z41__static_initialization_and_destruction_0ii>
    1184:	08 95       	ret

00001186 <_GLOBAL__sub_D__ZN6driver10atmega328p5TimerC2EmPFvvEb>:
    1186:	6f ef       	ldi	r22, 0xFF	; 255
    1188:	7f ef       	ldi	r23, 0xFF	; 255
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 b2 08 	call	0x1164	; 0x1164 <_Z41__static_initialization_and_destruction_0ii>
    1192:	08 95       	ret

00001194 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE>:
}
    
// -----------------------------------------------------------------------------
uint8_t timeoutValue(const Watchdog::Timeout timeout) noexcept
{
    switch (timeout)
    1194:	81 15       	cp	r24, r1
    1196:	21 e0       	ldi	r18, 0x01	; 1
    1198:	92 07       	cpc	r25, r18
    119a:	51 f1       	breq	.+84     	; 0x11f0 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x5c>
    119c:	70 f4       	brcc	.+28     	; 0x11ba <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x26>
    119e:	80 32       	cpi	r24, 0x20	; 32
    11a0:	91 05       	cpc	r25, r1
    11a2:	a1 f1       	breq	.+104    	; 0x120c <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x78>
    11a4:	18 f4       	brcc	.+6      	; 0x11ac <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x18>
    11a6:	40 97       	sbiw	r24, 0x10	; 16
    11a8:	e9 f0       	breq	.+58     	; 0x11e4 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x50>
    11aa:	2e c0       	rjmp	.+92     	; 0x1208 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x74>
    11ac:	80 34       	cpi	r24, 0x40	; 64
    11ae:	91 05       	cpc	r25, r1
    11b0:	d9 f0       	breq	.+54     	; 0x11e8 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x54>
    11b2:	80 38       	cpi	r24, 0x80	; 128
    11b4:	91 05       	cpc	r25, r1
    11b6:	d1 f0       	breq	.+52     	; 0x11ec <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x58>
    11b8:	27 c0       	rjmp	.+78     	; 0x1208 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x74>
    11ba:	81 15       	cp	r24, r1
    11bc:	28 e0       	ldi	r18, 0x08	; 8
    11be:	92 07       	cpc	r25, r18
    11c0:	e9 f0       	breq	.+58     	; 0x11fc <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x68>
    11c2:	40 f4       	brcc	.+16     	; 0x11d4 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x40>
    11c4:	81 15       	cp	r24, r1
    11c6:	22 e0       	ldi	r18, 0x02	; 2
    11c8:	92 07       	cpc	r25, r18
    11ca:	a1 f0       	breq	.+40     	; 0x11f4 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x60>
    11cc:	81 15       	cp	r24, r1
    11ce:	94 40       	sbci	r25, 0x04	; 4
    11d0:	99 f0       	breq	.+38     	; 0x11f8 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x64>
    11d2:	1a c0       	rjmp	.+52     	; 0x1208 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x74>
    11d4:	81 15       	cp	r24, r1
    11d6:	20 e1       	ldi	r18, 0x10	; 16
    11d8:	92 07       	cpc	r25, r18
    11da:	91 f0       	breq	.+36     	; 0x1200 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x6c>
    11dc:	81 15       	cp	r24, r1
    11de:	90 42       	sbci	r25, 0x20	; 32
    11e0:	89 f0       	breq	.+34     	; 0x1204 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x70>
    11e2:	12 c0       	rjmp	.+36     	; 0x1208 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x74>
    {
        case Watchdog::Timeout::Duration16ms:
            return 0U;
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	08 95       	ret
        case Watchdog::Timeout::Duration32ms:
            return (1U << WDP0);
        case Watchdog::Timeout::Duration64ms:
            return (1U << WDP1);
    11e8:	82 e0       	ldi	r24, 0x02	; 2
    11ea:	08 95       	ret
        case Watchdog::Timeout::Duration128ms:
            return (1U << WDP1) | (1U << WDP0);
    11ec:	83 e0       	ldi	r24, 0x03	; 3
    11ee:	08 95       	ret
        case Watchdog::Timeout::Duration256ms:
            return (1U << WDP2);
    11f0:	84 e0       	ldi	r24, 0x04	; 4
    11f2:	08 95       	ret
        case Watchdog::Timeout::Duration512ms:
            return (1U << WDP2) | (1U << WDP0);
    11f4:	85 e0       	ldi	r24, 0x05	; 5
    11f6:	08 95       	ret
        case Watchdog::Timeout::Duration1024ms:
            return (1U << WDP2) | (1U << WDP1);
    11f8:	86 e0       	ldi	r24, 0x06	; 6
    11fa:	08 95       	ret
        case Watchdog::Timeout::Duration2048ms:
            return (1U << WDP2) | (1U << WDP1) | (1U << WDP0);
    11fc:	87 e0       	ldi	r24, 0x07	; 7
    11fe:	08 95       	ret
        case Watchdog::Timeout::Duration4096ms:
            return (1U << WDP3);
    1200:	80 e2       	ldi	r24, 0x20	; 32
    1202:	08 95       	ret
        case Watchdog::Timeout::Duration8192ms:
            return (1U << WDP3) | (1U << WDP0);
    1204:	81 e2       	ldi	r24, 0x21	; 33
    1206:	08 95       	ret
        default:
            return 0xFFU;
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	08 95       	ret
    switch (timeout)
    {
        case Watchdog::Timeout::Duration16ms:
            return 0U;
        case Watchdog::Timeout::Duration32ms:
            return (1U << WDP0);
    120c:	81 e0       	ldi	r24, 0x01	; 1
        case Watchdog::Timeout::Duration8192ms:
            return (1U << WDP3) | (1U << WDP0);
        default:
            return 0xFFU;
    }
}
    120e:	08 95       	ret

00001210 <__tcf_0>:
{
public:
    /**
     * @brief Delete the watchdog timer.
     */
    virtual ~WatchdogInterface() noexcept = default;
    1210:	88 e0       	ldi	r24, 0x08	; 8
    1212:	92 e0       	ldi	r25, 0x02	; 2
    1214:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <_ZZN6driver10atmega328p8Watchdog11getInstanceEvE10myInstance+0x1>
    1218:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <_ZZN6driver10atmega328p8Watchdog11getInstanceEvE10myInstance>
    121c:	08 95       	ret

0000121e <_ZNK6driver10atmega328p8Watchdog13isInitializedEv>:
    // Return a reference to the singleton watchdog instance, cast to the corresponding interface.
    return myInstance; 
}

// -----------------------------------------------------------------------------
bool Watchdog::isInitialized() const noexcept { return true; }
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	08 95       	ret

00001222 <_ZNK6driver10atmega328p8Watchdog9isEnabledEv>:

// -----------------------------------------------------------------------------
bool Watchdog::isEnabled() const noexcept { return myEnabled; }
    1222:	fc 01       	movw	r30, r24
    1224:	84 81       	ldd	r24, Z+4	; 0x04
    1226:	08 95       	ret

00001228 <_ZNK6driver10atmega328p8Watchdog9timeoutMsEv>:
    // Re-enable interrupts once the write sequence is complete.
    utils::globalInterruptEnable();
}

// -----------------------------------------------------------------------------
uint16_t Watchdog::timeoutMs() const noexcept { return static_cast<uint16_t>(myTimeout); }
    1228:	fc 01       	movw	r30, r24
    122a:	82 81       	ldd	r24, Z+2	; 0x02
    122c:	93 81       	ldd	r25, Z+3	; 0x03
    122e:	08 95       	ret

00001230 <_ZN6driver10atmega328p8WatchdogD1Ev>:
    1230:	28 e0       	ldi	r18, 0x08	; 8
    1232:	32 e0       	ldi	r19, 0x02	; 2
    1234:	fc 01       	movw	r30, r24
    1236:	31 83       	std	Z+1, r19	; 0x01
    1238:	20 83       	st	Z, r18
    123a:	08 95       	ret

0000123c <_ZN6driver10atmega328p8WatchdogD0Ev>:
    123c:	28 e0       	ldi	r18, 0x08	; 8
    123e:	32 e0       	ldi	r19, 0x02	; 2
    1240:	fc 01       	movw	r30, r24
    1242:	31 83       	std	Z+1, r19	; 0x01
    1244:	20 83       	st	Z, r18
    Watchdog& operator=(const Watchdog&) = delete; // No copy assignment.
    Watchdog& operator=(Watchdog&&)      = delete; // No move assignment.

private:
    Watchdog() noexcept;
    ~Watchdog() noexcept override = default;
    1246:	65 e0       	ldi	r22, 0x05	; 5
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZdlPvj>
    124e:	08 95       	ret

00001250 <_ZN6driver10atmega328p8Watchdog5resetEv>:

// -----------------------------------------------------------------------------
void Watchdog::reset() noexcept 
{ 
    // Disable interrupts during the reset process.
    utils::globalInterruptDisable();
    1250:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN5utils22globalInterruptDisableEv>

    // Reset the watchdog and clear the corresponding reset flag.
    asm("WDR");
    1254:	a8 95       	wdr
// -----------------------------------------------------------------------------
template <typename T>
constexpr void clear(volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg &= ~(1ULL << bit);
    1256:	84 b7       	in	r24, 0x34	; 52
    1258:	87 7f       	andi	r24, 0xF7	; 247
    125a:	84 bf       	out	0x34, r24	; 52
    utils::clear(MCUSR, WDRF);

    // Re-enable interrupts once the reset process is complete.
    utils::globalInterruptEnable();
    125c:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <_ZN5utils21globalInterruptEnableEv>
    1260:	08 95       	ret

00001262 <_ZN6driver10atmega328p8Watchdog10setEnabledEb>:
// -----------------------------------------------------------------------------
bool Watchdog::isEnabled() const noexcept { return myEnabled; }

// -----------------------------------------------------------------------------
void Watchdog::setEnabled(const bool enable) noexcept
{
    1262:	cf 93       	push	r28
    1264:	c6 2f       	mov	r28, r22
    // Reset the watchdog to prevent a timeout during the enablement update.
    reset();
    1266:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN6driver10atmega328p8Watchdog5resetEv>

    // Update the enablement status, disable interrupts during the write sequence.
    utils::globalInterruptDisable();
    126a:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN5utils22globalInterruptDisableEv>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
    126e:	e0 e6       	ldi	r30, 0x60	; 96
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	80 61       	ori	r24, 0x10	; 16
    1276:	80 83       	st	Z, r24
    1278:	80 81       	ld	r24, Z
    127a:	88 60       	ori	r24, 0x08	; 8
    127c:	80 83       	st	Z, r24
    utils::set(WDTCSR, WDCE, WDE);
    if (enable) { utils::set(WDTCSR, WDE); }
    127e:	cc 23       	and	r28, r28
    1280:	21 f0       	breq	.+8      	; 0x128a <_ZN6driver10atmega328p8Watchdog10setEnabledEb+0x28>
    1282:	80 81       	ld	r24, Z
    1284:	88 60       	ori	r24, 0x08	; 8
    1286:	80 83       	st	Z, r24
    1288:	05 c0       	rjmp	.+10     	; 0x1294 <_ZN6driver10atmega328p8Watchdog10setEnabledEb+0x32>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void clear(volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg &= ~(1ULL << bit);
    128a:	e0 e6       	ldi	r30, 0x60	; 96
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	87 7f       	andi	r24, 0xF7	; 247
    1292:	80 83       	st	Z, r24
    else { utils::clear(WDTCSR, WDE); }

    // Re-enable interrupts once the write sequence is complete.
    utils::globalInterruptEnable();
    1294:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <_ZN5utils21globalInterruptEnableEv>
}
    1298:	cf 91       	pop	r28
    129a:	08 95       	ret

0000129c <_ZN6driver10atmega328p8Watchdog10setTimeoutENS1_7TimeoutE>:
    utils::globalInterruptEnable();
}

// -----------------------------------------------------------------------------
bool Watchdog::setTimeout(const Timeout timeout) noexcept
{
    129c:	ff 92       	push	r15
    129e:	0f 93       	push	r16
    12a0:	1f 93       	push	r17
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    // Return false if the timeout is invalid.
    if (!isTimeoutValid(timeout)) { return false; }
    12a6:	61 30       	cpi	r22, 0x01	; 1
    12a8:	20 e2       	ldi	r18, 0x20	; 32
    12aa:	72 07       	cpc	r23, r18
    12ac:	b8 f4       	brcc	.+46     	; 0x12dc <_ZN6driver10atmega328p8Watchdog10setTimeoutENS1_7TimeoutE+0x40>
    12ae:	eb 01       	movw	r28, r22
    12b0:	8c 01       	movw	r16, r24

    // Calculate the timeout value before the timed write sequence.
    const auto value{timeoutValue(timeout)};
    12b2:	cb 01       	movw	r24, r22
    12b4:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE>
    12b8:	f8 2e       	mov	r15, r24

    // Update the watchdog timeout, disable interrupts during the write sequence.
    utils::globalInterruptDisable();
    12ba:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN5utils22globalInterruptDisableEv>
    WDTCSR |= (1UL << WDCE) | (1UL << WDE);
    12be:	e0 e6       	ldi	r30, 0x60	; 96
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	88 61       	ori	r24, 0x18	; 24
    12c6:	80 83       	st	Z, r24
    WDTCSR = value;
    12c8:	f0 82       	st	Z, r15
    utils::globalInterruptEnable();
    12ca:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <_ZN5utils21globalInterruptEnableEv>

    // Re-enable interrupts once the write sequence is complete.
    utils::globalInterruptEnable();
    12ce:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <_ZN5utils21globalInterruptEnableEv>

    // Store the new timeout and return true to indicate success.
    myTimeout = timeout;
    12d2:	f8 01       	movw	r30, r16
    12d4:	d3 83       	std	Z+3, r29	; 0x03
    12d6:	c2 83       	std	Z+2, r28	; 0x02
    return true;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	01 c0       	rjmp	.+2      	; 0x12de <_ZN6driver10atmega328p8Watchdog10setTimeoutENS1_7TimeoutE+0x42>

// -----------------------------------------------------------------------------
bool Watchdog::setTimeout(const Timeout timeout) noexcept
{
    // Return false if the timeout is invalid.
    if (!isTimeoutValid(timeout)) { return false; }
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    utils::globalInterruptEnable();

    // Store the new timeout and return true to indicate success.
    myTimeout = timeout;
    return true;
} 
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	1f 91       	pop	r17
    12e4:	0f 91       	pop	r16
    12e6:	ff 90       	pop	r15
    12e8:	08 95       	ret

000012ea <_ZN6driver10atmega328p8WatchdogC1Ev>:

// -----------------------------------------------------------------------------
Watchdog::Watchdog() noexcept
    : myTimeout{}
    , myEnabled{false}
    12ea:	2a e1       	ldi	r18, 0x1A	; 26
    12ec:	32 e0       	ldi	r19, 0x02	; 2
    12ee:	fc 01       	movw	r30, r24
    12f0:	31 83       	std	Z+1, r19	; 0x01
    12f2:	20 83       	st	Z, r18
    12f4:	13 82       	std	Z+3, r1	; 0x03
    12f6:	12 82       	std	Z+2, r1	; 0x02
    12f8:	14 82       	std	Z+4, r1	; 0x04
{
    // Set the default timeout.
    setTimeout(WatchdogParam::DefaultTimeout);
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	74 e0       	ldi	r23, 0x04	; 4
    12fe:	0e 94 4e 09 	call	0x129c	; 0x129c <_ZN6driver10atmega328p8Watchdog10setTimeoutENS1_7TimeoutE>
    1302:	08 95       	ret

00001304 <_ZN6driver10atmega328p8Watchdog11getInstanceEv>:

// -----------------------------------------------------------------------------
WatchdogInterface& Watchdog::getInstance() noexcept
{
    // Create and initialize the singleton watchdog timer instance (once only).
    static Watchdog myInstance{};
    1304:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <_ZGVZN6driver10atmega328p8Watchdog11getInstanceEvE10myInstance>
    1308:	81 11       	cpse	r24, r1
    130a:	12 c0       	rjmp	.+36     	; 0x1330 <_ZN6driver10atmega328p8Watchdog11getInstanceEv+0x2c>
    130c:	88 ef       	ldi	r24, 0xF8	; 248
    130e:	93 e0       	ldi	r25, 0x03	; 3
    1310:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <__cxa_guard_acquire>
    1314:	89 2b       	or	r24, r25
    1316:	61 f0       	breq	.+24     	; 0x1330 <_ZN6driver10atmega328p8Watchdog11getInstanceEv+0x2c>
    1318:	83 ef       	ldi	r24, 0xF3	; 243
    131a:	93 e0       	ldi	r25, 0x03	; 3
    131c:	0e 94 75 09 	call	0x12ea	; 0x12ea <_ZN6driver10atmega328p8WatchdogC1Ev>
    1320:	88 ef       	ldi	r24, 0xF8	; 248
    1322:	93 e0       	ldi	r25, 0x03	; 3
    1324:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__cxa_guard_release>
    1328:	88 e0       	ldi	r24, 0x08	; 8
    132a:	99 e0       	ldi	r25, 0x09	; 9
    132c:	0e 94 77 00 	call	0xee	; 0xee <atexit>

    // Return a reference to the singleton watchdog instance, cast to the corresponding interface.
    return myInstance; 
}
    1330:	83 ef       	ldi	r24, 0xF3	; 243
    1332:	93 e0       	ldi	r25, 0x03	; 3
    1334:	08 95       	ret

00001336 <_ZN12_GLOBAL__N_120predictTimerCallbackEv>:
/**
 * @brief Callback for the toggle timer.
 * 
 *        This callback is invoked whenever the toggle timer elapses.
 */
void predictTimerCallback() noexcept { mySys->handlepredictTimerInterrupt(); }
    1336:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_ZN12_GLOBAL__N_15mySysE>
    133a:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <_ZN12_GLOBAL__N_15mySysE+0x1>
    133e:	0e 94 42 12 	call	0x2484	; 0x2484 <_ZN6target6System27handlepredictTimerInterruptEv>
    1342:	08 95       	ret

00001344 <_ZN12_GLOBAL__N_121debounceTimerCallbackEv>:
/**
 * @brief Callback for the debounce timer.
 * 
 *        This callback is invoked whenever the debounce timer elapses.
 */
void debounceTimerCallback() noexcept { mySys->handleDebounceTimerInterrupt(); }
    1344:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_ZN12_GLOBAL__N_15mySysE>
    1348:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <_ZN12_GLOBAL__N_15mySysE+0x1>
    134c:	0e 94 29 12 	call	0x2452	; 0x2452 <_ZN6target6System28handleDebounceTimerInterruptEv>
    1350:	08 95       	ret

00001352 <_ZN12_GLOBAL__N_114buttonCallbackEv>:
auto& serial{Serial::getInstance()};

/**
 * @brief Callback for the button.
 */
void buttonCallback() noexcept { mySys->handleButtonInterrupt(); }
    1352:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_ZN12_GLOBAL__N_15mySysE>
    1356:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <_ZN12_GLOBAL__N_15mySysE+0x1>
    135a:	0e 94 c3 12 	call	0x2586	; 0x2586 <_ZN6target6System21handleButtonInterruptEv>
    135e:	08 95       	ret

00001360 <_Z41__static_initialization_and_destruction_0ii>:
    // Run the system perpetually on the target MCU.
    mySys->run();

    // This point should never be reached; the system is intended to run indefinitely on the target MCU.
    return 0;
}
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	49 f4       	brne	.+18     	; 0x1376 <_Z41__static_initialization_and_destruction_0ii+0x16>
    1364:	6f 3f       	cpi	r22, 0xFF	; 255
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	31 f4       	brne	.+12     	; 0x1376 <_Z41__static_initialization_and_destruction_0ii+0x16>
{
/** Pointer to the system implementation. */
target::System* mySys{nullptr};
    
// Obtain a reference to the singleton serial device instance.
auto& serial{Serial::getInstance()};
    136a:	0e 94 05 06 	call	0xc0a	; 0xc0a <_ZN6driver10atmega328p6Serial11getInstanceEv>
    136e:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <_ZN12_GLOBAL__N_16serialE+0x1>
    1372:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <_ZN12_GLOBAL__N_16serialE>
    1376:	08 95       	ret

00001378 <_ZNK9container6VectorIdE5emptyEv>:
template <typename T>
size_t Vector<T>::size() const noexcept { return mySize; }

// -----------------------------------------------------------------------------
template <typename T>
bool Vector<T>::empty() const noexcept { return mySize == 0U; }
    1378:	fc 01       	movw	r30, r24
    137a:	22 81       	ldd	r18, Z+2	; 0x02
    137c:	33 81       	ldd	r19, Z+3	; 0x03
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	23 2b       	or	r18, r19
    1382:	09 f0       	breq	.+2      	; 0x1386 <_ZNK9container6VectorIdE5emptyEv+0xe>
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	08 95       	ret

00001388 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>:

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
{
    if (nullptr == format) { return false; }
    1388:	61 15       	cp	r22, r1
    138a:	71 05       	cpc	r23, r1
    138c:	49 f0       	breq	.+18     	; 0x13a0 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_+0x18>
        char buffer[length]{'\0'};
        (void) snprintf(buffer, length, format, args...);
        print(buffer);
    }
    // Print the string.
    else { print(format); }
    138e:	dc 01       	movw	r26, r24
    1390:	ed 91       	ld	r30, X+
    1392:	fc 91       	ld	r31, X
    1394:	04 84       	ldd	r0, Z+12	; 0x0c
    1396:	f5 85       	ldd	r31, Z+13	; 0x0d
    1398:	e0 2d       	mov	r30, r0
    139a:	09 95       	icall
    return true;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	08 95       	ret

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
{
    if (nullptr == format) { return false; }
    13a0:	80 e0       	ldi	r24, 0x00	; 0
        print(buffer);
    }
    // Print the string.
    else { print(format); }
    return true;
}
    13a2:	08 95       	ret

000013a4 <_ZNK9container6VectorIdE5beginEv>:

// -----------------------------------------------------------------------------
template <typename T>
typename Vector<T>::ConstIterator Vector<T>::begin() const noexcept 
{ 
    return ConstIterator{myData};
    13a4:	fb 01       	movw	r30, r22
    13a6:	20 81       	ld	r18, Z
    13a8:	31 81       	ldd	r19, Z+1	; 0x01
     * @brief Create iterator pointing at given data.
     *
     * @param[in] data Pointer to data the iterator is set to point at.
     */
    ConstIterator(const T* data) noexcept
        : myData{data} {}
    13aa:	fc 01       	movw	r30, r24
    13ac:	31 83       	std	Z+1, r19	; 0x01
    13ae:	20 83       	st	Z, r18
}
    13b0:	08 95       	ret

000013b2 <_ZNK9container6VectorIdE3endEv>:

// -----------------------------------------------------------------------------
template <typename T>
typename Vector<T>::ConstIterator Vector<T>::end() const noexcept  
{ 
    return ConstIterator{myData + mySize};
    13b2:	fb 01       	movw	r30, r22
    13b4:	40 81       	ld	r20, Z
    13b6:	51 81       	ldd	r21, Z+1	; 0x01
    13b8:	22 81       	ldd	r18, Z+2	; 0x02
    13ba:	33 81       	ldd	r19, Z+3	; 0x03
    13bc:	22 0f       	add	r18, r18
    13be:	33 1f       	adc	r19, r19
    13c0:	22 0f       	add	r18, r18
    13c2:	33 1f       	adc	r19, r19
    13c4:	24 0f       	add	r18, r20
    13c6:	35 1f       	adc	r19, r21
    13c8:	fc 01       	movw	r30, r24
    13ca:	31 83       	std	Z+1, r19	; 0x01
    13cc:	20 83       	st	Z, r18
}
    13ce:	08 95       	ret

000013d0 <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_>:
    virtual void print(const char* str) const = 0;
};

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
    13d0:	cf 92       	push	r12
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	c5 56       	subi	r28, 0x65	; 101
    13e6:	d1 09       	sbc	r29, r1
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
{
    if (nullptr == format) { return false; }
    13f2:	61 15       	cp	r22, r1
    13f4:	71 05       	cpc	r23, r1
    13f6:	81 f1       	breq	.+96     	; 0x1458 <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_+0x88>
    13f8:	d9 01       	movw	r26, r18
    13fa:	6a 01       	movw	r12, r20
    13fc:	8c 01       	movw	r16, r24

    // Format and insert given additional arguments (if any).
    if (0U < sizeof...(args))
    {
        constexpr size_t length{101U};
        char buffer[length]{'\0'};
    13fe:	85 e6       	ldi	r24, 0x65	; 101
    1400:	9e 01       	movw	r18, r28
    1402:	2f 5f       	subi	r18, 0xFF	; 255
    1404:	3f 4f       	sbci	r19, 0xFF	; 255
    1406:	79 01       	movw	r14, r18
    1408:	f9 01       	movw	r30, r18
    140a:	28 2f       	mov	r18, r24
    140c:	11 92       	st	Z+, r1
    140e:	2a 95       	dec	r18
    1410:	e9 f7       	brne	.-6      	; 0x140c <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_+0x3c>
        (void) snprintf(buffer, length, format, args...);
    1412:	3c 91       	ld	r19, X
    1414:	11 96       	adiw	r26, 0x01	; 1
    1416:	4c 91       	ld	r20, X
    1418:	d6 01       	movw	r26, r12
    141a:	9c 91       	ld	r25, X
    141c:	11 96       	adiw	r26, 0x01	; 1
    141e:	2c 91       	ld	r18, X
    1420:	4f 93       	push	r20
    1422:	3f 93       	push	r19
    1424:	2f 93       	push	r18
    1426:	9f 93       	push	r25
    1428:	7f 93       	push	r23
    142a:	6f 93       	push	r22
    142c:	1f 92       	push	r1
    142e:	8f 93       	push	r24
    1430:	ff 92       	push	r15
    1432:	ef 92       	push	r14
    1434:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <snprintf>
        print(buffer);
    1438:	d8 01       	movw	r26, r16
    143a:	ed 91       	ld	r30, X+
    143c:	fc 91       	ld	r31, X
    143e:	04 84       	ldd	r0, Z+12	; 0x0c
    1440:	f5 85       	ldd	r31, Z+13	; 0x0d
    1442:	e0 2d       	mov	r30, r0
    1444:	b7 01       	movw	r22, r14
    1446:	c8 01       	movw	r24, r16
    1448:	09 95       	icall
    }
    // Print the string.
    else { print(format); }
    return true;
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	01 c0       	rjmp	.+2      	; 0x145a <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_+0x8a>

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
{
    if (nullptr == format) { return false; }
    1458:	80 e0       	ldi	r24, 0x00	; 0
        print(buffer);
    }
    // Print the string.
    else { print(format); }
    return true;
}
    145a:	cb 59       	subi	r28, 0x9B	; 155
    145c:	df 4f       	sbci	r29, 0xFF	; 255
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	de bf       	out	0x3e, r29	; 62
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	cd bf       	out	0x3d, r28	; 61
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	1f 91       	pop	r17
    146e:	0f 91       	pop	r16
    1470:	ff 90       	pop	r15
    1472:	ef 90       	pop	r14
    1474:	df 90       	pop	r13
    1476:	cf 90       	pop	r12
    1478:	08 95       	ret

0000147a <_ZNK6driver15SerialInterface6printfIIiEEEbPKcDpRKT_>:
    virtual void print(const char* str) const = 0;
};

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	c5 56       	subi	r28, 0x65	; 101
    148c:	d1 09       	sbc	r29, r1
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
{
    if (nullptr == format) { return false; }
    1498:	61 15       	cp	r22, r1
    149a:	71 05       	cpc	r23, r1
    149c:	41 f1       	breq	.+80     	; 0x14ee <_ZNK6driver15SerialInterface6printfIIiEEEbPKcDpRKT_+0x74>
    149e:	fa 01       	movw	r30, r20
    14a0:	8c 01       	movw	r16, r24

    // Format and insert given additional arguments (if any).
    if (0U < sizeof...(args))
    {
        constexpr size_t length{101U};
        char buffer[length]{'\0'};
    14a2:	85 e6       	ldi	r24, 0x65	; 101
    14a4:	9e 01       	movw	r18, r28
    14a6:	2f 5f       	subi	r18, 0xFF	; 255
    14a8:	3f 4f       	sbci	r19, 0xFF	; 255
    14aa:	79 01       	movw	r14, r18
    14ac:	d9 01       	movw	r26, r18
    14ae:	28 2f       	mov	r18, r24
    14b0:	1d 92       	st	X+, r1
    14b2:	2a 95       	dec	r18
    14b4:	e9 f7       	brne	.-6      	; 0x14b0 <_ZNK6driver15SerialInterface6printfIIiEEEbPKcDpRKT_+0x36>
        (void) snprintf(buffer, length, format, args...);
    14b6:	90 81       	ld	r25, Z
    14b8:	21 81       	ldd	r18, Z+1	; 0x01
    14ba:	2f 93       	push	r18
    14bc:	9f 93       	push	r25
    14be:	7f 93       	push	r23
    14c0:	6f 93       	push	r22
    14c2:	1f 92       	push	r1
    14c4:	8f 93       	push	r24
    14c6:	ff 92       	push	r15
    14c8:	ef 92       	push	r14
    14ca:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <snprintf>
        print(buffer);
    14ce:	d8 01       	movw	r26, r16
    14d0:	ed 91       	ld	r30, X+
    14d2:	fc 91       	ld	r31, X
    14d4:	04 84       	ldd	r0, Z+12	; 0x0c
    14d6:	f5 85       	ldd	r31, Z+13	; 0x0d
    14d8:	e0 2d       	mov	r30, r0
    14da:	b7 01       	movw	r22, r14
    14dc:	c8 01       	movw	r24, r16
    14de:	09 95       	icall
    }
    // Print the string.
    else { print(format); }
    return true;
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	01 c0       	rjmp	.+2      	; 0x14f0 <_ZNK6driver15SerialInterface6printfIIiEEEbPKcDpRKT_+0x76>

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
{
    if (nullptr == format) { return false; }
    14ee:	80 e0       	ldi	r24, 0x00	; 0
        print(buffer);
    }
    // Print the string.
    else { print(format); }
    return true;
}
    14f0:	cb 59       	subi	r28, 0x9B	; 155
    14f2:	df 4f       	sbci	r29, 0xFF	; 255
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	1f 91       	pop	r17
    1504:	0f 91       	pop	r16
    1506:	ff 90       	pop	r15
    1508:	ef 90       	pop	r14
    150a:	08 95       	ret

0000150c <_ZN12_GLOBAL__N_116printPredictionsERKN2ml6linreg9InterfaceERKN9container6VectorIdEE>:
 * 
 * @param[in] linreg Linear regression model to predict with.
 * @param[in] inputData Input data to predict with.
 */
void printPredictions(const ml::linreg::Interface& linReg, const container::Vector<double>& inputData) noexcept
{
    150c:	4f 92       	push	r4
    150e:	5f 92       	push	r5
    1510:	6f 92       	push	r6
    1512:	7f 92       	push	r7
    1514:	8f 92       	push	r8
    1516:	9f 92       	push	r9
    1518:	af 92       	push	r10
    151a:	bf 92       	push	r11
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	2a 97       	sbiw	r28, 0x0a	; 10
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	7c 01       	movw	r14, r24
    153a:	8b 01       	movw	r16, r22
    // Terminate the function if no input data is provided.
    if (inputData.empty())
    153c:	cb 01       	movw	r24, r22
    153e:	0e 94 bc 09 	call	0x1378	; 0x1378 <_ZNK9container6VectorIdE5emptyEv>
    1542:	88 23       	and	r24, r24
    1544:	49 f0       	breq	.+18     	; 0x1558 <_ZN12_GLOBAL__N_116printPredictionsERKN2ml6linreg9InterfaceERKN9container6VectorIdEE+0x4c>
    {
        serial.printf("No input data!\n");
    1546:	68 e2       	ldi	r22, 0x28	; 40
    1548:	72 e0       	ldi	r23, 0x02	; 2
    154a:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <_ZN12_GLOBAL__N_16serialE>
    154e:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <_ZN12_GLOBAL__N_16serialE+0x1>
    1552:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
        return;
    1556:	a7 c0       	rjmp	.+334    	; 0x16a6 <_ZN12_GLOBAL__N_116printPredictionsERKN2ml6linreg9InterfaceERKN9container6VectorIdEE+0x19a>
    }
    serial.printf("--------------------------------------------------------------------------------\n");
    1558:	68 e3       	ldi	r22, 0x38	; 56
    155a:	72 e0       	ldi	r23, 0x02	; 2
    155c:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <_ZN12_GLOBAL__N_16serialE>
    1560:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <_ZN12_GLOBAL__N_16serialE+0x1>
    1564:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
    // Perform prediction with each input value, print the result in the terminal.
    for (const auto& input : inputData)
    1568:	b8 01       	movw	r22, r16
    156a:	ce 01       	movw	r24, r28
    156c:	09 96       	adiw	r24, 0x09	; 9
    156e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZNK9container6VectorIdE5beginEv>
    1572:	b8 01       	movw	r22, r16
    1574:	ce 01       	movw	r24, r28
    1576:	07 96       	adiw	r24, 0x07	; 7
    1578:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_ZNK9container6VectorIdE3endEv>
     *
     * @param[in] other Reference to other iterator.
     * 
     * @return True if the iterators point at the different addresses, false otherwise.
     */
    bool operator!=(const ConstIterator& other) const noexcept { return myData != other.myData; }
    157c:	09 85       	ldd	r16, Y+9	; 0x09
    157e:	1a 85       	ldd	r17, Y+10	; 0x0a
    1580:	8f 81       	ldd	r24, Y+7	; 0x07
    1582:	98 85       	ldd	r25, Y+8	; 0x08
    1584:	80 17       	cp	r24, r16
    1586:	91 07       	cpc	r25, r17
    1588:	09 f4       	brne	.+2      	; 0x158c <_ZN12_GLOBAL__N_116printPredictionsERKN2ml6linreg9InterfaceERKN9container6VectorIdEE+0x80>
    158a:	70 c0       	rjmp	.+224    	; 0x166c <_ZN12_GLOBAL__N_116printPredictionsERKN2ml6linreg9InterfaceERKN9container6VectorIdEE+0x160>
    {
        const auto prediction{linReg.predict(input)};
    158c:	d7 01       	movw	r26, r14
    158e:	ed 91       	ld	r30, X+
    1590:	fc 91       	ld	r31, X
    1592:	06 80       	ldd	r0, Z+6	; 0x06
    1594:	f7 81       	ldd	r31, Z+7	; 0x07
    1596:	e0 2d       	mov	r30, r0
    1598:	d8 01       	movw	r26, r16
    159a:	4d 91       	ld	r20, X+
    159c:	5d 91       	ld	r21, X+
    159e:	6d 91       	ld	r22, X+
    15a0:	7c 91       	ld	r23, X
    15a2:	c7 01       	movw	r24, r14
    15a4:	09 95       	icall
    15a6:	2b 01       	movw	r4, r22
    15a8:	3c 01       	movw	r6, r24
        const auto mV{input * 1000.0};
    15aa:	f8 01       	movw	r30, r16
    15ac:	60 81       	ld	r22, Z
    15ae:	71 81       	ldd	r23, Z+1	; 0x01
    15b0:	82 81       	ldd	r24, Z+2	; 0x02
    15b2:	93 81       	ldd	r25, Z+3	; 0x03
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	4a e7       	ldi	r20, 0x7A	; 122
    15ba:	54 e4       	ldi	r21, 0x44	; 68
    15bc:	0e 94 ce 14 	call	0x299c	; 0x299c <__mulsf3>
    15c0:	4b 01       	movw	r8, r22
    15c2:	5c 01       	movw	r10, r24
{
    // Case 1: number = 2.7 => we cast 2.7 + 0.5 to int => 3.2 is converted to 3.
    // Case 2: number = 2.3 => we cast 2.3 + 0.5 to int => 2.8 is converted to 2.
    // Case 3: number = -4.7 => we cast -4.7 - 0.5 to int => -5.2 is converted to -5.
    // Case 4: number = -4.2 => we cast -4.2 - 0.5 to int => -4.7 is converted to -4.
    return 0.0 <= number ? static_cast<int>(number + 0.5) : static_cast<int>(number - 0.5);
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	a9 01       	movw	r20, r18
    15ca:	c3 01       	movw	r24, r6
    15cc:	b2 01       	movw	r22, r4
    15ce:	0e 94 c9 14 	call	0x2992	; 0x2992 <__gesf2>
    15d2:	88 23       	and	r24, r24
    15d4:	5c f0       	brlt	.+22     	; 0x15ec <_ZN12_GLOBAL__N_116printPredictionsERKN2ml6linreg9InterfaceERKN9container6VectorIdEE+0xe0>
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e0       	ldi	r20, 0x00	; 0
    15dc:	5f e3       	ldi	r21, 0x3F	; 63
    15de:	c3 01       	movw	r24, r6
    15e0:	b2 01       	movw	r22, r4
    15e2:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__addsf3>
    15e6:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <__fixsfsi>
    15ea:	0a c0       	rjmp	.+20     	; 0x1600 <_ZN12_GLOBAL__N_116printPredictionsERKN2ml6linreg9InterfaceERKN9container6VectorIdEE+0xf4>
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e0       	ldi	r20, 0x00	; 0
    15f2:	5f e3       	ldi	r21, 0x3F	; 63
    15f4:	c3 01       	movw	r24, r6
    15f6:	b2 01       	movw	r22, r4
    15f8:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__subsf3>
    15fc:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <__fixsfsi>
    // Perform prediction with each input value, print the result in the terminal.
    for (const auto& input : inputData)
    {
        const auto prediction{linReg.predict(input)};
        const auto mV{input * 1000.0};
        serial.printf("Input: %d mV, predicted output: %d Celsius\n", round(mV), round(prediction));
    1600:	7e 83       	std	Y+6, r23	; 0x06
    1602:	6d 83       	std	Y+5, r22	; 0x05
{
    // Case 1: number = 2.7 => we cast 2.7 + 0.5 to int => 3.2 is converted to 3.
    // Case 2: number = 2.3 => we cast 2.3 + 0.5 to int => 2.8 is converted to 2.
    // Case 3: number = -4.7 => we cast -4.7 - 0.5 to int => -5.2 is converted to -5.
    // Case 4: number = -4.2 => we cast -4.2 - 0.5 to int => -4.7 is converted to -4.
    return 0.0 <= number ? static_cast<int>(number + 0.5) : static_cast<int>(number - 0.5);
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	a9 01       	movw	r20, r18
    160a:	c5 01       	movw	r24, r10
    160c:	b4 01       	movw	r22, r8
    160e:	0e 94 c9 14 	call	0x2992	; 0x2992 <__gesf2>
    1612:	88 23       	and	r24, r24
    1614:	5c f0       	brlt	.+22     	; 0x162c <_ZN12_GLOBAL__N_116printPredictionsERKN2ml6linreg9InterfaceERKN9container6VectorIdEE+0x120>
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	5f e3       	ldi	r21, 0x3F	; 63
    161e:	c5 01       	movw	r24, r10
    1620:	b4 01       	movw	r22, r8
    1622:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__addsf3>
    1626:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <__fixsfsi>
    162a:	0a c0       	rjmp	.+20     	; 0x1640 <_ZN12_GLOBAL__N_116printPredictionsERKN2ml6linreg9InterfaceERKN9container6VectorIdEE+0x134>
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	5f e3       	ldi	r21, 0x3F	; 63
    1634:	c5 01       	movw	r24, r10
    1636:	b4 01       	movw	r22, r8
    1638:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__subsf3>
    163c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <__fixsfsi>
    // Perform prediction with each input value, print the result in the terminal.
    for (const auto& input : inputData)
    {
        const auto prediction{linReg.predict(input)};
        const auto mV{input * 1000.0};
        serial.printf("Input: %d mV, predicted output: %d Celsius\n", round(mV), round(prediction));
    1640:	7c 83       	std	Y+4, r23	; 0x04
    1642:	6b 83       	std	Y+3, r22	; 0x03
    1644:	9e 01       	movw	r18, r28
    1646:	2b 5f       	subi	r18, 0xFB	; 251
    1648:	3f 4f       	sbci	r19, 0xFF	; 255
    164a:	ae 01       	movw	r20, r28
    164c:	4d 5f       	subi	r20, 0xFD	; 253
    164e:	5f 4f       	sbci	r21, 0xFF	; 255
    1650:	6a e8       	ldi	r22, 0x8A	; 138
    1652:	72 e0       	ldi	r23, 0x02	; 2
    1654:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <_ZN12_GLOBAL__N_16serialE>
    1658:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <_ZN12_GLOBAL__N_16serialE+0x1>
    165c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_>
     * 
     * @return Reference to this iterator.
     */
    ConstIterator& operator++() noexcept
    {
        ++myData;
    1660:	89 85       	ldd	r24, Y+9	; 0x09
    1662:	9a 85       	ldd	r25, Y+10	; 0x0a
    1664:	04 96       	adiw	r24, 0x04	; 4
    1666:	9a 87       	std	Y+10, r25	; 0x0a
    1668:	89 87       	std	Y+9, r24	; 0x09
    166a:	88 cf       	rjmp	.-240    	; 0x157c <_ZN12_GLOBAL__N_116printPredictionsERKN2ml6linreg9InterfaceERKN9container6VectorIdEE+0x70>
    }
    serial.printf("Epochs used: %d\n", linReg.getEpochsUsed());
    166c:	d7 01       	movw	r26, r14
    166e:	ed 91       	ld	r30, X+
    1670:	fc 91       	ld	r31, X
    1672:	04 80       	ldd	r0, Z+4	; 0x04
    1674:	f5 81       	ldd	r31, Z+5	; 0x05
    1676:	e0 2d       	mov	r30, r0
    1678:	c7 01       	movw	r24, r14
    167a:	09 95       	icall
    167c:	9a 83       	std	Y+2, r25	; 0x02
    167e:	89 83       	std	Y+1, r24	; 0x01
    1680:	ae 01       	movw	r20, r28
    1682:	4f 5f       	subi	r20, 0xFF	; 255
    1684:	5f 4f       	sbci	r21, 0xFF	; 255
    1686:	66 eb       	ldi	r22, 0xB6	; 182
    1688:	72 e0       	ldi	r23, 0x02	; 2
    168a:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <_ZN12_GLOBAL__N_16serialE>
    168e:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <_ZN12_GLOBAL__N_16serialE+0x1>
    1692:	0e 94 3d 0a 	call	0x147a	; 0x147a <_ZNK6driver15SerialInterface6printfIIiEEEbPKcDpRKT_>
    serial.printf("--------------------------------------------------------------------------------\n\n");
    1696:	67 ec       	ldi	r22, 0xC7	; 199
    1698:	72 e0       	ldi	r23, 0x02	; 2
    169a:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <_ZN12_GLOBAL__N_16serialE>
    169e:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <_ZN12_GLOBAL__N_16serialE+0x1>
    16a2:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
}
    16a6:	2a 96       	adiw	r28, 0x0a	; 10
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	ef 90       	pop	r14
    16be:	bf 90       	pop	r11
    16c0:	af 90       	pop	r10
    16c2:	9f 90       	pop	r9
    16c4:	8f 90       	pop	r8
    16c6:	7f 90       	pop	r7
    16c8:	6f 90       	pop	r6
    16ca:	5f 90       	pop	r5
    16cc:	4f 90       	pop	r4
    16ce:	08 95       	ret

000016d0 <_ZN9container6VectorIdEC1Ev>:
{
// -----------------------------------------------------------------------------
template <typename T>
Vector<T>::Vector() noexcept
    : myData{nullptr}
    , mySize{} {}
    16d0:	fc 01       	movw	r30, r24
    16d2:	11 82       	std	Z+1, r1	; 0x01
    16d4:	10 82       	st	Z, r1
    16d6:	13 82       	std	Z+3, r1	; 0x03
    16d8:	12 82       	std	Z+2, r1	; 0x02
    16da:	08 95       	ret

000016dc <_ZN9container6VectorIdE5clearEv>:
template <typename T>
const T* Vector<T>::last() const noexcept { return mySize > 0U ? end() - 1U : nullptr; }

// -----------------------------------------------------------------------------
template <typename T>
void Vector<T>::clear() noexcept 
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	ec 01       	movw	r28, r24

// -----------------------------------------------------------------------------
template <typename T>
inline void deleteMemory(T* &block) noexcept
{
    free(block);
    16e2:	88 81       	ld	r24, Y
    16e4:	99 81       	ldd	r25, Y+1	; 0x01
    16e6:	0e 94 30 16 	call	0x2c60	; 0x2c60 <free>
    block = nullptr;
    16ea:	19 82       	std	Y+1, r1	; 0x01
    16ec:	18 82       	st	Y, r1
{
    utils::deleteMemory<T>(myData);
    myData = nullptr;
    mySize = 0U;
    16ee:	1b 82       	std	Y+3, r1	; 0x03
    16f0:	1a 82       	std	Y+2, r1	; 0x02
}
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	08 95       	ret

000016f8 <_ZN9container6VectorIdED1Ev>:

// -----------------------------------------------------------------------------
template <typename T>
Vector<T>::~Vector() noexcept 
{ 
    clear(); 
    16f8:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_ZN9container6VectorIdE5clearEv>
    16fc:	08 95       	ret

000016fe <_ZN9container6VectorIdE6resizeEj>:
    mySize = 0U;
}

// -----------------------------------------------------------------------------
template <typename T>
bool Vector<T>::resize(const size_t newSize) noexcept 
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	ec 01       	movw	r28, r24
    1708:	8b 01       	movw	r16, r22

// -----------------------------------------------------------------------------
template <typename T>
inline T* reallocMemory(T* block, const size_t newSize) noexcept
{
    return static_cast<T*>(realloc(block, sizeof(T) * newSize));
    170a:	66 0f       	add	r22, r22
    170c:	77 1f       	adc	r23, r23
    170e:	66 0f       	add	r22, r22
    1710:	77 1f       	adc	r23, r23
    1712:	88 81       	ld	r24, Y
    1714:	99 81       	ldd	r25, Y+1	; 0x01
    1716:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <realloc>
{
    auto copy{utils::reallocMemory<T>(myData, newSize)};
    if (copy == nullptr) { return false; }
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	31 f0       	breq	.+12     	; 0x172a <_ZN9container6VectorIdE6resizeEj+0x2c>
    myData = copy;
    171e:	99 83       	std	Y+1, r25	; 0x01
    1720:	88 83       	st	Y, r24
    mySize = newSize;
    1722:	1b 83       	std	Y+3, r17	; 0x03
    1724:	0a 83       	std	Y+2, r16	; 0x02
    return true;
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	01 c0       	rjmp	.+2      	; 0x172c <_ZN9container6VectorIdE6resizeEj+0x2e>
// -----------------------------------------------------------------------------
template <typename T>
bool Vector<T>::resize(const size_t newSize) noexcept 
{
    auto copy{utils::reallocMemory<T>(myData, newSize)};
    if (copy == nullptr) { return false; }
    172a:	80 e0       	ldi	r24, 0x00	; 0
    myData = copy;
    mySize = newSize;
    return true;
}
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	1f 91       	pop	r17
    1732:	0f 91       	pop	r16
    1734:	08 95       	ret

00001736 <_ZN9container6VectorIdE6assignILj11EEEvRAT__Kdj>:
}

// -----------------------------------------------------------------------------
template <typename T>
template <size_t ValueCount>
void Vector<T>::assign(const T (&values)[ValueCount], const size_t offset) noexcept 
    1736:	0f 93       	push	r16
    1738:	1f 93       	push	r17
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
{
    for (size_t i{}; i < ValueCount && offset + i < mySize; ++i) 
    173e:	a0 e0       	ldi	r26, 0x00	; 0
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	ab 30       	cpi	r26, 0x0B	; 11
    1744:	b1 05       	cpc	r27, r1
    1746:	10 f5       	brcc	.+68     	; 0x178c <_ZN9container6VectorIdE6assignILj11EEEvRAT__Kdj+0x56>
    1748:	9d 01       	movw	r18, r26
    174a:	24 0f       	add	r18, r20
    174c:	35 1f       	adc	r19, r21
    174e:	ec 01       	movw	r28, r24
    1750:	ea 81       	ldd	r30, Y+2	; 0x02
    1752:	fb 81       	ldd	r31, Y+3	; 0x03
    1754:	2e 17       	cp	r18, r30
    1756:	3f 07       	cpc	r19, r31
    1758:	c8 f4       	brcc	.+50     	; 0x178c <_ZN9container6VectorIdE6assignILj11EEEvRAT__Kdj+0x56>
    {
        myData[offset + i] = values[i];
    175a:	22 0f       	add	r18, r18
    175c:	33 1f       	adc	r19, r19
    175e:	22 0f       	add	r18, r18
    1760:	33 1f       	adc	r19, r19
    1762:	e8 81       	ld	r30, Y
    1764:	f9 81       	ldd	r31, Y+1	; 0x01
    1766:	e2 0f       	add	r30, r18
    1768:	f3 1f       	adc	r31, r19
    176a:	ed 01       	movw	r28, r26
    176c:	cc 0f       	add	r28, r28
    176e:	dd 1f       	adc	r29, r29
    1770:	cc 0f       	add	r28, r28
    1772:	dd 1f       	adc	r29, r29
    1774:	c6 0f       	add	r28, r22
    1776:	d7 1f       	adc	r29, r23
    1778:	08 81       	ld	r16, Y
    177a:	19 81       	ldd	r17, Y+1	; 0x01
    177c:	2a 81       	ldd	r18, Y+2	; 0x02
    177e:	3b 81       	ldd	r19, Y+3	; 0x03
    1780:	00 83       	st	Z, r16
    1782:	11 83       	std	Z+1, r17	; 0x01
    1784:	22 83       	std	Z+2, r18	; 0x02
    1786:	33 83       	std	Z+3, r19	; 0x03
// -----------------------------------------------------------------------------
template <typename T>
template <size_t ValueCount>
void Vector<T>::assign(const T (&values)[ValueCount], const size_t offset) noexcept 
{
    for (size_t i{}; i < ValueCount && offset + i < mySize; ++i) 
    1788:	11 96       	adiw	r26, 0x01	; 1
    178a:	db cf       	rjmp	.-74     	; 0x1742 <_ZN9container6VectorIdE6assignILj11EEEvRAT__Kdj+0xc>
    {
        myData[offset + i] = values[i];
    }
}
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	08 95       	ret

00001796 <_ZN9container6VectorIdE9addValuesILj11EEEbRAT__Kd>:
}

// -----------------------------------------------------------------------------
template <typename T>
template <size_t ValueCount>
bool Vector<T>::addValues(const T (&values)[ValueCount]) noexcept 
    1796:	cf 92       	push	r12
    1798:	df 92       	push	r13
    179a:	ef 92       	push	r14
    179c:	ff 92       	push	r15
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	ec 01       	movw	r28, r24
    17a6:	6b 01       	movw	r12, r22
{
    const auto offset{mySize};
    17a8:	ea 80       	ldd	r14, Y+2	; 0x02
    17aa:	fb 80       	ldd	r15, Y+3	; 0x03
    if (!resize(mySize + ValueCount)) { return false; }
    17ac:	b7 01       	movw	r22, r14
    17ae:	65 5f       	subi	r22, 0xF5	; 245
    17b0:	7f 4f       	sbci	r23, 0xFF	; 255
    17b2:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <_ZN9container6VectorIdE6resizeEj>
    17b6:	18 2f       	mov	r17, r24
    17b8:	88 23       	and	r24, r24
    17ba:	29 f0       	breq	.+10     	; 0x17c6 <_ZN9container6VectorIdE9addValuesILj11EEEbRAT__Kd+0x30>
    assign(values, offset);
    17bc:	a7 01       	movw	r20, r14
    17be:	b6 01       	movw	r22, r12
    17c0:	ce 01       	movw	r24, r28
    17c2:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN9container6VectorIdE6assignILj11EEEvRAT__Kdj>
    return true;
}
    17c6:	81 2f       	mov	r24, r17
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	1f 91       	pop	r17
    17ce:	ff 90       	pop	r15
    17d0:	ef 90       	pop	r14
    17d2:	df 90       	pop	r13
    17d4:	cf 90       	pop	r12
    17d6:	08 95       	ret

000017d8 <_ZN9container6VectorIdEC1IIdddddddddddEEEDpOKT_>:
}

// -----------------------------------------------------------------------------
template <typename T>
template <typename... Values>
Vector<T>::Vector(const Values&&... values) noexcept
    17d8:	2f 92       	push	r2
    17da:	3f 92       	push	r3
    17dc:	4f 92       	push	r4
    17de:	5f 92       	push	r5
    17e0:	6f 92       	push	r6
    17e2:	7f 92       	push	r7
    17e4:	8f 92       	push	r8
    17e6:	9f 92       	push	r9
    17e8:	af 92       	push	r10
    17ea:	bf 92       	push	r11
    17ec:	cf 92       	push	r12
    17ee:	df 92       	push	r13
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	ae 97       	sbiw	r28, 0x2e	; 46
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	3c 01       	movw	r6, r24
    180e:	2b 01       	movw	r4, r22
    1810:	1a 01       	movw	r2, r20
    1812:	3e a7       	std	Y+46, r19	; 0x2e
    1814:	2d a7       	std	Y+45, r18	; 0x2d
    : Vector()
    1816:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_ZN9container6VectorIdEC1Ev>
{
    const T array[sizeof...(values)]{(values)...};
    181a:	f2 01       	movw	r30, r4
    181c:	80 81       	ld	r24, Z
    181e:	91 81       	ldd	r25, Z+1	; 0x01
    1820:	a2 81       	ldd	r26, Z+2	; 0x02
    1822:	b3 81       	ldd	r27, Z+3	; 0x03
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	9a 83       	std	Y+2, r25	; 0x02
    1828:	ab 83       	std	Y+3, r26	; 0x03
    182a:	bc 83       	std	Y+4, r27	; 0x04
    182c:	f1 01       	movw	r30, r2
    182e:	80 81       	ld	r24, Z
    1830:	91 81       	ldd	r25, Z+1	; 0x01
    1832:	a2 81       	ldd	r26, Z+2	; 0x02
    1834:	b3 81       	ldd	r27, Z+3	; 0x03
    1836:	8d 83       	std	Y+5, r24	; 0x05
    1838:	9e 83       	std	Y+6, r25	; 0x06
    183a:	af 83       	std	Y+7, r26	; 0x07
    183c:	b8 87       	std	Y+8, r27	; 0x08
    183e:	ed a5       	ldd	r30, Y+45	; 0x2d
    1840:	fe a5       	ldd	r31, Y+46	; 0x2e
    1842:	80 81       	ld	r24, Z
    1844:	91 81       	ldd	r25, Z+1	; 0x01
    1846:	a2 81       	ldd	r26, Z+2	; 0x02
    1848:	b3 81       	ldd	r27, Z+3	; 0x03
    184a:	89 87       	std	Y+9, r24	; 0x09
    184c:	9a 87       	std	Y+10, r25	; 0x0a
    184e:	ab 87       	std	Y+11, r26	; 0x0b
    1850:	bc 87       	std	Y+12, r27	; 0x0c
    1852:	f8 01       	movw	r30, r16
    1854:	80 81       	ld	r24, Z
    1856:	91 81       	ldd	r25, Z+1	; 0x01
    1858:	a2 81       	ldd	r26, Z+2	; 0x02
    185a:	b3 81       	ldd	r27, Z+3	; 0x03
    185c:	8d 87       	std	Y+13, r24	; 0x0d
    185e:	9e 87       	std	Y+14, r25	; 0x0e
    1860:	af 87       	std	Y+15, r26	; 0x0f
    1862:	b8 8b       	std	Y+16, r27	; 0x10
    1864:	f7 01       	movw	r30, r14
    1866:	80 81       	ld	r24, Z
    1868:	91 81       	ldd	r25, Z+1	; 0x01
    186a:	a2 81       	ldd	r26, Z+2	; 0x02
    186c:	b3 81       	ldd	r27, Z+3	; 0x03
    186e:	89 8b       	std	Y+17, r24	; 0x11
    1870:	9a 8b       	std	Y+18, r25	; 0x12
    1872:	ab 8b       	std	Y+19, r26	; 0x13
    1874:	bc 8b       	std	Y+20, r27	; 0x14
    1876:	f6 01       	movw	r30, r12
    1878:	80 81       	ld	r24, Z
    187a:	91 81       	ldd	r25, Z+1	; 0x01
    187c:	a2 81       	ldd	r26, Z+2	; 0x02
    187e:	b3 81       	ldd	r27, Z+3	; 0x03
    1880:	8d 8b       	std	Y+21, r24	; 0x15
    1882:	9e 8b       	std	Y+22, r25	; 0x16
    1884:	af 8b       	std	Y+23, r26	; 0x17
    1886:	b8 8f       	std	Y+24, r27	; 0x18
    1888:	f5 01       	movw	r30, r10
    188a:	80 81       	ld	r24, Z
    188c:	91 81       	ldd	r25, Z+1	; 0x01
    188e:	a2 81       	ldd	r26, Z+2	; 0x02
    1890:	b3 81       	ldd	r27, Z+3	; 0x03
    1892:	89 8f       	std	Y+25, r24	; 0x19
    1894:	9a 8f       	std	Y+26, r25	; 0x1a
    1896:	ab 8f       	std	Y+27, r26	; 0x1b
    1898:	bc 8f       	std	Y+28, r27	; 0x1c
    189a:	f4 01       	movw	r30, r8
    189c:	80 81       	ld	r24, Z
    189e:	91 81       	ldd	r25, Z+1	; 0x01
    18a0:	a2 81       	ldd	r26, Z+2	; 0x02
    18a2:	b3 81       	ldd	r27, Z+3	; 0x03
    18a4:	8d 8f       	std	Y+29, r24	; 0x1d
    18a6:	9e 8f       	std	Y+30, r25	; 0x1e
    18a8:	af 8f       	std	Y+31, r26	; 0x1f
    18aa:	b8 a3       	std	Y+32, r27	; 0x20
    18ac:	25 96       	adiw	r28, 0x05	; 5
    18ae:	ee ad       	ldd	r30, Y+62	; 0x3e
    18b0:	ff ad       	ldd	r31, Y+63	; 0x3f
    18b2:	25 97       	sbiw	r28, 0x05	; 5
    18b4:	80 81       	ld	r24, Z
    18b6:	91 81       	ldd	r25, Z+1	; 0x01
    18b8:	a2 81       	ldd	r26, Z+2	; 0x02
    18ba:	b3 81       	ldd	r27, Z+3	; 0x03
    18bc:	89 a3       	std	Y+33, r24	; 0x21
    18be:	9a a3       	std	Y+34, r25	; 0x22
    18c0:	ab a3       	std	Y+35, r26	; 0x23
    18c2:	bc a3       	std	Y+36, r27	; 0x24
    18c4:	27 96       	adiw	r28, 0x07	; 7
    18c6:	ee ad       	ldd	r30, Y+62	; 0x3e
    18c8:	ff ad       	ldd	r31, Y+63	; 0x3f
    18ca:	27 97       	sbiw	r28, 0x07	; 7
    18cc:	80 81       	ld	r24, Z
    18ce:	91 81       	ldd	r25, Z+1	; 0x01
    18d0:	a2 81       	ldd	r26, Z+2	; 0x02
    18d2:	b3 81       	ldd	r27, Z+3	; 0x03
    18d4:	8d a3       	std	Y+37, r24	; 0x25
    18d6:	9e a3       	std	Y+38, r25	; 0x26
    18d8:	af a3       	std	Y+39, r26	; 0x27
    18da:	b8 a7       	std	Y+40, r27	; 0x28
    18dc:	29 96       	adiw	r28, 0x09	; 9
    18de:	ee ad       	ldd	r30, Y+62	; 0x3e
    18e0:	ff ad       	ldd	r31, Y+63	; 0x3f
    18e2:	29 97       	sbiw	r28, 0x09	; 9
    18e4:	80 81       	ld	r24, Z
    18e6:	91 81       	ldd	r25, Z+1	; 0x01
    18e8:	a2 81       	ldd	r26, Z+2	; 0x02
    18ea:	b3 81       	ldd	r27, Z+3	; 0x03
    18ec:	89 a7       	std	Y+41, r24	; 0x29
    18ee:	9a a7       	std	Y+42, r25	; 0x2a
    18f0:	ab a7       	std	Y+43, r26	; 0x2b
    18f2:	bc a7       	std	Y+44, r27	; 0x2c
    addValues(array);
    18f4:	be 01       	movw	r22, r28
    18f6:	6f 5f       	subi	r22, 0xFF	; 255
    18f8:	7f 4f       	sbci	r23, 0xFF	; 255
    18fa:	c3 01       	movw	r24, r6
    18fc:	0e 94 cb 0b 	call	0x1796	; 0x1796 <_ZN9container6VectorIdE9addValuesILj11EEEbRAT__Kd>
}
    1900:	ae 96       	adiw	r28, 0x2e	; 46
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	ff 90       	pop	r15
    1916:	ef 90       	pop	r14
    1918:	df 90       	pop	r13
    191a:	cf 90       	pop	r12
    191c:	bf 90       	pop	r11
    191e:	af 90       	pop	r10
    1920:	9f 90       	pop	r9
    1922:	8f 90       	pop	r8
    1924:	7f 90       	pop	r7
    1926:	6f 90       	pop	r6
    1928:	5f 90       	pop	r5
    192a:	4f 90       	pop	r4
    192c:	3f 90       	pop	r3
    192e:	2f 90       	pop	r2
    1930:	08 95       	ret

00001932 <_ZN9container6VectorIjE5clearEv>:
template <typename T>
const T* Vector<T>::last() const noexcept { return mySize > 0U ? end() - 1U : nullptr; }

// -----------------------------------------------------------------------------
template <typename T>
void Vector<T>::clear() noexcept 
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	ec 01       	movw	r28, r24

// -----------------------------------------------------------------------------
template <typename T>
inline void deleteMemory(T* &block) noexcept
{
    free(block);
    1938:	88 81       	ld	r24, Y
    193a:	99 81       	ldd	r25, Y+1	; 0x01
    193c:	0e 94 30 16 	call	0x2c60	; 0x2c60 <free>
    block = nullptr;
    1940:	19 82       	std	Y+1, r1	; 0x01
    1942:	18 82       	st	Y, r1
{
    utils::deleteMemory<T>(myData);
    myData = nullptr;
    mySize = 0U;
    1944:	1b 82       	std	Y+3, r1	; 0x03
    1946:	1a 82       	std	Y+2, r1	; 0x02
}
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	08 95       	ret

0000194e <_ZN9container6VectorIjED1Ev>:

// -----------------------------------------------------------------------------
template <typename T>
Vector<T>::~Vector() noexcept 
{ 
    clear(); 
    194e:	0e 94 99 0c 	call	0x1932	; 0x1932 <_ZN9container6VectorIjE5clearEv>
    1952:	08 95       	ret

00001954 <_ZN2ml6linreg6LinRegD1Ev>:
                    driver::SerialInterface& serial) noexcept;

    /**
     * @brief Delete the constructor as default.
     */
    ~LinReg() noexcept override = default;
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	ec 01       	movw	r28, r24
    195a:	8f e6       	ldi	r24, 0x6F	; 111
    195c:	93 e0       	ldi	r25, 0x03	; 3
    195e:	99 83       	std	Y+1, r25	; 0x01
    1960:	88 83       	st	Y, r24
    1962:	ce 01       	movw	r24, r28
    1964:	4c 96       	adiw	r24, 0x1c	; 28
    1966:	0e 94 a7 0c 	call	0x194e	; 0x194e <_ZN9container6VectorIjED1Ev>
    196a:	ce 01       	movw	r24, r28
    196c:	46 96       	adiw	r24, 0x16	; 22
    196e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_ZN9container6VectorIdED1Ev>
    1972:	ce 01       	movw	r24, r28
    1974:	40 96       	adiw	r24, 0x10	; 16
    1976:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_ZN9container6VectorIdED1Ev>
{
public:
    /**
     * @brief Delete the constructor.
     */     
    virtual ~Interface() noexcept = default;
    197a:	8f e5       	ldi	r24, 0x5F	; 95
    197c:	93 e0       	ldi	r25, 0x03	; 3
    197e:	99 83       	std	Y+1, r25	; 0x01
    1980:	88 83       	st	Y, r24
    1982:	df 91       	pop	r29
    1984:	cf 91       	pop	r28
    1986:	08 95       	ret

00001988 <_ZN2ml6linreg6LinRegD0Ev>:
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	ec 01       	movw	r28, r24
    198e:	8f e6       	ldi	r24, 0x6F	; 111
    1990:	93 e0       	ldi	r25, 0x03	; 3
    1992:	99 83       	std	Y+1, r25	; 0x01
    1994:	88 83       	st	Y, r24
    1996:	ce 01       	movw	r24, r28
    1998:	4c 96       	adiw	r24, 0x1c	; 28
    199a:	0e 94 a7 0c 	call	0x194e	; 0x194e <_ZN9container6VectorIjED1Ev>
    199e:	ce 01       	movw	r24, r28
    19a0:	46 96       	adiw	r24, 0x16	; 22
    19a2:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_ZN9container6VectorIdED1Ev>
    19a6:	ce 01       	movw	r24, r28
    19a8:	40 96       	adiw	r24, 0x10	; 16
    19aa:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_ZN9container6VectorIdED1Ev>
    19ae:	8f e5       	ldi	r24, 0x5F	; 95
    19b0:	93 e0       	ldi	r25, 0x03	; 3
    19b2:	99 83       	std	Y+1, r25	; 0x01
    19b4:	88 83       	st	Y, r24
    19b6:	62 e2       	ldi	r22, 0x22	; 34
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	ce 01       	movw	r24, r28
    19bc:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZdlPvj>
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	08 95       	ret

000019c6 <_GLOBAL__sub_I_main>:
    // Run the system perpetually on the target MCU.
    mySys->run();

    // This point should never be reached; the system is intended to run indefinitely on the target MCU.
    return 0;
}
    19c6:	6f ef       	ldi	r22, 0xFF	; 255
    19c8:	7f ef       	ldi	r23, 0xFF	; 255
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	0e 94 b0 09 	call	0x1360	; 0x1360 <_Z41__static_initialization_and_destruction_0ii>
    19d2:	08 95       	ret

000019d4 <main>:
 * 
 * @return 0 on termination of the program (should never occur).
 */

int main()
{
    19d4:	4f 92       	push	r4
    19d6:	5f 92       	push	r5
    19d8:	6f 92       	push	r6
    19da:	7f 92       	push	r7
    19dc:	8f 92       	push	r8
    19de:	9f 92       	push	r9
    19e0:	af 92       	push	r10
    19e2:	bf 92       	push	r11
    19e4:	cf 92       	push	r12
    19e6:	df 92       	push	r13
    19e8:	ef 92       	push	r14
    19ea:	ff 92       	push	r15
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	c1 5b       	subi	r28, 0xB1	; 177
    19fa:	d1 09       	sbc	r29, r1
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    serial.setEnabled(true);
    1a06:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <_ZN12_GLOBAL__N_16serialE>
    1a0a:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <_ZN12_GLOBAL__N_16serialE+0x1>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	ed 91       	ld	r30, X+
    1a12:	fc 91       	ld	r31, X
    1a14:	02 84       	ldd	r0, Z+10	; 0x0a
    1a16:	f3 85       	ldd	r31, Z+11	; 0x0b
    1a18:	e0 2d       	mov	r30, r0
    1a1a:	61 e0       	ldi	r22, 0x01	; 1
    1a1c:	09 95       	icall
    
    serial.printf("Hello there!");
    1a1e:	6a e1       	ldi	r22, 0x1A	; 26
    1a20:	73 e0       	ldi	r23, 0x03	; 3
    1a22:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <_ZN12_GLOBAL__N_16serialE>
    1a26:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <_ZN12_GLOBAL__N_16serialE+0x1>
    1a2a:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
        
    // Learingrate for the training.
    constexpr double learningRate{0.225};
    constexpr uint8_t sensorPin{16U};
    // The data we want to train our model with.
    const container::Vector<double> trainInput{0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0};
    1a2e:	69 96       	adiw	r28, 0x19	; 25
    1a30:	1c ae       	std	Y+60, r1	; 0x3c
    1a32:	1d ae       	std	Y+61, r1	; 0x3d
    1a34:	1e ae       	std	Y+62, r1	; 0x3e
    1a36:	1f ae       	std	Y+63, r1	; 0x3f
    1a38:	69 97       	sbiw	r28, 0x19	; 25
    1a3a:	8d ec       	ldi	r24, 0xCD	; 205
    1a3c:	9c ec       	ldi	r25, 0xCC	; 204
    1a3e:	ac ec       	ldi	r26, 0xCC	; 204
    1a40:	bd e3       	ldi	r27, 0x3D	; 61
    1a42:	65 96       	adiw	r28, 0x15	; 21
    1a44:	8c af       	std	Y+60, r24	; 0x3c
    1a46:	9d af       	std	Y+61, r25	; 0x3d
    1a48:	ae af       	std	Y+62, r26	; 0x3e
    1a4a:	bf af       	std	Y+63, r27	; 0x3f
    1a4c:	65 97       	sbiw	r28, 0x15	; 21
    1a4e:	8d ec       	ldi	r24, 0xCD	; 205
    1a50:	9c ec       	ldi	r25, 0xCC	; 204
    1a52:	ac e4       	ldi	r26, 0x4C	; 76
    1a54:	be e3       	ldi	r27, 0x3E	; 62
    1a56:	61 96       	adiw	r28, 0x11	; 17
    1a58:	8c af       	std	Y+60, r24	; 0x3c
    1a5a:	9d af       	std	Y+61, r25	; 0x3d
    1a5c:	ae af       	std	Y+62, r26	; 0x3e
    1a5e:	bf af       	std	Y+63, r27	; 0x3f
    1a60:	61 97       	sbiw	r28, 0x11	; 17
    1a62:	8a e9       	ldi	r24, 0x9A	; 154
    1a64:	99 e9       	ldi	r25, 0x99	; 153
    1a66:	a9 e9       	ldi	r26, 0x99	; 153
    1a68:	be e3       	ldi	r27, 0x3E	; 62
    1a6a:	2d 96       	adiw	r28, 0x0d	; 13
    1a6c:	8c af       	std	Y+60, r24	; 0x3c
    1a6e:	9d af       	std	Y+61, r25	; 0x3d
    1a70:	ae af       	std	Y+62, r26	; 0x3e
    1a72:	bf af       	std	Y+63, r27	; 0x3f
    1a74:	2d 97       	sbiw	r28, 0x0d	; 13
    1a76:	8d ec       	ldi	r24, 0xCD	; 205
    1a78:	9c ec       	ldi	r25, 0xCC	; 204
    1a7a:	ac ec       	ldi	r26, 0xCC	; 204
    1a7c:	be e3       	ldi	r27, 0x3E	; 62
    1a7e:	29 96       	adiw	r28, 0x09	; 9
    1a80:	8c af       	std	Y+60, r24	; 0x3c
    1a82:	9d af       	std	Y+61, r25	; 0x3d
    1a84:	ae af       	std	Y+62, r26	; 0x3e
    1a86:	bf af       	std	Y+63, r27	; 0x3f
    1a88:	29 97       	sbiw	r28, 0x09	; 9
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	a0 e0       	ldi	r26, 0x00	; 0
    1a90:	bf e3       	ldi	r27, 0x3F	; 63
    1a92:	25 96       	adiw	r28, 0x05	; 5
    1a94:	8c af       	std	Y+60, r24	; 0x3c
    1a96:	9d af       	std	Y+61, r25	; 0x3d
    1a98:	ae af       	std	Y+62, r26	; 0x3e
    1a9a:	bf af       	std	Y+63, r27	; 0x3f
    1a9c:	25 97       	sbiw	r28, 0x05	; 5
    1a9e:	8a e9       	ldi	r24, 0x9A	; 154
    1aa0:	99 e9       	ldi	r25, 0x99	; 153
    1aa2:	a9 e1       	ldi	r26, 0x19	; 25
    1aa4:	bf e3       	ldi	r27, 0x3F	; 63
    1aa6:	21 96       	adiw	r28, 0x01	; 1
    1aa8:	8c af       	std	Y+60, r24	; 0x3c
    1aaa:	9d af       	std	Y+61, r25	; 0x3d
    1aac:	ae af       	std	Y+62, r26	; 0x3e
    1aae:	bf af       	std	Y+63, r27	; 0x3f
    1ab0:	21 97       	sbiw	r28, 0x01	; 1
    1ab2:	83 e3       	ldi	r24, 0x33	; 51
    1ab4:	93 e3       	ldi	r25, 0x33	; 51
    1ab6:	a3 e3       	ldi	r26, 0x33	; 51
    1ab8:	bf e3       	ldi	r27, 0x3F	; 63
    1aba:	89 af       	std	Y+57, r24	; 0x39
    1abc:	9a af       	std	Y+58, r25	; 0x3a
    1abe:	ab af       	std	Y+59, r26	; 0x3b
    1ac0:	bc af       	std	Y+60, r27	; 0x3c
    1ac2:	8d ec       	ldi	r24, 0xCD	; 205
    1ac4:	9c ec       	ldi	r25, 0xCC	; 204
    1ac6:	ac e4       	ldi	r26, 0x4C	; 76
    1ac8:	bf e3       	ldi	r27, 0x3F	; 63
    1aca:	8d ab       	std	Y+53, r24	; 0x35
    1acc:	9e ab       	std	Y+54, r25	; 0x36
    1ace:	af ab       	std	Y+55, r26	; 0x37
    1ad0:	b8 af       	std	Y+56, r27	; 0x38
    1ad2:	86 e6       	ldi	r24, 0x66	; 102
    1ad4:	96 e6       	ldi	r25, 0x66	; 102
    1ad6:	a6 e6       	ldi	r26, 0x66	; 102
    1ad8:	bf e3       	ldi	r27, 0x3F	; 63
    1ada:	89 ab       	std	Y+49, r24	; 0x31
    1adc:	9a ab       	std	Y+50, r25	; 0x32
    1ade:	ab ab       	std	Y+51, r26	; 0x33
    1ae0:	bc ab       	std	Y+52, r27	; 0x34
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	a0 e8       	ldi	r26, 0x80	; 128
    1ae8:	bf e3       	ldi	r27, 0x3F	; 63
    1aea:	8d a7       	std	Y+45, r24	; 0x2d
    1aec:	9e a7       	std	Y+46, r25	; 0x2e
    1aee:	af a7       	std	Y+47, r26	; 0x2f
    1af0:	b8 ab       	std	Y+48, r27	; 0x30
    1af2:	ce 01       	movw	r24, r28
    1af4:	8d 96       	adiw	r24, 0x2d	; 45
    1af6:	9f 93       	push	r25
    1af8:	8f 93       	push	r24
    1afa:	04 96       	adiw	r24, 0x04	; 4
    1afc:	9f 93       	push	r25
    1afe:	8f 93       	push	r24
    1b00:	04 96       	adiw	r24, 0x04	; 4
    1b02:	9f 93       	push	r25
    1b04:	8f 93       	push	r24
    1b06:	9e 01       	movw	r18, r28
    1b08:	27 5c       	subi	r18, 0xC7	; 199
    1b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0c:	49 01       	movw	r8, r18
    1b0e:	08 96       	adiw	r24, 0x08	; 8
    1b10:	5c 01       	movw	r10, r24
    1b12:	de 01       	movw	r26, r28
    1b14:	af 5b       	subi	r26, 0xBF	; 191
    1b16:	bf 4f       	sbci	r27, 0xFF	; 255
    1b18:	6d 01       	movw	r12, r26
    1b1a:	24 5f       	subi	r18, 0xF4	; 244
    1b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1e:	79 01       	movw	r14, r18
    1b20:	8e 01       	movw	r16, r28
    1b22:	07 5b       	subi	r16, 0xB7	; 183
    1b24:	1f 4f       	sbci	r17, 0xFF	; 255
    1b26:	28 5f       	subi	r18, 0xF8	; 248
    1b28:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2a:	ae 01       	movw	r20, r28
    1b2c:	4f 5a       	subi	r20, 0xAF	; 175
    1b2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b30:	be 01       	movw	r22, r28
    1b32:	6b 5a       	subi	r22, 0xAB	; 171
    1b34:	7f 4f       	sbci	r23, 0xFF	; 255
    1b36:	4c 96       	adiw	r24, 0x1c	; 28
    1b38:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_ZN9container6VectorIdEC1IIdddddddddddEEEDpOKT_>
    const container::Vector<double> trainOutput{-50.0, -40.0, -30.0, -20.0, -10.0, 0.0, 10.0, 20.0, 30.0, 40.0, 50.0};
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	a8 e4       	ldi	r26, 0x48	; 72
    1b42:	b2 ec       	ldi	r27, 0xC2	; 194
    1b44:	89 a7       	std	Y+41, r24	; 0x29
    1b46:	9a a7       	std	Y+42, r25	; 0x2a
    1b48:	ab a7       	std	Y+43, r26	; 0x2b
    1b4a:	bc a7       	std	Y+44, r27	; 0x2c
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	a0 e2       	ldi	r26, 0x20	; 32
    1b52:	b2 ec       	ldi	r27, 0xC2	; 194
    1b54:	8d a3       	std	Y+37, r24	; 0x25
    1b56:	9e a3       	std	Y+38, r25	; 0x26
    1b58:	af a3       	std	Y+39, r26	; 0x27
    1b5a:	b8 a7       	std	Y+40, r27	; 0x28
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	a0 ef       	ldi	r26, 0xF0	; 240
    1b62:	b1 ec       	ldi	r27, 0xC1	; 193
    1b64:	89 a3       	std	Y+33, r24	; 0x21
    1b66:	9a a3       	std	Y+34, r25	; 0x22
    1b68:	ab a3       	std	Y+35, r26	; 0x23
    1b6a:	bc a3       	std	Y+36, r27	; 0x24
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	a0 ea       	ldi	r26, 0xA0	; 160
    1b72:	b1 ec       	ldi	r27, 0xC1	; 193
    1b74:	8d 8f       	std	Y+29, r24	; 0x1d
    1b76:	9e 8f       	std	Y+30, r25	; 0x1e
    1b78:	af 8f       	std	Y+31, r26	; 0x1f
    1b7a:	b8 a3       	std	Y+32, r27	; 0x20
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	a0 e2       	ldi	r26, 0x20	; 32
    1b82:	b1 ec       	ldi	r27, 0xC1	; 193
    1b84:	89 8f       	std	Y+25, r24	; 0x19
    1b86:	9a 8f       	std	Y+26, r25	; 0x1a
    1b88:	ab 8f       	std	Y+27, r26	; 0x1b
    1b8a:	bc 8f       	std	Y+28, r27	; 0x1c
    1b8c:	1d 8a       	std	Y+21, r1	; 0x15
    1b8e:	1e 8a       	std	Y+22, r1	; 0x16
    1b90:	1f 8a       	std	Y+23, r1	; 0x17
    1b92:	18 8e       	std	Y+24, r1	; 0x18
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	a0 e2       	ldi	r26, 0x20	; 32
    1b9a:	b1 e4       	ldi	r27, 0x41	; 65
    1b9c:	89 8b       	std	Y+17, r24	; 0x11
    1b9e:	9a 8b       	std	Y+18, r25	; 0x12
    1ba0:	ab 8b       	std	Y+19, r26	; 0x13
    1ba2:	bc 8b       	std	Y+20, r27	; 0x14
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	a0 ea       	ldi	r26, 0xA0	; 160
    1baa:	b1 e4       	ldi	r27, 0x41	; 65
    1bac:	8d 87       	std	Y+13, r24	; 0x0d
    1bae:	9e 87       	std	Y+14, r25	; 0x0e
    1bb0:	af 87       	std	Y+15, r26	; 0x0f
    1bb2:	b8 8b       	std	Y+16, r27	; 0x10
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a0 ef       	ldi	r26, 0xF0	; 240
    1bba:	b1 e4       	ldi	r27, 0x41	; 65
    1bbc:	89 87       	std	Y+9, r24	; 0x09
    1bbe:	9a 87       	std	Y+10, r25	; 0x0a
    1bc0:	ab 87       	std	Y+11, r26	; 0x0b
    1bc2:	bc 87       	std	Y+12, r27	; 0x0c
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	a0 e2       	ldi	r26, 0x20	; 32
    1bca:	b2 e4       	ldi	r27, 0x42	; 66
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
    1bce:	9e 83       	std	Y+6, r25	; 0x06
    1bd0:	af 83       	std	Y+7, r26	; 0x07
    1bd2:	b8 87       	std	Y+8, r27	; 0x08
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	a8 e4       	ldi	r26, 0x48	; 72
    1bda:	b2 e4       	ldi	r27, 0x42	; 66
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	9a 83       	std	Y+2, r25	; 0x02
    1be0:	ab 83       	std	Y+3, r26	; 0x03
    1be2:	bc 83       	std	Y+4, r27	; 0x04
    1be4:	ce 01       	movw	r24, r28
    1be6:	01 96       	adiw	r24, 0x01	; 1
    1be8:	9f 93       	push	r25
    1bea:	8f 93       	push	r24
    1bec:	04 96       	adiw	r24, 0x04	; 4
    1bee:	9f 93       	push	r25
    1bf0:	8f 93       	push	r24
    1bf2:	04 96       	adiw	r24, 0x04	; 4
    1bf4:	9f 93       	push	r25
    1bf6:	8f 93       	push	r24
    1bf8:	04 96       	adiw	r24, 0x04	; 4
    1bfa:	4c 01       	movw	r8, r24
    1bfc:	de 01       	movw	r26, r28
    1bfe:	51 96       	adiw	r26, 0x11	; 17
    1c00:	5d 01       	movw	r10, r26
    1c02:	9e 01       	movw	r18, r28
    1c04:	2b 5e       	subi	r18, 0xEB	; 235
    1c06:	3f 4f       	sbci	r19, 0xFF	; 255
    1c08:	69 01       	movw	r12, r18
    1c0a:	0c 96       	adiw	r24, 0x0c	; 12
    1c0c:	7c 01       	movw	r14, r24
    1c0e:	0c 52       	subi	r16, 0x2C	; 44
    1c10:	11 09       	sbc	r17, r1
    1c12:	24 5f       	subi	r18, 0xF4	; 244
    1c14:	3f 4f       	sbci	r19, 0xFF	; 255
    1c16:	ae 01       	movw	r20, r28
    1c18:	4b 5d       	subi	r20, 0xDB	; 219
    1c1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c1c:	be 01       	movw	r22, r28
    1c1e:	67 5d       	subi	r22, 0xD7	; 215
    1c20:	7f 4f       	sbci	r23, 0xFF	; 255
    1c22:	8c 5b       	subi	r24, 0xBC	; 188
    1c24:	9f 4f       	sbci	r25, 0xFF	; 255
    1c26:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_ZN9container6VectorIdEC1IIdddddddddddEEEDpOKT_>

    // The constructor.
    ml::linreg::LinReg linReg{trainInput, trainOutput, serial};
    1c2a:	20 91 00 04 	lds	r18, 0x0400	; 0x800400 <_ZN12_GLOBAL__N_16serialE>
    1c2e:	30 91 01 04 	lds	r19, 0x0401	; 0x800401 <_ZN12_GLOBAL__N_16serialE+0x1>
    1c32:	ae 01       	movw	r20, r28
    1c34:	43 5a       	subi	r20, 0xA3	; 163
    1c36:	5f 4f       	sbci	r21, 0xFF	; 255
    1c38:	be 01       	movw	r22, r28
    1c3a:	67 5a       	subi	r22, 0xA7	; 167
    1c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3e:	ce 01       	movw	r24, r28
    1c40:	8f 59       	subi	r24, 0x9F	; 159
    1c42:	9f 4f       	sbci	r25, 0xFF	; 255
    1c44:	0e 94 ff 10 	call	0x21fe	; 0x21fe <_ZN2ml6linreg6LinRegC1ERKN9container6VectorIdEES6_RN6driver15SerialInterfaceE>

    if (!linReg.trainWithNoEpoch(learningRate)) {
    1c48:	46 e6       	ldi	r20, 0x66	; 102
    1c4a:	56 e6       	ldi	r21, 0x66	; 102
    1c4c:	66 e6       	ldi	r22, 0x66	; 102
    1c4e:	7e e3       	ldi	r23, 0x3E	; 62
    1c50:	ce 01       	movw	r24, r28
    1c52:	8f 59       	subi	r24, 0x9F	; 159
    1c54:	9f 4f       	sbci	r25, 0xFF	; 255
    1c56:	0e 94 0c 10 	call	0x2018	; 0x2018 <_ZN2ml6linreg6LinReg16trainWithNoEpochEd>
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	81 11       	cpse	r24, r1
    1c66:	0b c0       	rjmp	.+22     	; 0x1c7e <main+0x2aa>
        serial.printf("Training failed!\n");
    1c68:	67 e2       	ldi	r22, 0x27	; 39
    1c6a:	73 e0       	ldi	r23, 0x03	; 3
    1c6c:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <_ZN12_GLOBAL__N_16serialE>
    1c70:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <_ZN12_GLOBAL__N_16serialE+0x1>
    1c74:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
        return -1;
    1c78:	0f ef       	ldi	r16, 0xFF	; 255
    1c7a:	1f ef       	ldi	r17, 0xFF	; 255
    1c7c:	88 c0       	rjmp	.+272    	; 0x1d8e <main+0x3ba>
    }
    serial.printf("Training finished!\n");
    1c7e:	69 e3       	ldi	r22, 0x39	; 57
    1c80:	73 e0       	ldi	r23, 0x03	; 3
    1c82:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <_ZN12_GLOBAL__N_16serialE>
    1c86:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <_ZN12_GLOBAL__N_16serialE+0x1>
    1c8a:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
    printPredictions(linReg, trainInput);
    1c8e:	2e 01       	movw	r4, r28
    1c90:	b1 e6       	ldi	r27, 0x61	; 97
    1c92:	4b 0e       	add	r4, r27
    1c94:	51 1c       	adc	r5, r1
    1c96:	be 01       	movw	r22, r28
    1c98:	67 5a       	subi	r22, 0xA7	; 167
    1c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9c:	c2 01       	movw	r24, r4
    1c9e:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN12_GLOBAL__N_116printPredictionsERKN2ml6linreg9InterfaceERKN9container6VectorIdEE>
    // Gällande ADC:
    // read returnerar ett värde mellan 0 - 1023.
    // dutyCycle returnerar ett värde mellan 0.0 - 1.0 (den tar ADC-värdet / 1023.0).
    // inputVoltage tar duty_cycle * spänningen, så den returnerar motsvarande värde mellan 0 - 5 V.

    serial.printf("Hello, Jobo!\n");
    1ca2:	6d e4       	ldi	r22, 0x4D	; 77
    1ca4:	73 e0       	ldi	r23, 0x03	; 3
    1ca6:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <_ZN12_GLOBAL__N_16serialE>
    1caa:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <_ZN12_GLOBAL__N_16serialE+0x1>
    1cae:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
    // Skapa och träna LinReg-modellen här.

    // Initialize the GPIO devices.
    Gpio led{9U, Gpio::Direction::Output};
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	42 e0       	ldi	r20, 0x02	; 2
    1cb8:	69 e0       	ldi	r22, 0x09	; 9
    1cba:	ce 01       	movw	r24, r28
    1cbc:	8d 57       	subi	r24, 0x7D	; 125
    1cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc0:	0e 94 83 04 	call	0x906	; 0x906 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE>
    Gpio button{8U, Gpio::Direction::InputPullup, buttonCallback};
    1cc4:	29 ea       	ldi	r18, 0xA9	; 169
    1cc6:	39 e0       	ldi	r19, 0x09	; 9
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	68 e0       	ldi	r22, 0x08	; 8
    1ccc:	ce 01       	movw	r24, r28
    1cce:	88 57       	subi	r24, 0x78	; 120
    1cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd2:	0e 94 83 04 	call	0x906	; 0x906 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE>

    // Initialize the timers.
    Timer debounceTimer{300U, debounceTimerCallback};
    1cd6:	00 e0       	ldi	r16, 0x00	; 0
    1cd8:	22 ea       	ldi	r18, 0xA2	; 162
    1cda:	39 e0       	ldi	r19, 0x09	; 9
    1cdc:	4c e2       	ldi	r20, 0x2C	; 44
    1cde:	51 e0       	ldi	r21, 0x01	; 1
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	83 57       	subi	r24, 0x73	; 115
    1ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cea:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN6driver10atmega328p5TimerC1EmPFvvEb>
    Timer predictTimer{60000UL, predictTimerCallback};
    1cee:	2b e9       	ldi	r18, 0x9B	; 155
    1cf0:	39 e0       	ldi	r19, 0x09	; 9
    1cf2:	40 e6       	ldi	r20, 0x60	; 96
    1cf4:	5a ee       	ldi	r21, 0xEA	; 234
    1cf6:	60 e0       	ldi	r22, 0x00	; 0
    1cf8:	70 e0       	ldi	r23, 0x00	; 0
    1cfa:	ce 01       	movw	r24, r28
    1cfc:	8a 56       	subi	r24, 0x6A	; 106
    1cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1d00:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN6driver10atmega328p5TimerC1EmPFvvEb>

    // Obtain a reference to the singleton watchdog timer instance.
    auto& watchdog{Watchdog::getInstance()};
    1d04:	0e 94 82 09 	call	0x1304	; 0x1304 <_ZN6driver10atmega328p8Watchdog11getInstanceEv>
    1d08:	6c 01       	movw	r12, r24

    // Obtain a reference to the singleton EEPROM instance.
    auto& eeprom{Eeprom::getInstance()};
    1d0a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN6driver10atmega328p6Eeprom11getInstanceEv>
    1d0e:	5c 01       	movw	r10, r24

    // Obtain a reference to the singleton ADC instance.
    auto& adc{Adc::getInstance()};
    1d10:	0e 94 46 01 	call	0x28c	; 0x28c <_ZN6driver10atmega328p3Adc11getInstanceEv>

    // Initialize the system with the given hardware.
    // Skicka med din LinReg-modell till system-klassen, där i körs prediktion etc.
    target::System system{led, button, debounceTimer, predictTimer, serial, watchdog, eeprom, adc, linReg, sensorPin};
    1d14:	e0 90 00 04 	lds	r14, 0x0400	; 0x800400 <_ZN12_GLOBAL__N_16serialE>
    1d18:	f0 90 01 04 	lds	r15, 0x0401	; 0x800401 <_ZN12_GLOBAL__N_16serialE+0x1>
    1d1c:	3e 01       	movw	r6, r28
    1d1e:	2f e9       	ldi	r18, 0x9F	; 159
    1d20:	62 0e       	add	r6, r18
    1d22:	71 1c       	adc	r7, r1
    1d24:	20 e1       	ldi	r18, 0x10	; 16
    1d26:	2f 93       	push	r18
    1d28:	5f 92       	push	r5
    1d2a:	4f 92       	push	r4
    1d2c:	4c 01       	movw	r8, r24
    1d2e:	8e 01       	movw	r16, r28
    1d30:	0a 56       	subi	r16, 0x6A	; 106
    1d32:	1f 4f       	sbci	r17, 0xFF	; 255
    1d34:	9e 01       	movw	r18, r28
    1d36:	23 57       	subi	r18, 0x73	; 115
    1d38:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3a:	ae 01       	movw	r20, r28
    1d3c:	48 57       	subi	r20, 0x78	; 120
    1d3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d40:	be 01       	movw	r22, r28
    1d42:	6d 57       	subi	r22, 0x7D	; 125
    1d44:	7f 4f       	sbci	r23, 0xFF	; 255
    1d46:	c3 01       	movw	r24, r6
    1d48:	0e 94 76 11 	call	0x22ec	; 0x22ec <_ZN6target6SystemC1ERN6driver13GpioInterfaceES3_RNS1_14TimerInterfaceES5_RNS1_15SerialInterfaceERNS1_17WatchdogInterfaceERNS1_15EepromInterfaceERNS1_12AdcInterfaceERN2ml6linreg9InterfaceEh>
    mySys = &system;
    1d4c:	70 92 03 04 	sts	0x0403, r7	; 0x800403 <_ZN12_GLOBAL__N_15mySysE+0x1>
    1d50:	60 92 02 04 	sts	0x0402, r6	; 0x800402 <_ZN12_GLOBAL__N_15mySysE>

    // Run the system perpetually on the target MCU.
    mySys->run();
    1d54:	c3 01       	movw	r24, r6
    1d56:	0e 94 43 12 	call	0x2486	; 0x2486 <_ZN6target6System3runEv>
    // Obtain a reference to the singleton ADC instance.
    auto& adc{Adc::getInstance()};

    // Initialize the system with the given hardware.
    // Skicka med din LinReg-modell till system-klassen, där i körs prediktion etc.
    target::System system{led, button, debounceTimer, predictTimer, serial, watchdog, eeprom, adc, linReg, sensorPin};
    1d5a:	c3 01       	movw	r24, r6
    1d5c:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <_ZN6target6SystemD1Ev>
    Gpio led{9U, Gpio::Direction::Output};
    Gpio button{8U, Gpio::Direction::InputPullup, buttonCallback};

    // Initialize the timers.
    Timer debounceTimer{300U, debounceTimerCallback};
    Timer predictTimer{60000UL, predictTimerCallback};
    1d60:	c8 01       	movw	r24, r16
    1d62:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN6driver10atmega328p5TimerD1Ev>
    // Initialize the GPIO devices.
    Gpio led{9U, Gpio::Direction::Output};
    Gpio button{8U, Gpio::Direction::InputPullup, buttonCallback};

    // Initialize the timers.
    Timer debounceTimer{300U, debounceTimerCallback};
    1d66:	ce 01       	movw	r24, r28
    1d68:	83 57       	subi	r24, 0x73	; 115
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN6driver10atmega328p5TimerD1Ev>
    serial.printf("Hello, Jobo!\n");
    // Skapa och träna LinReg-modellen här.

    // Initialize the GPIO devices.
    Gpio led{9U, Gpio::Direction::Output};
    Gpio button{8U, Gpio::Direction::InputPullup, buttonCallback};
    1d70:	ce 01       	movw	r24, r28
    1d72:	88 57       	subi	r24, 0x78	; 120
    1d74:	9f 4f       	sbci	r25, 0xFF	; 255
    1d76:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6driver10atmega328p4GpioD1Ev>

    serial.printf("Hello, Jobo!\n");
    // Skapa och träna LinReg-modellen här.

    // Initialize the GPIO devices.
    Gpio led{9U, Gpio::Direction::Output};
    1d7a:	ce 01       	movw	r24, r28
    1d7c:	8d 57       	subi	r24, 0x7D	; 125
    1d7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d80:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6driver10atmega328p4GpioD1Ev>
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0

    // Run the system perpetually on the target MCU.
    mySys->run();

    // This point should never be reached; the system is intended to run indefinitely on the target MCU.
    return 0;
    1d8a:	00 e0       	ldi	r16, 0x00	; 0
    1d8c:	10 e0       	ldi	r17, 0x00	; 0
    // The data we want to train our model with.
    const container::Vector<double> trainInput{0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0};
    const container::Vector<double> trainOutput{-50.0, -40.0, -30.0, -20.0, -10.0, 0.0, 10.0, 20.0, 30.0, 40.0, 50.0};

    // The constructor.
    ml::linreg::LinReg linReg{trainInput, trainOutput, serial};
    1d8e:	ce 01       	movw	r24, r28
    1d90:	8f 59       	subi	r24, 0x9F	; 159
    1d92:	9f 4f       	sbci	r25, 0xFF	; 255
    1d94:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_ZN2ml6linreg6LinRegD1Ev>
    // Learingrate for the training.
    constexpr double learningRate{0.225};
    constexpr uint8_t sensorPin{16U};
    // The data we want to train our model with.
    const container::Vector<double> trainInput{0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0};
    const container::Vector<double> trainOutput{-50.0, -40.0, -30.0, -20.0, -10.0, 0.0, 10.0, 20.0, 30.0, 40.0, 50.0};
    1d98:	ce 01       	movw	r24, r28
    1d9a:	83 5a       	subi	r24, 0xA3	; 163
    1d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_ZN9container6VectorIdED1Ev>
        
    // Learingrate for the training.
    constexpr double learningRate{0.225};
    constexpr uint8_t sensorPin{16U};
    // The data we want to train our model with.
    const container::Vector<double> trainInput{0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0};
    1da2:	ce 01       	movw	r24, r28
    1da4:	87 5a       	subi	r24, 0xA7	; 167
    1da6:	9f 4f       	sbci	r25, 0xFF	; 255
    1da8:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_ZN9container6VectorIdED1Ev>
    // Run the system perpetually on the target MCU.
    mySys->run();

    // This point should never be reached; the system is intended to run indefinitely on the target MCU.
    return 0;
}
    1dac:	c8 01       	movw	r24, r16
    1dae:	cf 54       	subi	r28, 0x4F	; 79
    1db0:	df 4f       	sbci	r29, 0xFF	; 255
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	ff 90       	pop	r15
    1dc6:	ef 90       	pop	r14
    1dc8:	df 90       	pop	r13
    1dca:	cf 90       	pop	r12
    1dcc:	bf 90       	pop	r11
    1dce:	af 90       	pop	r10
    1dd0:	9f 90       	pop	r9
    1dd2:	8f 90       	pop	r8
    1dd4:	7f 90       	pop	r7
    1dd6:	6f 90       	pop	r6
    1dd8:	5f 90       	pop	r5
    1dda:	4f 90       	pop	r4
    1ddc:	08 95       	ret

00001dde <_ZNK2ml6linreg6LinReg7predictEd>:
        myIndex[i] = i;
    }
}   
//--------------------------------------------------------------------------------//
double LinReg::predict(const double input) const noexcept
{
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	ec 01       	movw	r28, r24
    1de4:	9a 01       	movw	r18, r20
    1de6:	ab 01       	movw	r20, r22
    return (myWeight * input + myBias);
    1de8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dea:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dec:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dee:	9f 85       	ldd	r25, Y+15	; 0x0f
    1df0:	0e 94 ce 14 	call	0x299c	; 0x299c <__mulsf3>
    1df4:	28 85       	ldd	r18, Y+8	; 0x08
    1df6:	39 85       	ldd	r19, Y+9	; 0x09
    1df8:	4a 85       	ldd	r20, Y+10	; 0x0a
    1dfa:	5b 85       	ldd	r21, Y+11	; 0x0b
    1dfc:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__addsf3>
}
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	08 95       	ret

00001e06 <_ZNK2ml6linreg6LinReg13getEpochsUsedEv>:
    }
    return true;
}
//--------------------------------------------------------------------------------//
int LinReg::getEpochsUsed() const noexcept 
{
    1e06:	fc 01       	movw	r30, r24
    if (myEpochsUsed == 0)
    1e08:	84 89       	ldd	r24, Z+20	; 0x14
    1e0a:	95 89       	ldd	r25, Z+21	; 0x15
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	11 f4       	brne	.+4      	; 0x1e14 <_ZNK2ml6linreg6LinReg13getEpochsUsedEv+0xe>
    { 
        return myEpochCount;
    1e10:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e12:	93 8d       	ldd	r25, Z+27	; 0x1b
    } 
    return myEpochsUsed;
}
    1e14:	08 95       	ret

00001e16 <_ZNK2ml6linreg6LinReg7getBiasEv>:
//--------------------------------------------------------------------------------//
double LinReg::getBias() const noexcept {return myBias; }
    1e16:	fc 01       	movw	r30, r24
    1e18:	60 85       	ldd	r22, Z+8	; 0x08
    1e1a:	71 85       	ldd	r23, Z+9	; 0x09
    1e1c:	82 85       	ldd	r24, Z+10	; 0x0a
    1e1e:	93 85       	ldd	r25, Z+11	; 0x0b
    1e20:	08 95       	ret

00001e22 <_ZNK2ml6linreg6LinReg9getWeightEv>:
//--------------------------------------------------------------------------------//
double LinReg::getWeight() const noexcept {return myWeight; }
    1e22:	fc 01       	movw	r30, r24
    1e24:	64 85       	ldd	r22, Z+12	; 0x0c
    1e26:	75 85       	ldd	r23, Z+13	; 0x0d
    1e28:	86 85       	ldd	r24, Z+14	; 0x0e
    1e2a:	97 85       	ldd	r25, Z+15	; 0x0f
    1e2c:	08 95       	ret

00001e2e <_ZN2ml6linreg12_GLOBAL__N_110initRandomEv>:
    // Create a static local variable, which indicates whether the generator has been initialized.
    // This line (with the initialization) is only run once.
    static auto initialized{false};

    // Terminate the function if the generator already has been initialized.
    if (initialized) { return; }
    1e2e:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <_ZZN2ml6linreg12_GLOBAL__N_110initRandomEvE11initialized>
    1e32:	81 11       	cpse	r24, r1
    1e34:	0a c0       	rjmp	.+20     	; 0x1e4a <_ZN2ml6linreg12_GLOBAL__N_110initRandomEv+0x1c>

    // Initialize the generator, use the current time as seed (start of the random sequence).
    // Get the current time via time(nullptr).
    srand(time(nullptr));
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	0e 94 95 00 	call	0x12a	; 0x12a <time>
    1e3e:	cb 01       	movw	r24, r22
    1e40:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <srand>

    // Mark the random generator as initialized.
    initialized = true;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <_ZZN2ml6linreg12_GLOBAL__N_110initRandomEvE11initialized>
    1e4a:	08 95       	ret

00001e4c <_ZN2ml6linreg12_GLOBAL__N_114randomStartValEv>:
 * @return Random floating-point number between 0.0 - 1.0.
 */
double randomStartVal() noexcept
{
    // Divide rand() by RAND_MAX, cast RAND_MAX to double to ensure floating-point division.
    return rand() / static_cast<double>(RAND_MAX);
    1e4c:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <rand>
    1e50:	bc 01       	movw	r22, r24
    1e52:	99 0f       	add	r25, r25
    1e54:	88 0b       	sbc	r24, r24
    1e56:	99 0b       	sbc	r25, r25
    1e58:	0e 94 19 14 	call	0x2832	; 0x2832 <__floatsisf>
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	3e ef       	ldi	r19, 0xFE	; 254
    1e60:	4f ef       	ldi	r20, 0xFF	; 255
    1e62:	56 e4       	ldi	r21, 0x46	; 70
    1e64:	0e 94 6f 13 	call	0x26de	; 0x26de <__divsf3>
}
    1e68:	08 95       	ret

00001e6a <_ZNK9container6VectorIjE4sizeEv>:
template <typename T>
const T* Vector<T>::data() const noexcept { return myData; }

// -----------------------------------------------------------------------------
template <typename T>
size_t Vector<T>::size() const noexcept { return mySize; }
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	82 81       	ldd	r24, Z+2	; 0x02
    1e6e:	93 81       	ldd	r25, Z+3	; 0x03
    1e70:	08 95       	ret

00001e72 <_ZN9container6VectorIjEixEj>:

// -----------------------------------------------------------------------------
template <typename T>
T& Vector<T>::operator[](const size_t index) noexcept 
{ 
    return myData[index]; 
    1e72:	fc 01       	movw	r30, r24
    1e74:	80 81       	ld	r24, Z
    1e76:	91 81       	ldd	r25, Z+1	; 0x01
    1e78:	66 0f       	add	r22, r22
    1e7a:	77 1f       	adc	r23, r23
}
    1e7c:	86 0f       	add	r24, r22
    1e7e:	97 1f       	adc	r25, r23
    1e80:	08 95       	ret

00001e82 <_ZN2ml6linreg12_GLOBAL__N_17shuffleERN9container6VectorIjEE>:
 * @brief Shuffle the content of the given vector.
 * 
 * @param[in, out] data Reference to the vector to shuffle.
 */
void shuffle(container::Vector<size_t>& data) noexcept
{
    1e82:	af 92       	push	r10
    1e84:	bf 92       	push	r11
    1e86:	cf 92       	push	r12
    1e88:	df 92       	push	r13
    1e8a:	ef 92       	push	r14
    1e8c:	ff 92       	push	r15
    1e8e:	0f 93       	push	r16
    1e90:	1f 93       	push	r17
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	ec 01       	movw	r28, r24
    // Shuffle the vector by swapping each element with a random element.
    for (size_t i{}; i < data.size(); ++i)
    1e98:	00 e0       	ldi	r16, 0x00	; 0
    1e9a:	10 e0       	ldi	r17, 0x00	; 0
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZNK9container6VectorIjE4sizeEv>
    1ea2:	08 17       	cp	r16, r24
    1ea4:	19 07       	cpc	r17, r25
    1ea6:	38 f5       	brcc	.+78     	; 0x1ef6 <_ZN2ml6linreg12_GLOBAL__N_17shuffleERN9container6VectorIjEE+0x74>
    {
        // Get a random index r (between 0-4 if we have five training sets).
        const auto r{rand() % data.size()};
    1ea8:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <rand>
    1eac:	7c 01       	movw	r14, r24
    1eae:	ce 01       	movw	r24, r28
    1eb0:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZNK9container6VectorIjE4sizeEv>
    1eb4:	bc 01       	movw	r22, r24
    1eb6:	c7 01       	movw	r24, r14
    1eb8:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <__udivmodhi4>
    1ebc:	7c 01       	movw	r14, r24

        // Swap the elements at index i and r => make a copy of data[i].
        const auto temp{data[i]};
    1ebe:	b8 01       	movw	r22, r16
    1ec0:	ce 01       	movw	r24, r28
    1ec2:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_ZN9container6VectorIjEixEj>
    1ec6:	6c 01       	movw	r12, r24
    1ec8:	fc 01       	movw	r30, r24
    1eca:	a0 80       	ld	r10, Z
    1ecc:	b1 80       	ldd	r11, Z+1	; 0x01

        // Copy data[r] to data[i] => now we have two instances of data[r] in the vector.
        data[i] = data[r];
    1ece:	b7 01       	movw	r22, r14
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_ZN9container6VectorIjEixEj>
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	80 81       	ld	r24, Z
    1eda:	91 81       	ldd	r25, Z+1	; 0x01
    1edc:	f6 01       	movw	r30, r12
    1ede:	91 83       	std	Z+1, r25	; 0x01
    1ee0:	80 83       	st	Z, r24

        // Finally put the copy of the "old" data[i] to data[r] => we have swapped the elements.
        data[r] = temp;
    1ee2:	b7 01       	movw	r22, r14
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_ZN9container6VectorIjEixEj>
    1eea:	fc 01       	movw	r30, r24
    1eec:	b1 82       	std	Z+1, r11	; 0x01
    1eee:	a0 82       	st	Z, r10
 * @param[in, out] data Reference to the vector to shuffle.
 */
void shuffle(container::Vector<size_t>& data) noexcept
{
    // Shuffle the vector by swapping each element with a random element.
    for (size_t i{}; i < data.size(); ++i)
    1ef0:	0f 5f       	subi	r16, 0xFF	; 255
    1ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef4:	d3 cf       	rjmp	.-90     	; 0x1e9c <_ZN2ml6linreg12_GLOBAL__N_17shuffleERN9container6VectorIjEE+0x1a>
        data[i] = data[r];

        // Finally put the copy of the "old" data[i] to data[r] => we have swapped the elements.
        data[r] = temp;
    }
}
    1ef6:	df 91       	pop	r29
    1ef8:	cf 91       	pop	r28
    1efa:	1f 91       	pop	r17
    1efc:	0f 91       	pop	r16
    1efe:	ff 90       	pop	r15
    1f00:	ef 90       	pop	r14
    1f02:	df 90       	pop	r13
    1f04:	cf 90       	pop	r12
    1f06:	bf 90       	pop	r11
    1f08:	af 90       	pop	r10
    1f0a:	08 95       	ret

00001f0c <_ZNK9container6VectorIdE4sizeEv>:
template <typename T>
const T* Vector<T>::data() const noexcept { return myData; }

// -----------------------------------------------------------------------------
template <typename T>
size_t Vector<T>::size() const noexcept { return mySize; }
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	82 81       	ldd	r24, Z+2	; 0x02
    1f10:	93 81       	ldd	r25, Z+3	; 0x03
    1f12:	08 95       	ret

00001f14 <_ZN9container6VectorIjEC1Ev>:
{
// -----------------------------------------------------------------------------
template <typename T>
Vector<T>::Vector() noexcept
    : myData{nullptr}
    , mySize{} {}
    1f14:	fc 01       	movw	r30, r24
    1f16:	11 82       	std	Z+1, r1	; 0x01
    1f18:	10 82       	st	Z, r1
    1f1a:	13 82       	std	Z+3, r1	; 0x03
    1f1c:	12 82       	std	Z+2, r1	; 0x02
    1f1e:	08 95       	ret

00001f20 <_ZN9container6VectorIjE6resizeEj>:
    mySize = 0U;
}

// -----------------------------------------------------------------------------
template <typename T>
bool Vector<T>::resize(const size_t newSize) noexcept 
    1f20:	0f 93       	push	r16
    1f22:	1f 93       	push	r17
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
    1f28:	ec 01       	movw	r28, r24
    1f2a:	8b 01       	movw	r16, r22

// -----------------------------------------------------------------------------
template <typename T>
inline T* reallocMemory(T* block, const size_t newSize) noexcept
{
    return static_cast<T*>(realloc(block, sizeof(T) * newSize));
    1f2c:	66 0f       	add	r22, r22
    1f2e:	77 1f       	adc	r23, r23
    1f30:	88 81       	ld	r24, Y
    1f32:	99 81       	ldd	r25, Y+1	; 0x01
    1f34:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <realloc>
{
    auto copy{utils::reallocMemory<T>(myData, newSize)};
    if (copy == nullptr) { return false; }
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	31 f0       	breq	.+12     	; 0x1f48 <_ZN9container6VectorIjE6resizeEj+0x28>
    myData = copy;
    1f3c:	99 83       	std	Y+1, r25	; 0x01
    1f3e:	88 83       	st	Y, r24
    mySize = newSize;
    1f40:	1b 83       	std	Y+3, r17	; 0x03
    1f42:	0a 83       	std	Y+2, r16	; 0x02
    return true;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	01 c0       	rjmp	.+2      	; 0x1f4a <_ZN9container6VectorIjE6resizeEj+0x2a>
// -----------------------------------------------------------------------------
template <typename T>
bool Vector<T>::resize(const size_t newSize) noexcept 
{
    auto copy{utils::reallocMemory<T>(myData, newSize)};
    if (copy == nullptr) { return false; }
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    myData = copy;
    mySize = newSize;
    return true;
}
    1f4a:	df 91       	pop	r29
    1f4c:	cf 91       	pop	r28
    1f4e:	1f 91       	pop	r17
    1f50:	0f 91       	pop	r16
    1f52:	08 95       	ret

00001f54 <_ZNK9container6VectorIdEixEj>:

// -----------------------------------------------------------------------------
template <typename T>
const T& Vector<T>::operator[](const size_t index) const noexcept 
{ 
    return myData[index]; 
    1f54:	fc 01       	movw	r30, r24
    1f56:	80 81       	ld	r24, Z
    1f58:	91 81       	ldd	r25, Z+1	; 0x01
    1f5a:	66 0f       	add	r22, r22
    1f5c:	77 1f       	adc	r23, r23
    1f5e:	66 0f       	add	r22, r22
    1f60:	77 1f       	adc	r23, r23
}
    1f62:	86 0f       	add	r24, r22
    1f64:	97 1f       	adc	r25, r23
    1f66:	08 95       	ret

00001f68 <_ZNK2ml6linreg6LinReg13isPredictDoneEv>:
    }
    return true;    
}
//--------------------------------------------------------------------------------//
bool LinReg::isPredictDone() const noexcept
{
    1f68:	cf 92       	push	r12
    1f6a:	df 92       	push	r13
    1f6c:	ef 92       	push	r14
    1f6e:	ff 92       	push	r15
    1f70:	0f 93       	push	r16
    1f72:	1f 93       	push	r17
    1f74:	cf 93       	push	r28
    1f76:	df 93       	push	r29
    1f78:	8c 01       	movw	r16, r24
    constexpr double tol = 1e-4;
    for (size_t i{}; i < myTrainSetCount; ++i)
    1f7a:	c0 e0       	ldi	r28, 0x00	; 0
    1f7c:	d0 e0       	ldi	r29, 0x00	; 0
    1f7e:	f8 01       	movw	r30, r16
    1f80:	86 81       	ldd	r24, Z+6	; 0x06
    1f82:	97 81       	ldd	r25, Z+7	; 0x07
    1f84:	c8 17       	cp	r28, r24
    1f86:	d9 07       	cpc	r29, r25
    1f88:	88 f5       	brcc	.+98     	; 0x1fec <_ZNK2ml6linreg6LinReg13isPredictDoneEv+0x84>
    {
        if (dabs(myPredVector[i] - myTrainOutput[i]) > tol)
    1f8a:	be 01       	movw	r22, r28
    1f8c:	c8 01       	movw	r24, r16
    1f8e:	46 96       	adiw	r24, 0x16	; 22
    1f90:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZNK9container6VectorIdEixEj>
    1f94:	7c 01       	movw	r14, r24
    1f96:	be 01       	movw	r22, r28
    1f98:	f8 01       	movw	r30, r16
    1f9a:	84 81       	ldd	r24, Z+4	; 0x04
    1f9c:	95 81       	ldd	r25, Z+5	; 0x05
    1f9e:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZNK9container6VectorIdEixEj>
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	20 81       	ld	r18, Z
    1fa6:	31 81       	ldd	r19, Z+1	; 0x01
    1fa8:	42 81       	ldd	r20, Z+2	; 0x02
    1faa:	53 81       	ldd	r21, Z+3	; 0x03
    1fac:	f7 01       	movw	r30, r14
    1fae:	60 81       	ld	r22, Z
    1fb0:	71 81       	ldd	r23, Z+1	; 0x01
    1fb2:	82 81       	ldd	r24, Z+2	; 0x02
    1fb4:	93 81       	ldd	r25, Z+3	; 0x03
    1fb6:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__subsf3>
    1fba:	6b 01       	movw	r12, r22
    1fbc:	7c 01       	movw	r14, r24
 * 
 * @return non-negative absolute value of x
 */
static inline double dabs(double x) 
{
    return (x < 0.0) ? -x : x;
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	a9 01       	movw	r20, r18
    1fc4:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__cmpsf2>
    1fc8:	88 23       	and	r24, r24
    1fca:	24 f4       	brge	.+8      	; 0x1fd4 <_ZNK2ml6linreg6LinReg13isPredictDoneEv+0x6c>
    1fcc:	f7 fa       	bst	r15, 7
    1fce:	f0 94       	com	r15
    1fd0:	f7 f8       	bld	r15, 7
    1fd2:	f0 94       	com	r15
bool LinReg::isPredictDone() const noexcept
{
    constexpr double tol = 1e-4;
    for (size_t i{}; i < myTrainSetCount; ++i)
    {
        if (dabs(myPredVector[i] - myTrainOutput[i]) > tol)
    1fd4:	27 e1       	ldi	r18, 0x17	; 23
    1fd6:	37 eb       	ldi	r19, 0xB7	; 183
    1fd8:	41 ed       	ldi	r20, 0xD1	; 209
    1fda:	58 e3       	ldi	r21, 0x38	; 56
    1fdc:	c7 01       	movw	r24, r14
    1fde:	b6 01       	movw	r22, r12
    1fe0:	0e 94 c9 14 	call	0x2992	; 0x2992 <__gesf2>
    1fe4:	18 16       	cp	r1, r24
    1fe6:	24 f0       	brlt	.+8      	; 0x1ff0 <_ZNK2ml6linreg6LinReg13isPredictDoneEv+0x88>
}
//--------------------------------------------------------------------------------//
bool LinReg::isPredictDone() const noexcept
{
    constexpr double tol = 1e-4;
    for (size_t i{}; i < myTrainSetCount; ++i)
    1fe8:	21 96       	adiw	r28, 0x01	; 1
    1fea:	c9 cf       	rjmp	.-110    	; 0x1f7e <_ZNK2ml6linreg6LinReg13isPredictDoneEv+0x16>
        if (dabs(myPredVector[i] - myTrainOutput[i]) > tol)
        {
            return false;
        }
    }
    return true;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	01 c0       	rjmp	.+2      	; 0x1ff2 <_ZNK2ml6linreg6LinReg13isPredictDoneEv+0x8a>
    constexpr double tol = 1e-4;
    for (size_t i{}; i < myTrainSetCount; ++i)
    {
        if (dabs(myPredVector[i] - myTrainOutput[i]) > tol)
        {
            return false;
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    return true;
}
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	1f 91       	pop	r17
    1ff8:	0f 91       	pop	r16
    1ffa:	ff 90       	pop	r15
    1ffc:	ef 90       	pop	r14
    1ffe:	df 90       	pop	r13
    2000:	cf 90       	pop	r12
    2002:	08 95       	ret

00002004 <_ZN9container6VectorIdEixEj>:

// -----------------------------------------------------------------------------
template <typename T>
T& Vector<T>::operator[](const size_t index) noexcept 
{ 
    return myData[index]; 
    2004:	fc 01       	movw	r30, r24
    2006:	80 81       	ld	r24, Z
    2008:	91 81       	ldd	r25, Z+1	; 0x01
    200a:	66 0f       	add	r22, r22
    200c:	77 1f       	adc	r23, r23
    200e:	66 0f       	add	r22, r22
    2010:	77 1f       	adc	r23, r23
}
    2012:	86 0f       	add	r24, r22
    2014:	97 1f       	adc	r25, r23
    2016:	08 95       	ret

00002018 <_ZN2ml6linreg6LinReg16trainWithNoEpochEd>:
{
    return (myWeight * input + myBias);
}
//--------------------------------------------------------------------------------//
bool LinReg::trainWithNoEpoch(double learningRate) noexcept
{
    2018:	2f 92       	push	r2
    201a:	3f 92       	push	r3
    201c:	4f 92       	push	r4
    201e:	5f 92       	push	r5
    2020:	6f 92       	push	r6
    2022:	7f 92       	push	r7
    2024:	8f 92       	push	r8
    2026:	9f 92       	push	r9
    2028:	af 92       	push	r10
    202a:	bf 92       	push	r11
    202c:	cf 92       	push	r12
    202e:	df 92       	push	r13
    2030:	ef 92       	push	r14
    2032:	ff 92       	push	r15
    2034:	0f 93       	push	r16
    2036:	1f 93       	push	r17
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	00 d0       	rcall	.+0      	; 0x203e <_ZN2ml6linreg6LinReg16trainWithNoEpochEd+0x26>
    203e:	00 d0       	rcall	.+0      	; 0x2040 <_ZN2ml6linreg6LinReg16trainWithNoEpochEd+0x28>
    2040:	00 d0       	rcall	.+0      	; 0x2042 <_ZN2ml6linreg6LinReg16trainWithNoEpochEd+0x2a>
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	9e 83       	std	Y+6, r25	; 0x06
    2048:	8d 83       	std	Y+5, r24	; 0x05
    204a:	49 83       	std	Y+1, r20	; 0x01
    204c:	5a 83       	std	Y+2, r21	; 0x02
    204e:	6b 83       	std	Y+3, r22	; 0x03
    2050:	7c 83       	std	Y+4, r23	; 0x04
    if ((0.0 >= learningRate)) { return false;}
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	a9 01       	movw	r20, r18
    2058:	69 81       	ldd	r22, Y+1	; 0x01
    205a:	7a 81       	ldd	r23, Y+2	; 0x02
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__cmpsf2>
    2064:	18 16       	cp	r1, r24
    2066:	0c f0       	brlt	.+2      	; 0x206a <_ZN2ml6linreg6LinReg16trainWithNoEpochEd+0x52>
    2068:	9f c0       	rjmp	.+318    	; 0x21a8 <_ZN2ml6linreg6LinReg16trainWithNoEpochEd+0x190>

    while (1)
    {
        shuffle(myIndex);
    206a:	2d 80       	ldd	r2, Y+5	; 0x05
    206c:	3e 80       	ldd	r3, Y+6	; 0x06
    206e:	8c e1       	ldi	r24, 0x1C	; 28
    2070:	28 0e       	add	r2, r24
    2072:	31 1c       	adc	r3, r1
    2074:	c1 01       	movw	r24, r2
    2076:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <_ZN2ml6linreg12_GLOBAL__N_17shuffleERN9container6VectorIjEE>

        for (size_t k{}; k < myTrainSetCount; k++)
    207a:	c1 2c       	mov	r12, r1
    207c:	d1 2c       	mov	r13, r1
    207e:	ed 81       	ldd	r30, Y+5	; 0x05
    2080:	fe 81       	ldd	r31, Y+6	; 0x06
    2082:	86 81       	ldd	r24, Z+6	; 0x06
    2084:	97 81       	ldd	r25, Z+7	; 0x07
    2086:	c8 16       	cp	r12, r24
    2088:	d9 06       	cpc	r13, r25
    208a:	08 f0       	brcs	.+2      	; 0x208e <_ZN2ml6linreg6LinReg16trainWithNoEpochEd+0x76>
    208c:	7f c0       	rjmp	.+254    	; 0x218c <_ZN2ml6linreg6LinReg16trainWithNoEpochEd+0x174>
        {
            const size_t i = myIndex[k];
    208e:	b6 01       	movw	r22, r12
    2090:	c1 01       	movw	r24, r2
    2092:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_ZN9container6VectorIjEixEj>
    2096:	fc 01       	movw	r30, r24
    2098:	00 81       	ld	r16, Z
    209a:	11 81       	ldd	r17, Z+1	; 0x01
            // ypred = kx + m.
            const auto yPred = predict(myTrainInput[i]);
    209c:	ed 81       	ldd	r30, Y+5	; 0x05
    209e:	fe 81       	ldd	r31, Y+6	; 0x06
    20a0:	e2 80       	ldd	r14, Z+2	; 0x02
    20a2:	f3 80       	ldd	r15, Z+3	; 0x03
    20a4:	b8 01       	movw	r22, r16
    20a6:	c7 01       	movw	r24, r14
    20a8:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZNK9container6VectorIdEixEj>
    20ac:	fc 01       	movw	r30, r24
    20ae:	40 81       	ld	r20, Z
    20b0:	51 81       	ldd	r21, Z+1	; 0x01
    20b2:	62 81       	ldd	r22, Z+2	; 0x02
    20b4:	73 81       	ldd	r23, Z+3	; 0x03
    20b6:	8d 81       	ldd	r24, Y+5	; 0x05
    20b8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ba:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <_ZNK2ml6linreg6LinReg7predictEd>
    20be:	4b 01       	movw	r8, r22
    20c0:	5c 01       	movw	r10, r24

            // e = yref - ypred.
            const auto e = (myTrainOutput[i] - yPred);
    20c2:	b8 01       	movw	r22, r16
    20c4:	ed 81       	ldd	r30, Y+5	; 0x05
    20c6:	fe 81       	ldd	r31, Y+6	; 0x06
    20c8:	84 81       	ldd	r24, Z+4	; 0x04
    20ca:	95 81       	ldd	r25, Z+5	; 0x05
    20cc:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZNK9container6VectorIdEixEj>
    20d0:	fc 01       	movw	r30, r24
    20d2:	60 81       	ld	r22, Z
    20d4:	71 81       	ldd	r23, Z+1	; 0x01
    20d6:	82 81       	ldd	r24, Z+2	; 0x02
    20d8:	93 81       	ldd	r25, Z+3	; 0x03
    20da:	a5 01       	movw	r20, r10
    20dc:	94 01       	movw	r18, r8
    20de:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__subsf3>
    20e2:	9b 01       	movw	r18, r22
    20e4:	ac 01       	movw	r20, r24

            // m = m + e * LR.
            myBias = myBias + (e * learningRate);
    20e6:	ed 81       	ldd	r30, Y+5	; 0x05
    20e8:	fe 81       	ldd	r31, Y+6	; 0x06
    20ea:	40 84       	ldd	r4, Z+8	; 0x08
    20ec:	51 84       	ldd	r5, Z+9	; 0x09
    20ee:	62 84       	ldd	r6, Z+10	; 0x0a
    20f0:	73 84       	ldd	r7, Z+11	; 0x0b
    20f2:	69 81       	ldd	r22, Y+1	; 0x01
    20f4:	7a 81       	ldd	r23, Y+2	; 0x02
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	9c 81       	ldd	r25, Y+4	; 0x04
    20fa:	0e 94 ce 14 	call	0x299c	; 0x299c <__mulsf3>
    20fe:	4b 01       	movw	r8, r22
    2100:	5c 01       	movw	r10, r24
    2102:	9b 01       	movw	r18, r22
    2104:	ac 01       	movw	r20, r24
    2106:	c3 01       	movw	r24, r6
    2108:	b2 01       	movw	r22, r4
    210a:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__addsf3>
    210e:	ed 81       	ldd	r30, Y+5	; 0x05
    2110:	fe 81       	ldd	r31, Y+6	; 0x06
    2112:	60 87       	std	Z+8, r22	; 0x08
    2114:	71 87       	std	Z+9, r23	; 0x09
    2116:	82 87       	std	Z+10, r24	; 0x0a
    2118:	93 87       	std	Z+11, r25	; 0x0b

            // k = k + e * LR * x.
            myWeight = myWeight + (e * learningRate * myTrainInput[i]);
    211a:	44 84       	ldd	r4, Z+12	; 0x0c
    211c:	55 84       	ldd	r5, Z+13	; 0x0d
    211e:	66 84       	ldd	r6, Z+14	; 0x0e
    2120:	77 84       	ldd	r7, Z+15	; 0x0f
    2122:	b8 01       	movw	r22, r16
    2124:	c7 01       	movw	r24, r14
    2126:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZNK9container6VectorIdEixEj>
    212a:	fc 01       	movw	r30, r24
    212c:	20 81       	ld	r18, Z
    212e:	31 81       	ldd	r19, Z+1	; 0x01
    2130:	42 81       	ldd	r20, Z+2	; 0x02
    2132:	53 81       	ldd	r21, Z+3	; 0x03
    2134:	c5 01       	movw	r24, r10
    2136:	b4 01       	movw	r22, r8
    2138:	0e 94 ce 14 	call	0x299c	; 0x299c <__mulsf3>
    213c:	9b 01       	movw	r18, r22
    213e:	ac 01       	movw	r20, r24
    2140:	c3 01       	movw	r24, r6
    2142:	b2 01       	movw	r22, r4
    2144:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__addsf3>
    2148:	ed 81       	ldd	r30, Y+5	; 0x05
    214a:	fe 81       	ldd	r31, Y+6	; 0x06
    214c:	64 87       	std	Z+12, r22	; 0x0c
    214e:	75 87       	std	Z+13, r23	; 0x0d
    2150:	86 87       	std	Z+14, r24	; 0x0e
    2152:	97 87       	std	Z+15, r25	; 0x0f

            myPredVector[i] = predict(myTrainInput[i]);
    2154:	b8 01       	movw	r22, r16
    2156:	cf 01       	movw	r24, r30
    2158:	46 96       	adiw	r24, 0x16	; 22
    215a:	0e 94 02 10 	call	0x2004	; 0x2004 <_ZN9container6VectorIdEixEj>
    215e:	5c 01       	movw	r10, r24
    2160:	b8 01       	movw	r22, r16
    2162:	c7 01       	movw	r24, r14
    2164:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZNK9container6VectorIdEixEj>
    2168:	fc 01       	movw	r30, r24
    216a:	40 81       	ld	r20, Z
    216c:	51 81       	ldd	r21, Z+1	; 0x01
    216e:	62 81       	ldd	r22, Z+2	; 0x02
    2170:	73 81       	ldd	r23, Z+3	; 0x03
    2172:	8d 81       	ldd	r24, Y+5	; 0x05
    2174:	9e 81       	ldd	r25, Y+6	; 0x06
    2176:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <_ZNK2ml6linreg6LinReg7predictEd>
    217a:	f5 01       	movw	r30, r10
    217c:	60 83       	st	Z, r22
    217e:	71 83       	std	Z+1, r23	; 0x01
    2180:	82 83       	std	Z+2, r24	; 0x02
    2182:	93 83       	std	Z+3, r25	; 0x03

    while (1)
    {
        shuffle(myIndex);

        for (size_t k{}; k < myTrainSetCount; k++)
    2184:	ff ef       	ldi	r31, 0xFF	; 255
    2186:	cf 1a       	sub	r12, r31
    2188:	df 0a       	sbc	r13, r31
    218a:	79 cf       	rjmp	.-270    	; 0x207e <_ZN2ml6linreg6LinReg16trainWithNoEpochEd+0x66>
            myWeight = myWeight + (e * learningRate * myTrainInput[i]);

            myPredVector[i] = predict(myTrainInput[i]);
        }
        // Save epochs used.
        myEpochsUsed++;
    218c:	ed 81       	ldd	r30, Y+5	; 0x05
    218e:	fe 81       	ldd	r31, Y+6	; 0x06
    2190:	84 89       	ldd	r24, Z+20	; 0x14
    2192:	95 89       	ldd	r25, Z+21	; 0x15
    2194:	01 96       	adiw	r24, 0x01	; 1
    2196:	95 8b       	std	Z+21, r25	; 0x15
    2198:	84 8b       	std	Z+20, r24	; 0x14
        if (isPredictDone()) { break; }
    219a:	cf 01       	movw	r24, r30
    219c:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <_ZNK2ml6linreg6LinReg13isPredictDoneEv>
    21a0:	88 23       	and	r24, r24
    21a2:	09 f4       	brne	.+2      	; 0x21a6 <_ZN2ml6linreg6LinReg16trainWithNoEpochEd+0x18e>
    21a4:	62 cf       	rjmp	.-316    	; 0x206a <_ZN2ml6linreg6LinReg16trainWithNoEpochEd+0x52>
    21a6:	01 c0       	rjmp	.+2      	; 0x21aa <_ZN2ml6linreg6LinReg16trainWithNoEpochEd+0x192>
    return (myWeight * input + myBias);
}
//--------------------------------------------------------------------------------//
bool LinReg::trainWithNoEpoch(double learningRate) noexcept
{
    if ((0.0 >= learningRate)) { return false;}
    21a8:	80 e0       	ldi	r24, 0x00	; 0
        // Save epochs used.
        myEpochsUsed++;
        if (isPredictDone()) { break; }
    }
    return true;    
}
    21aa:	26 96       	adiw	r28, 0x06	; 6
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	ff 90       	pop	r15
    21c0:	ef 90       	pop	r14
    21c2:	df 90       	pop	r13
    21c4:	cf 90       	pop	r12
    21c6:	bf 90       	pop	r11
    21c8:	af 90       	pop	r10
    21ca:	9f 90       	pop	r9
    21cc:	8f 90       	pop	r8
    21ce:	7f 90       	pop	r7
    21d0:	6f 90       	pop	r6
    21d2:	5f 90       	pop	r5
    21d4:	4f 90       	pop	r4
    21d6:	3f 90       	pop	r3
    21d8:	2f 90       	pop	r2
    21da:	08 95       	ret

000021dc <_ZN9container6VectorIdEC1Ej>:
    : myData{nullptr}
    , mySize{} {}

// -----------------------------------------------------------------------------
template <typename T>
Vector<T>::Vector(const size_t size) noexcept
    21dc:	0f 93       	push	r16
    21de:	1f 93       	push	r17
    21e0:	cf 93       	push	r28
    21e2:	df 93       	push	r29
    21e4:	ec 01       	movw	r28, r24
    21e6:	8b 01       	movw	r16, r22
    : Vector() 
    21e8:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_ZN9container6VectorIdEC1Ev>
{ 
    resize(size); 
    21ec:	b8 01       	movw	r22, r16
    21ee:	ce 01       	movw	r24, r28
    21f0:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <_ZN9container6VectorIdE6resizeEj>
}
    21f4:	df 91       	pop	r29
    21f6:	cf 91       	pop	r28
    21f8:	1f 91       	pop	r17
    21fa:	0f 91       	pop	r16
    21fc:	08 95       	ret

000021fe <_ZN2ml6linreg6LinRegC1ERKN9container6VectorIdEES6_RN6driver15SerialInterfaceE>:
    return x <= y ? x : y;
}
} // namespace

//--------------------------------------------------------------------------------//
LinReg::LinReg(const container::Vector<double>& trainInput,
    21fe:	cf 92       	push	r12
    2200:	df 92       	push	r13
    2202:	ef 92       	push	r14
    2204:	ff 92       	push	r15
    2206:	0f 93       	push	r16
    2208:	1f 93       	push	r17
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	8c 01       	movw	r16, r24
    2210:	6b 01       	movw	r12, r22
    2212:	ca 01       	movw	r24, r20
    2214:	e9 01       	movw	r28, r18
               driver::SerialInterface& serial) noexcept
                :   myTrainInput{trainInput},
                    myTrainOutput{trainOutput},  
                    myTrainSetCount{min(trainInput.size(), trainOutput.size())},
                    myPredVector(myTrainSetCount),
                    mySerial{serial}
    2216:	2f e6       	ldi	r18, 0x6F	; 111
    2218:	33 e0       	ldi	r19, 0x03	; 3
    221a:	f8 01       	movw	r30, r16
    221c:	31 83       	std	Z+1, r19	; 0x01
    221e:	20 83       	st	Z, r18
    2220:	73 83       	std	Z+3, r23	; 0x03
    2222:	62 83       	std	Z+2, r22	; 0x02
    2224:	55 83       	std	Z+5, r21	; 0x05
    2226:	44 83       	std	Z+4, r20	; 0x04
LinReg::LinReg(const container::Vector<double>& trainInput,
               const container::Vector<double>& trainOutput,
               driver::SerialInterface& serial) noexcept
                :   myTrainInput{trainInput},
                    myTrainOutput{trainOutput},  
                    myTrainSetCount{min(trainInput.size(), trainOutput.size())},
    2228:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <_ZNK9container6VectorIdE4sizeEv>
    222c:	7c 01       	movw	r14, r24
    222e:	c6 01       	movw	r24, r12
    2230:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <_ZNK9container6VectorIdE4sizeEv>

//--------------------------------------------------------------------------------//
constexpr size_t min(const size_t x, const size_t y) noexcept
{
    // Return x if x <= y, else y.
    return x <= y ? x : y;
    2234:	e8 16       	cp	r14, r24
    2236:	f9 06       	cpc	r15, r25
    2238:	18 f0       	brcs	.+6      	; 0x2240 <_ZN2ml6linreg6LinRegC1ERKN9container6VectorIdEES6_RN6driver15SerialInterfaceE+0x42>
    223a:	28 2f       	mov	r18, r24
    223c:	89 2f       	mov	r24, r25
    223e:	02 c0       	rjmp	.+4      	; 0x2244 <_ZN2ml6linreg6LinRegC1ERKN9container6VectorIdEES6_RN6driver15SerialInterfaceE+0x46>
    2240:	2e 2d       	mov	r18, r14
    2242:	8f 2d       	mov	r24, r15
               driver::SerialInterface& serial) noexcept
                :   myTrainInput{trainInput},
                    myTrainOutput{trainOutput},  
                    myTrainSetCount{min(trainInput.size(), trainOutput.size())},
                    myPredVector(myTrainSetCount),
                    mySerial{serial}
    2244:	f8 01       	movw	r30, r16
    2246:	26 83       	std	Z+6, r18	; 0x06
    2248:	87 83       	std	Z+7, r24	; 0x07
    224a:	c8 01       	movw	r24, r16
    224c:	40 96       	adiw	r24, 0x10	; 16
    224e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_ZN9container6VectorIdEC1Ev>
    2252:	f8 01       	movw	r30, r16
    2254:	15 8a       	std	Z+21, r1	; 0x15
    2256:	14 8a       	std	Z+20, r1	; 0x14
    2258:	66 81       	ldd	r22, Z+6	; 0x06
    225a:	77 81       	ldd	r23, Z+7	; 0x07
    225c:	c8 01       	movw	r24, r16
    225e:	46 96       	adiw	r24, 0x16	; 22
    2260:	0e 94 ee 10 	call	0x21dc	; 0x21dc <_ZN9container6VectorIdEC1Ej>
    2264:	f8 01       	movw	r30, r16
    2266:	13 8e       	std	Z+27, r1	; 0x1b
    2268:	12 8e       	std	Z+26, r1	; 0x1a
    226a:	78 01       	movw	r14, r16
    226c:	fc e1       	ldi	r31, 0x1C	; 28
    226e:	ef 0e       	add	r14, r31
    2270:	f1 1c       	adc	r15, r1
    2272:	c7 01       	movw	r24, r14
    2274:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <_ZN9container6VectorIjEC1Ev>
    2278:	f8 01       	movw	r30, r16
    227a:	d1 a3       	std	Z+33, r29	; 0x21
    227c:	c0 a3       	std	Z+32, r28	; 0x20
{
    mySerial.setEnabled(true);
    227e:	e8 81       	ld	r30, Y
    2280:	f9 81       	ldd	r31, Y+1	; 0x01
    2282:	02 84       	ldd	r0, Z+10	; 0x0a
    2284:	f3 85       	ldd	r31, Z+11	; 0x0b
    2286:	e0 2d       	mov	r30, r0
    2288:	61 e0       	ldi	r22, 0x01	; 1
    228a:	ce 01       	movw	r24, r28
    228c:	09 95       	icall
    // Random generator and uniform.
    initRandom();
    228e:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <_ZN2ml6linreg12_GLOBAL__N_110initRandomEv>

    // Assign random values.
    myBias = randomStartVal();
    2292:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <_ZN2ml6linreg12_GLOBAL__N_114randomStartValEv>
    2296:	f8 01       	movw	r30, r16
    2298:	60 87       	std	Z+8, r22	; 0x08
    229a:	71 87       	std	Z+9, r23	; 0x09
    229c:	82 87       	std	Z+10, r24	; 0x0a
    229e:	93 87       	std	Z+11, r25	; 0x0b
    myWeight = randomStartVal();
    22a0:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <_ZN2ml6linreg12_GLOBAL__N_114randomStartValEv>
    22a4:	f8 01       	movw	r30, r16
    22a6:	64 87       	std	Z+12, r22	; 0x0c
    22a8:	75 87       	std	Z+13, r23	; 0x0d
    22aa:	86 87       	std	Z+14, r24	; 0x0e
    22ac:	97 87       	std	Z+15, r25	; 0x0f

    myIndex.resize(myTrainSetCount); // Tell vector how many elements it will contain to not allocate vector. 
    22ae:	66 81       	ldd	r22, Z+6	; 0x06
    22b0:	77 81       	ldd	r23, Z+7	; 0x07
    22b2:	c7 01       	movw	r24, r14
    22b4:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <_ZN9container6VectorIjE6resizeEj>

    // Loop to add the indexes in the trainingdata to the vector myIndex.
    for (size_t i{0}; i < myTrainSetCount; i++)
    22b8:	c0 e0       	ldi	r28, 0x00	; 0
    22ba:	d0 e0       	ldi	r29, 0x00	; 0
    22bc:	f8 01       	movw	r30, r16
    22be:	86 81       	ldd	r24, Z+6	; 0x06
    22c0:	97 81       	ldd	r25, Z+7	; 0x07
    22c2:	c8 17       	cp	r28, r24
    22c4:	d9 07       	cpc	r29, r25
    22c6:	48 f4       	brcc	.+18     	; 0x22da <_ZN2ml6linreg6LinRegC1ERKN9container6VectorIdEES6_RN6driver15SerialInterfaceE+0xdc>
    {
        myIndex[i] = i;
    22c8:	be 01       	movw	r22, r28
    22ca:	c7 01       	movw	r24, r14
    22cc:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_ZN9container6VectorIjEixEj>
    22d0:	fc 01       	movw	r30, r24
    22d2:	d1 83       	std	Z+1, r29	; 0x01
    22d4:	c0 83       	st	Z, r28
    myWeight = randomStartVal();

    myIndex.resize(myTrainSetCount); // Tell vector how many elements it will contain to not allocate vector. 

    // Loop to add the indexes in the trainingdata to the vector myIndex.
    for (size_t i{0}; i < myTrainSetCount; i++)
    22d6:	21 96       	adiw	r28, 0x01	; 1
    22d8:	f1 cf       	rjmp	.-30     	; 0x22bc <_ZN2ml6linreg6LinRegC1ERKN9container6VectorIdEES6_RN6driver15SerialInterfaceE+0xbe>
    {
        myIndex[i] = i;
    }
}   
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	1f 91       	pop	r17
    22e0:	0f 91       	pop	r16
    22e2:	ff 90       	pop	r15
    22e4:	ef 90       	pop	r14
    22e6:	df 90       	pop	r13
    22e8:	cf 90       	pop	r12
    22ea:	08 95       	ret

000022ec <_ZN6target6SystemC1ERN6driver13GpioInterfaceES3_RNS1_14TimerInterfaceES5_RNS1_15SerialInterfaceERNS1_17WatchdogInterfaceERNS1_15EepromInterfaceERNS1_12AdcInterfaceERN2ml6linreg9InterfaceEh>:
}

// -----------------------------------------------------------------------------
void System::enableSerialTransmission(const bool enable) noexcept
{
    mySerial.setEnabled(enable);
    22ec:	6f 92       	push	r6
    22ee:	7f 92       	push	r7
    22f0:	8f 92       	push	r8
    22f2:	9f 92       	push	r9
    22f4:	af 92       	push	r10
    22f6:	bf 92       	push	r11
    22f8:	cf 92       	push	r12
    22fa:	df 92       	push	r13
    22fc:	ef 92       	push	r14
    22fe:	ff 92       	push	r15
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	3c 01       	movw	r6, r24
    230e:	ca 01       	movw	r24, r20
    2310:	d3 01       	movw	r26, r6
    2312:	11 96       	adiw	r26, 0x01	; 1
    2314:	7c 93       	st	X, r23
    2316:	6e 93       	st	-X, r22
    2318:	13 96       	adiw	r26, 0x03	; 3
    231a:	5c 93       	st	X, r21
    231c:	4e 93       	st	-X, r20
    231e:	12 97       	sbiw	r26, 0x02	; 2
    2320:	15 96       	adiw	r26, 0x05	; 5
    2322:	3c 93       	st	X, r19
    2324:	2e 93       	st	-X, r18
    2326:	14 97       	sbiw	r26, 0x04	; 4
    2328:	17 96       	adiw	r26, 0x07	; 7
    232a:	1c 93       	st	X, r17
    232c:	0e 93       	st	-X, r16
    232e:	16 97       	sbiw	r26, 0x06	; 6
    2330:	19 96       	adiw	r26, 0x09	; 9
    2332:	fc 92       	st	X, r15
    2334:	ee 92       	st	-X, r14
    2336:	18 97       	sbiw	r26, 0x08	; 8
    2338:	1b 96       	adiw	r26, 0x0b	; 11
    233a:	dc 92       	st	X, r13
    233c:	ce 92       	st	-X, r12
    233e:	1a 97       	sbiw	r26, 0x0a	; 10
    2340:	1d 96       	adiw	r26, 0x0d	; 13
    2342:	bc 92       	st	X, r11
    2344:	ae 92       	st	-X, r10
    2346:	1c 97       	sbiw	r26, 0x0c	; 12
    2348:	1f 96       	adiw	r26, 0x0f	; 15
    234a:	9c 92       	st	X, r9
    234c:	8e 92       	st	-X, r8
    234e:	1e 97       	sbiw	r26, 0x0e	; 14
    2350:	29 89       	ldd	r18, Y+17	; 0x11
    2352:	3a 89       	ldd	r19, Y+18	; 0x12
    2354:	51 96       	adiw	r26, 0x11	; 17
    2356:	3c 93       	st	X, r19
    2358:	2e 93       	st	-X, r18
    235a:	50 97       	sbiw	r26, 0x10	; 16
    235c:	2b 89       	ldd	r18, Y+19	; 0x13
    235e:	52 96       	adiw	r26, 0x12	; 18
    2360:	2c 93       	st	X, r18
    2362:	da 01       	movw	r26, r20
    2364:	ed 91       	ld	r30, X+
    2366:	fc 91       	ld	r31, X
    2368:	04 84       	ldd	r0, Z+12	; 0x0c
    236a:	f5 85       	ldd	r31, Z+13	; 0x0d
    236c:	e0 2d       	mov	r30, r0
    236e:	61 e0       	ldi	r22, 0x01	; 1
    2370:	09 95       	icall
    2372:	f3 01       	movw	r30, r6
    2374:	80 85       	ldd	r24, Z+8	; 0x08
    2376:	91 85       	ldd	r25, Z+9	; 0x09
    2378:	dc 01       	movw	r26, r24
    237a:	ed 91       	ld	r30, X+
    237c:	fc 91       	ld	r31, X
    237e:	02 84       	ldd	r0, Z+10	; 0x0a
    2380:	f3 85       	ldd	r31, Z+11	; 0x0b
    2382:	e0 2d       	mov	r30, r0
    2384:	61 e0       	ldi	r22, 0x01	; 1
    2386:	09 95       	icall
    2388:	f3 01       	movw	r30, r6
    238a:	82 85       	ldd	r24, Z+10	; 0x0a
    238c:	93 85       	ldd	r25, Z+11	; 0x0b
    238e:	dc 01       	movw	r26, r24
    2390:	ed 91       	ld	r30, X+
    2392:	fc 91       	ld	r31, X
    2394:	00 84       	ldd	r0, Z+8	; 0x08
    2396:	f1 85       	ldd	r31, Z+9	; 0x09
    2398:	e0 2d       	mov	r30, r0
    239a:	61 e0       	ldi	r22, 0x01	; 1
    239c:	09 95       	icall
    239e:	f3 01       	movw	r30, r6
    23a0:	86 81       	ldd	r24, Z+6	; 0x06
    23a2:	97 81       	ldd	r25, Z+7	; 0x07
    23a4:	dc 01       	movw	r26, r24
    23a6:	ed 91       	ld	r30, X+
    23a8:	fc 91       	ld	r31, X
    23aa:	06 84       	ldd	r0, Z+14	; 0x0e
    23ac:	f7 85       	ldd	r31, Z+15	; 0x0f
    23ae:	e0 2d       	mov	r30, r0
    23b0:	09 95       	icall
    23b2:	f3 01       	movw	r30, r6
    23b4:	86 85       	ldd	r24, Z+14	; 0x0e
    23b6:	97 85       	ldd	r25, Z+15	; 0x0f
    23b8:	dc 01       	movw	r26, r24
    23ba:	ed 91       	ld	r30, X+
    23bc:	fc 91       	ld	r31, X
    23be:	04 88       	ldd	r0, Z+20	; 0x14
    23c0:	f5 89       	ldd	r31, Z+21	; 0x15
    23c2:	e0 2d       	mov	r30, r0
    23c4:	61 e0       	ldi	r22, 0x01	; 1
    23c6:	09 95       	icall
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	1f 91       	pop	r17
    23ce:	0f 91       	pop	r16
    23d0:	ff 90       	pop	r15
    23d2:	ef 90       	pop	r14
    23d4:	df 90       	pop	r13
    23d6:	cf 90       	pop	r12
    23d8:	bf 90       	pop	r11
    23da:	af 90       	pop	r10
    23dc:	9f 90       	pop	r9
    23de:	8f 90       	pop	r8
    23e0:	7f 90       	pop	r7
    23e2:	6f 90       	pop	r6
    23e4:	08 95       	ret

000023e6 <_ZN6target6SystemD1Ev>:
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    23ea:	ec 01       	movw	r28, r24
    23ec:	88 81       	ld	r24, Y
    23ee:	99 81       	ldd	r25, Y+1	; 0x01
    23f0:	dc 01       	movw	r26, r24
    23f2:	ed 91       	ld	r30, X+
    23f4:	fc 91       	ld	r31, X
    23f6:	00 84       	ldd	r0, Z+8	; 0x08
    23f8:	f1 85       	ldd	r31, Z+9	; 0x09
    23fa:	e0 2d       	mov	r30, r0
    23fc:	60 e0       	ldi	r22, 0x00	; 0
    23fe:	09 95       	icall
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	9b 81       	ldd	r25, Y+3	; 0x03
    2404:	dc 01       	movw	r26, r24
    2406:	ed 91       	ld	r30, X+
    2408:	fc 91       	ld	r31, X
    240a:	04 84       	ldd	r0, Z+12	; 0x0c
    240c:	f5 85       	ldd	r31, Z+13	; 0x0d
    240e:	e0 2d       	mov	r30, r0
    2410:	60 e0       	ldi	r22, 0x00	; 0
    2412:	09 95       	icall
    2414:	8c 81       	ldd	r24, Y+4	; 0x04
    2416:	9d 81       	ldd	r25, Y+5	; 0x05
    2418:	dc 01       	movw	r26, r24
    241a:	ed 91       	ld	r30, X+
    241c:	fc 91       	ld	r31, X
    241e:	00 88       	ldd	r0, Z+16	; 0x10
    2420:	f1 89       	ldd	r31, Z+17	; 0x11
    2422:	e0 2d       	mov	r30, r0
    2424:	09 95       	icall
    2426:	8e 81       	ldd	r24, Y+6	; 0x06
    2428:	9f 81       	ldd	r25, Y+7	; 0x07
    242a:	dc 01       	movw	r26, r24
    242c:	ed 91       	ld	r30, X+
    242e:	fc 91       	ld	r31, X
    2430:	00 88       	ldd	r0, Z+16	; 0x10
    2432:	f1 89       	ldd	r31, Z+17	; 0x11
    2434:	e0 2d       	mov	r30, r0
    2436:	09 95       	icall
    2438:	8a 85       	ldd	r24, Y+10	; 0x0a
    243a:	9b 85       	ldd	r25, Y+11	; 0x0b
    243c:	dc 01       	movw	r26, r24
    243e:	ed 91       	ld	r30, X+
    2440:	fc 91       	ld	r31, X
    2442:	00 84       	ldd	r0, Z+8	; 0x08
    2444:	f1 85       	ldd	r31, Z+9	; 0x09
    2446:	e0 2d       	mov	r30, r0
    2448:	60 e0       	ldi	r22, 0x00	; 0
    244a:	09 95       	icall
    244c:	df 91       	pop	r29
    244e:	cf 91       	pop	r28
    2450:	08 95       	ret

00002452 <_ZN6target6System28handleDebounceTimerInterruptEv>:
    if (myButton.read()) { handleButtonPressed(); }
}

// -----------------------------------------------------------------------------
void System::handleDebounceTimerInterrupt() noexcept
{
    2452:	cf 93       	push	r28
    2454:	df 93       	push	r29
    2456:	ec 01       	movw	r28, r24
    myDebounceTimer.stop();
    2458:	8c 81       	ldd	r24, Y+4	; 0x04
    245a:	9d 81       	ldd	r25, Y+5	; 0x05
    245c:	dc 01       	movw	r26, r24
    245e:	ed 91       	ld	r30, X+
    2460:	fc 91       	ld	r31, X
    2462:	00 88       	ldd	r0, Z+16	; 0x10
    2464:	f1 89       	ldd	r31, Z+17	; 0x11
    2466:	e0 2d       	mov	r30, r0
    2468:	09 95       	icall
    myButton.enableInterruptOnPort(true);
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	9b 81       	ldd	r25, Y+3	; 0x03
    246e:	dc 01       	movw	r26, r24
    2470:	ed 91       	ld	r30, X+
    2472:	fc 91       	ld	r31, X
    2474:	06 84       	ldd	r0, Z+14	; 0x0e
    2476:	f7 85       	ldd	r31, Z+15	; 0x0f
    2478:	e0 2d       	mov	r30, r0
    247a:	61 e0       	ldi	r22, 0x01	; 1
    247c:	09 95       	icall
}
    247e:	df 91       	pop	r29
    2480:	cf 91       	pop	r28
    2482:	08 95       	ret

00002484 <_ZN6target6System27handlepredictTimerInterruptEv>:

// -----------------------------------------------------------------------------
void System::handlepredictTimerInterrupt() noexcept 
{
    2484:	08 95       	ret

00002486 <_ZN6target6System3runEv>:
    // Timern startar om sig själv, så tänk inte på det. 
}

// -----------------------------------------------------------------------------
void System::run() noexcept
{
    2486:	ec 01       	movw	r28, r24
    mySerial.printf("Running the system!\n");
    2488:	6b e7       	ldi	r22, 0x7B	; 123
    248a:	73 e0       	ldi	r23, 0x03	; 3
    248c:	88 85       	ldd	r24, Y+8	; 0x08
    248e:	99 85       	ldd	r25, Y+9	; 0x09
    2490:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
    
    while (1)
    {
        myWatchdog.reset();
    2494:	8a 85       	ldd	r24, Y+10	; 0x0a
    2496:	9b 85       	ldd	r25, Y+11	; 0x0b
    2498:	dc 01       	movw	r26, r24
    249a:	ed 91       	ld	r30, X+
    249c:	fc 91       	ld	r31, X
    249e:	04 84       	ldd	r0, Z+12	; 0x0c
    24a0:	f5 85       	ldd	r31, Z+13	; 0x0d
    24a2:	e0 2d       	mov	r30, r0
    24a4:	09 95       	icall
    24a6:	f6 cf       	rjmp	.-20     	; 0x2494 <_ZN6target6System3runEv+0xe>

000024a8 <_ZN6target6System19handleButtonPressedEv>:
    }
}

// -----------------------------------------------------------------------------
void System::handleButtonPressed() noexcept
{
    24a8:	cf 92       	push	r12
    24aa:	df 92       	push	r13
    24ac:	ef 92       	push	r14
    24ae:	ff 92       	push	r15
    24b0:	0f 93       	push	r16
    24b2:	1f 93       	push	r17
    24b4:	cf 93       	push	r28
    24b6:	df 93       	push	r29
    24b8:	00 d0       	rcall	.+0      	; 0x24ba <_ZN6target6System19handleButtonPressedEv+0x12>
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	8c 01       	movw	r16, r24
    mySerial.printf("Button pressed!\n");
    24c0:	60 e9       	ldi	r22, 0x90	; 144
    24c2:	73 e0       	ldi	r23, 0x03	; 3
    24c4:	dc 01       	movw	r26, r24
    24c6:	18 96       	adiw	r26, 0x08	; 8
    24c8:	8d 91       	ld	r24, X+
    24ca:	9c 91       	ld	r25, X
    24cc:	19 97       	sbiw	r26, 0x09	; 9
    24ce:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>

    // Läs av ADC, prediktera temperaturen och skriv ut den.
    // Nollställ också 60-sekunderstimern.

    const auto inputVoltage{myAdc.inputVoltage(mySensorPin)};
    24d2:	f8 01       	movw	r30, r16
    24d4:	86 85       	ldd	r24, Z+14	; 0x0e
    24d6:	97 85       	ldd	r25, Z+15	; 0x0f
    24d8:	dc 01       	movw	r26, r24
    24da:	ed 91       	ld	r30, X+
    24dc:	fc 91       	ld	r31, X
    24de:	06 84       	ldd	r0, Z+14	; 0x0e
    24e0:	f7 85       	ldd	r31, Z+15	; 0x0f
    24e2:	e0 2d       	mov	r30, r0
    24e4:	d8 01       	movw	r26, r16
    24e6:	52 96       	adiw	r26, 0x12	; 18
    24e8:	6c 91       	ld	r22, X
    24ea:	09 95       	icall
    24ec:	ab 01       	movw	r20, r22
    24ee:	bc 01       	movw	r22, r24
    const auto prediction{myLinReg.predict(inputVoltage)};
    24f0:	f8 01       	movw	r30, r16
    24f2:	80 89       	ldd	r24, Z+16	; 0x10
    24f4:	91 89       	ldd	r25, Z+17	; 0x11
    24f6:	dc 01       	movw	r26, r24
    24f8:	ed 91       	ld	r30, X+
    24fa:	fc 91       	ld	r31, X
    24fc:	06 80       	ldd	r0, Z+6	; 0x06
    24fe:	f7 81       	ldd	r31, Z+7	; 0x07
    2500:	e0 2d       	mov	r30, r0
    2502:	09 95       	icall
    2504:	6b 01       	movw	r12, r22
    2506:	7c 01       	movw	r14, r24
{
    // Case 1: number = 2.7 => we cast 2.7 + 0.5 to int => 3.2 is converted to 3.
    // Case 2: number = 2.3 => we cast 2.3 + 0.5 to int => 2.8 is converted to 2.
    // Case 3: number = -4.7 => we cast -4.7 - 0.5 to int => -5.2 is converted to -5.
    // Case 4: number = -4.2 => we cast -4.2 - 0.5 to int => -4.7 is converted to -4.
    return 0.0 <= number ? static_cast<int>(number + 0.5) : static_cast<int>(number - 0.5);
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	a9 01       	movw	r20, r18
    250e:	0e 94 c9 14 	call	0x2992	; 0x2992 <__gesf2>
    2512:	88 23       	and	r24, r24
    2514:	5c f0       	brlt	.+22     	; 0x252c <_ZN6target6System19handleButtonPressedEv+0x84>
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e0       	ldi	r20, 0x00	; 0
    251c:	5f e3       	ldi	r21, 0x3F	; 63
    251e:	c7 01       	movw	r24, r14
    2520:	b6 01       	movw	r22, r12
    2522:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__addsf3>
    2526:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <__fixsfsi>
    252a:	0a c0       	rjmp	.+20     	; 0x2540 <_ZN6target6System19handleButtonPressedEv+0x98>
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	40 e0       	ldi	r20, 0x00	; 0
    2532:	5f e3       	ldi	r21, 0x3F	; 63
    2534:	c7 01       	movw	r24, r14
    2536:	b6 01       	movw	r22, r12
    2538:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__subsf3>
    253c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <__fixsfsi>
    // Nollställ också 60-sekunderstimern.

    const auto inputVoltage{myAdc.inputVoltage(mySensorPin)};
    const auto prediction{myLinReg.predict(inputVoltage)};
    
    mySerial.printf("The temperature is: %d \n", round(prediction));
    2540:	7a 83       	std	Y+2, r23	; 0x02
    2542:	69 83       	std	Y+1, r22	; 0x01
    2544:	ae 01       	movw	r20, r28
    2546:	4f 5f       	subi	r20, 0xFF	; 255
    2548:	5f 4f       	sbci	r21, 0xFF	; 255
    254a:	61 ea       	ldi	r22, 0xA1	; 161
    254c:	73 e0       	ldi	r23, 0x03	; 3
    254e:	f8 01       	movw	r30, r16
    2550:	80 85       	ldd	r24, Z+8	; 0x08
    2552:	91 85       	ldd	r25, Z+9	; 0x09
    2554:	0e 94 3d 0a 	call	0x147a	; 0x147a <_ZNK6driver15SerialInterface6printfIIiEEEbPKcDpRKT_>
    myPredictTimer.restart();
    2558:	d8 01       	movw	r26, r16
    255a:	16 96       	adiw	r26, 0x06	; 6
    255c:	8d 91       	ld	r24, X+
    255e:	9c 91       	ld	r25, X
    2560:	17 97       	sbiw	r26, 0x07	; 7
    2562:	dc 01       	movw	r26, r24
    2564:	ed 91       	ld	r30, X+
    2566:	fc 91       	ld	r31, X
    2568:	04 88       	ldd	r0, Z+20	; 0x14
    256a:	f5 89       	ldd	r31, Z+21	; 0x15
    256c:	e0 2d       	mov	r30, r0
    256e:	09 95       	icall
}
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	1f 91       	pop	r17
    257a:	0f 91       	pop	r16
    257c:	ff 90       	pop	r15
    257e:	ef 90       	pop	r14
    2580:	df 90       	pop	r13
    2582:	cf 90       	pop	r12
    2584:	08 95       	ret

00002586 <_ZN6target6System21handleButtonInterruptEv>:
    mySerial.setEnabled(enable);
}

// -----------------------------------------------------------------------------
void System::handleButtonInterrupt() noexcept
{
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	ec 01       	movw	r28, r24
    myButton.enableInterruptOnPort(false);
    258c:	8a 81       	ldd	r24, Y+2	; 0x02
    258e:	9b 81       	ldd	r25, Y+3	; 0x03
    2590:	dc 01       	movw	r26, r24
    2592:	ed 91       	ld	r30, X+
    2594:	fc 91       	ld	r31, X
    2596:	06 84       	ldd	r0, Z+14	; 0x0e
    2598:	f7 85       	ldd	r31, Z+15	; 0x0f
    259a:	e0 2d       	mov	r30, r0
    259c:	60 e0       	ldi	r22, 0x00	; 0
    259e:	09 95       	icall
    myDebounceTimer.start();
    25a0:	8c 81       	ldd	r24, Y+4	; 0x04
    25a2:	9d 81       	ldd	r25, Y+5	; 0x05
    25a4:	dc 01       	movw	r26, r24
    25a6:	ed 91       	ld	r30, X+
    25a8:	fc 91       	ld	r31, X
    25aa:	06 84       	ldd	r0, Z+14	; 0x0e
    25ac:	f7 85       	ldd	r31, Z+15	; 0x0f
    25ae:	e0 2d       	mov	r30, r0
    25b0:	09 95       	icall
    if (myButton.read()) { handleButtonPressed(); }
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	9b 81       	ldd	r25, Y+3	; 0x03
    25b6:	dc 01       	movw	r26, r24
    25b8:	ed 91       	ld	r30, X+
    25ba:	fc 91       	ld	r31, X
    25bc:	06 80       	ldd	r0, Z+6	; 0x06
    25be:	f7 81       	ldd	r31, Z+7	; 0x07
    25c0:	e0 2d       	mov	r30, r0
    25c2:	09 95       	icall
    25c4:	88 23       	and	r24, r24
    25c6:	19 f0       	breq	.+6      	; 0x25ce <_ZN6target6System21handleButtonInterruptEv+0x48>
    25c8:	ce 01       	movw	r24, r28
    25ca:	0e 94 54 12 	call	0x24a8	; 0x24a8 <_ZN6target6System19handleButtonPressedEv>
}
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	08 95       	ret

000025d4 <_ZN5utils21globalInterruptEnableEv>:
        _delay_us(1U);
    }
}

// -----------------------------------------------------------------------------
void globalInterruptEnable() noexcept { asm("SEI"); }
    25d4:	78 94       	sei
    25d6:	08 95       	ret

000025d8 <_ZN5utils22globalInterruptDisableEv>:

// -----------------------------------------------------------------------------
void globalInterruptDisable() noexcept { asm("CLI"); }
    25d8:	f8 94       	cli
    25da:	08 95       	ret

000025dc <_ZdlPvj>:

/**
 * @note Definitions required to satisfy the linker when using C++ interfaces and static local 
 *       variables in embedded projects. 
 */
void operator delete(void*, unsigned int) noexcept {}
    25dc:	08 95       	ret

000025de <__cxa_pure_virtual>:
extern "C" void __cxa_pure_virtual() {}
    25de:	08 95       	ret

000025e0 <__cxa_guard_acquire>:
extern "C" int __cxa_guard_acquire (volatile void *g) { return !*(char *)g; }
    25e0:	fc 01       	movw	r30, r24
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	20 81       	ld	r18, Z
    25e8:	22 23       	and	r18, r18
    25ea:	11 f0       	breq	.+4      	; 0x25f0 <__cxa_guard_acquire+0x10>
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	08 95       	ret

000025f2 <__cxa_guard_release>:
extern "C" void __cxa_guard_release (volatile void *g) { *(char *)g = 1; }
    25f2:	21 e0       	ldi	r18, 0x01	; 1
    25f4:	fc 01       	movw	r30, r24
    25f6:	20 83       	st	Z, r18
    25f8:	08 95       	ret

000025fa <__subsf3>:
    25fa:	50 58       	subi	r21, 0x80	; 128

000025fc <__addsf3>:
    25fc:	bb 27       	eor	r27, r27
    25fe:	aa 27       	eor	r26, r26
    2600:	0e 94 15 13 	call	0x262a	; 0x262a <__addsf3x>
    2604:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__fp_round>
    2608:	0e 94 81 14 	call	0x2902	; 0x2902 <__fp_pscA>
    260c:	38 f0       	brcs	.+14     	; 0x261c <__addsf3+0x20>
    260e:	0e 94 88 14 	call	0x2910	; 0x2910 <__fp_pscB>
    2612:	20 f0       	brcs	.+8      	; 0x261c <__addsf3+0x20>
    2614:	39 f4       	brne	.+14     	; 0x2624 <__addsf3+0x28>
    2616:	9f 3f       	cpi	r25, 0xFF	; 255
    2618:	19 f4       	brne	.+6      	; 0x2620 <__addsf3+0x24>
    261a:	26 f4       	brtc	.+8      	; 0x2624 <__addsf3+0x28>
    261c:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__fp_nan>
    2620:	0e f4       	brtc	.+2      	; 0x2624 <__addsf3+0x28>
    2622:	e0 95       	com	r30
    2624:	e7 fb       	bst	r30, 7
    2626:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__fp_inf>

0000262a <__addsf3x>:
    262a:	e9 2f       	mov	r30, r25
    262c:	0e 94 a0 14 	call	0x2940	; 0x2940 <__fp_split3>
    2630:	58 f3       	brcs	.-42     	; 0x2608 <__addsf3+0xc>
    2632:	ba 17       	cp	r27, r26
    2634:	62 07       	cpc	r22, r18
    2636:	73 07       	cpc	r23, r19
    2638:	84 07       	cpc	r24, r20
    263a:	95 07       	cpc	r25, r21
    263c:	20 f0       	brcs	.+8      	; 0x2646 <__addsf3x+0x1c>
    263e:	79 f4       	brne	.+30     	; 0x265e <__addsf3x+0x34>
    2640:	a6 f5       	brtc	.+104    	; 0x26aa <__addsf3x+0x80>
    2642:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__fp_zero>
    2646:	0e f4       	brtc	.+2      	; 0x264a <__addsf3x+0x20>
    2648:	e0 95       	com	r30
    264a:	0b 2e       	mov	r0, r27
    264c:	ba 2f       	mov	r27, r26
    264e:	a0 2d       	mov	r26, r0
    2650:	0b 01       	movw	r0, r22
    2652:	b9 01       	movw	r22, r18
    2654:	90 01       	movw	r18, r0
    2656:	0c 01       	movw	r0, r24
    2658:	ca 01       	movw	r24, r20
    265a:	a0 01       	movw	r20, r0
    265c:	11 24       	eor	r1, r1
    265e:	ff 27       	eor	r31, r31
    2660:	59 1b       	sub	r21, r25
    2662:	99 f0       	breq	.+38     	; 0x268a <__addsf3x+0x60>
    2664:	59 3f       	cpi	r21, 0xF9	; 249
    2666:	50 f4       	brcc	.+20     	; 0x267c <__addsf3x+0x52>
    2668:	50 3e       	cpi	r21, 0xE0	; 224
    266a:	68 f1       	brcs	.+90     	; 0x26c6 <__addsf3x+0x9c>
    266c:	1a 16       	cp	r1, r26
    266e:	f0 40       	sbci	r31, 0x00	; 0
    2670:	a2 2f       	mov	r26, r18
    2672:	23 2f       	mov	r18, r19
    2674:	34 2f       	mov	r19, r20
    2676:	44 27       	eor	r20, r20
    2678:	58 5f       	subi	r21, 0xF8	; 248
    267a:	f3 cf       	rjmp	.-26     	; 0x2662 <__addsf3x+0x38>
    267c:	46 95       	lsr	r20
    267e:	37 95       	ror	r19
    2680:	27 95       	ror	r18
    2682:	a7 95       	ror	r26
    2684:	f0 40       	sbci	r31, 0x00	; 0
    2686:	53 95       	inc	r21
    2688:	c9 f7       	brne	.-14     	; 0x267c <__addsf3x+0x52>
    268a:	7e f4       	brtc	.+30     	; 0x26aa <__addsf3x+0x80>
    268c:	1f 16       	cp	r1, r31
    268e:	ba 0b       	sbc	r27, r26
    2690:	62 0b       	sbc	r22, r18
    2692:	73 0b       	sbc	r23, r19
    2694:	84 0b       	sbc	r24, r20
    2696:	ba f0       	brmi	.+46     	; 0x26c6 <__addsf3x+0x9c>
    2698:	91 50       	subi	r25, 0x01	; 1
    269a:	a1 f0       	breq	.+40     	; 0x26c4 <__addsf3x+0x9a>
    269c:	ff 0f       	add	r31, r31
    269e:	bb 1f       	adc	r27, r27
    26a0:	66 1f       	adc	r22, r22
    26a2:	77 1f       	adc	r23, r23
    26a4:	88 1f       	adc	r24, r24
    26a6:	c2 f7       	brpl	.-16     	; 0x2698 <__addsf3x+0x6e>
    26a8:	0e c0       	rjmp	.+28     	; 0x26c6 <__addsf3x+0x9c>
    26aa:	ba 0f       	add	r27, r26
    26ac:	62 1f       	adc	r22, r18
    26ae:	73 1f       	adc	r23, r19
    26b0:	84 1f       	adc	r24, r20
    26b2:	48 f4       	brcc	.+18     	; 0x26c6 <__addsf3x+0x9c>
    26b4:	87 95       	ror	r24
    26b6:	77 95       	ror	r23
    26b8:	67 95       	ror	r22
    26ba:	b7 95       	ror	r27
    26bc:	f7 95       	ror	r31
    26be:	9e 3f       	cpi	r25, 0xFE	; 254
    26c0:	08 f0       	brcs	.+2      	; 0x26c4 <__addsf3x+0x9a>
    26c2:	b0 cf       	rjmp	.-160    	; 0x2624 <__addsf3+0x28>
    26c4:	93 95       	inc	r25
    26c6:	88 0f       	add	r24, r24
    26c8:	08 f0       	brcs	.+2      	; 0x26cc <__addsf3x+0xa2>
    26ca:	99 27       	eor	r25, r25
    26cc:	ee 0f       	add	r30, r30
    26ce:	97 95       	ror	r25
    26d0:	87 95       	ror	r24
    26d2:	08 95       	ret

000026d4 <__cmpsf2>:
    26d4:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__fp_cmp>
    26d8:	08 f4       	brcc	.+2      	; 0x26dc <__cmpsf2+0x8>
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	08 95       	ret

000026de <__divsf3>:
    26de:	0e 94 83 13 	call	0x2706	; 0x2706 <__divsf3x>
    26e2:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__fp_round>
    26e6:	0e 94 88 14 	call	0x2910	; 0x2910 <__fp_pscB>
    26ea:	58 f0       	brcs	.+22     	; 0x2702 <__divsf3+0x24>
    26ec:	0e 94 81 14 	call	0x2902	; 0x2902 <__fp_pscA>
    26f0:	40 f0       	brcs	.+16     	; 0x2702 <__divsf3+0x24>
    26f2:	29 f4       	brne	.+10     	; 0x26fe <__divsf3+0x20>
    26f4:	5f 3f       	cpi	r21, 0xFF	; 255
    26f6:	29 f0       	breq	.+10     	; 0x2702 <__divsf3+0x24>
    26f8:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__fp_inf>
    26fc:	51 11       	cpse	r21, r1
    26fe:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__fp_szero>
    2702:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__fp_nan>

00002706 <__divsf3x>:
    2706:	0e 94 a0 14 	call	0x2940	; 0x2940 <__fp_split3>
    270a:	68 f3       	brcs	.-38     	; 0x26e6 <__divsf3+0x8>

0000270c <__divsf3_pse>:
    270c:	99 23       	and	r25, r25
    270e:	b1 f3       	breq	.-20     	; 0x26fc <__divsf3+0x1e>
    2710:	55 23       	and	r21, r21
    2712:	91 f3       	breq	.-28     	; 0x26f8 <__divsf3+0x1a>
    2714:	95 1b       	sub	r25, r21
    2716:	55 0b       	sbc	r21, r21
    2718:	bb 27       	eor	r27, r27
    271a:	aa 27       	eor	r26, r26
    271c:	62 17       	cp	r22, r18
    271e:	73 07       	cpc	r23, r19
    2720:	84 07       	cpc	r24, r20
    2722:	38 f0       	brcs	.+14     	; 0x2732 <__divsf3_pse+0x26>
    2724:	9f 5f       	subi	r25, 0xFF	; 255
    2726:	5f 4f       	sbci	r21, 0xFF	; 255
    2728:	22 0f       	add	r18, r18
    272a:	33 1f       	adc	r19, r19
    272c:	44 1f       	adc	r20, r20
    272e:	aa 1f       	adc	r26, r26
    2730:	a9 f3       	breq	.-22     	; 0x271c <__divsf3_pse+0x10>
    2732:	35 d0       	rcall	.+106    	; 0x279e <__divsf3_pse+0x92>
    2734:	0e 2e       	mov	r0, r30
    2736:	3a f0       	brmi	.+14     	; 0x2746 <__divsf3_pse+0x3a>
    2738:	e0 e8       	ldi	r30, 0x80	; 128
    273a:	32 d0       	rcall	.+100    	; 0x27a0 <__divsf3_pse+0x94>
    273c:	91 50       	subi	r25, 0x01	; 1
    273e:	50 40       	sbci	r21, 0x00	; 0
    2740:	e6 95       	lsr	r30
    2742:	00 1c       	adc	r0, r0
    2744:	ca f7       	brpl	.-14     	; 0x2738 <__divsf3_pse+0x2c>
    2746:	2b d0       	rcall	.+86     	; 0x279e <__divsf3_pse+0x92>
    2748:	fe 2f       	mov	r31, r30
    274a:	29 d0       	rcall	.+82     	; 0x279e <__divsf3_pse+0x92>
    274c:	66 0f       	add	r22, r22
    274e:	77 1f       	adc	r23, r23
    2750:	88 1f       	adc	r24, r24
    2752:	bb 1f       	adc	r27, r27
    2754:	26 17       	cp	r18, r22
    2756:	37 07       	cpc	r19, r23
    2758:	48 07       	cpc	r20, r24
    275a:	ab 07       	cpc	r26, r27
    275c:	b0 e8       	ldi	r27, 0x80	; 128
    275e:	09 f0       	breq	.+2      	; 0x2762 <__divsf3_pse+0x56>
    2760:	bb 0b       	sbc	r27, r27
    2762:	80 2d       	mov	r24, r0
    2764:	bf 01       	movw	r22, r30
    2766:	ff 27       	eor	r31, r31
    2768:	93 58       	subi	r25, 0x83	; 131
    276a:	5f 4f       	sbci	r21, 0xFF	; 255
    276c:	3a f0       	brmi	.+14     	; 0x277c <__divsf3_pse+0x70>
    276e:	9e 3f       	cpi	r25, 0xFE	; 254
    2770:	51 05       	cpc	r21, r1
    2772:	78 f0       	brcs	.+30     	; 0x2792 <__divsf3_pse+0x86>
    2774:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__fp_inf>
    2778:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__fp_szero>
    277c:	5f 3f       	cpi	r21, 0xFF	; 255
    277e:	e4 f3       	brlt	.-8      	; 0x2778 <__divsf3_pse+0x6c>
    2780:	98 3e       	cpi	r25, 0xE8	; 232
    2782:	d4 f3       	brlt	.-12     	; 0x2778 <__divsf3_pse+0x6c>
    2784:	86 95       	lsr	r24
    2786:	77 95       	ror	r23
    2788:	67 95       	ror	r22
    278a:	b7 95       	ror	r27
    278c:	f7 95       	ror	r31
    278e:	9f 5f       	subi	r25, 0xFF	; 255
    2790:	c9 f7       	brne	.-14     	; 0x2784 <__divsf3_pse+0x78>
    2792:	88 0f       	add	r24, r24
    2794:	91 1d       	adc	r25, r1
    2796:	96 95       	lsr	r25
    2798:	87 95       	ror	r24
    279a:	97 f9       	bld	r25, 7
    279c:	08 95       	ret
    279e:	e1 e0       	ldi	r30, 0x01	; 1
    27a0:	66 0f       	add	r22, r22
    27a2:	77 1f       	adc	r23, r23
    27a4:	88 1f       	adc	r24, r24
    27a6:	bb 1f       	adc	r27, r27
    27a8:	62 17       	cp	r22, r18
    27aa:	73 07       	cpc	r23, r19
    27ac:	84 07       	cpc	r24, r20
    27ae:	ba 07       	cpc	r27, r26
    27b0:	20 f0       	brcs	.+8      	; 0x27ba <__divsf3_pse+0xae>
    27b2:	62 1b       	sub	r22, r18
    27b4:	73 0b       	sbc	r23, r19
    27b6:	84 0b       	sbc	r24, r20
    27b8:	ba 0b       	sbc	r27, r26
    27ba:	ee 1f       	adc	r30, r30
    27bc:	88 f7       	brcc	.-30     	; 0x27a0 <__divsf3_pse+0x94>
    27be:	e0 95       	com	r30
    27c0:	08 95       	ret

000027c2 <__fixsfsi>:
    27c2:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__fixunssfsi>
    27c6:	68 94       	set
    27c8:	b1 11       	cpse	r27, r1
    27ca:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__fp_szero>
    27ce:	08 95       	ret

000027d0 <__fixunssfsi>:
    27d0:	0e 94 a8 14 	call	0x2950	; 0x2950 <__fp_splitA>
    27d4:	88 f0       	brcs	.+34     	; 0x27f8 <__fixunssfsi+0x28>
    27d6:	9f 57       	subi	r25, 0x7F	; 127
    27d8:	98 f0       	brcs	.+38     	; 0x2800 <__fixunssfsi+0x30>
    27da:	b9 2f       	mov	r27, r25
    27dc:	99 27       	eor	r25, r25
    27de:	b7 51       	subi	r27, 0x17	; 23
    27e0:	b0 f0       	brcs	.+44     	; 0x280e <__fixunssfsi+0x3e>
    27e2:	e1 f0       	breq	.+56     	; 0x281c <__fixunssfsi+0x4c>
    27e4:	66 0f       	add	r22, r22
    27e6:	77 1f       	adc	r23, r23
    27e8:	88 1f       	adc	r24, r24
    27ea:	99 1f       	adc	r25, r25
    27ec:	1a f0       	brmi	.+6      	; 0x27f4 <__fixunssfsi+0x24>
    27ee:	ba 95       	dec	r27
    27f0:	c9 f7       	brne	.-14     	; 0x27e4 <__fixunssfsi+0x14>
    27f2:	14 c0       	rjmp	.+40     	; 0x281c <__fixunssfsi+0x4c>
    27f4:	b1 30       	cpi	r27, 0x01	; 1
    27f6:	91 f0       	breq	.+36     	; 0x281c <__fixunssfsi+0x4c>
    27f8:	0e 94 c2 14 	call	0x2984	; 0x2984 <__fp_zero>
    27fc:	b1 e0       	ldi	r27, 0x01	; 1
    27fe:	08 95       	ret
    2800:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__fp_zero>
    2804:	67 2f       	mov	r22, r23
    2806:	78 2f       	mov	r23, r24
    2808:	88 27       	eor	r24, r24
    280a:	b8 5f       	subi	r27, 0xF8	; 248
    280c:	39 f0       	breq	.+14     	; 0x281c <__fixunssfsi+0x4c>
    280e:	b9 3f       	cpi	r27, 0xF9	; 249
    2810:	cc f3       	brlt	.-14     	; 0x2804 <__fixunssfsi+0x34>
    2812:	86 95       	lsr	r24
    2814:	77 95       	ror	r23
    2816:	67 95       	ror	r22
    2818:	b3 95       	inc	r27
    281a:	d9 f7       	brne	.-10     	; 0x2812 <__fixunssfsi+0x42>
    281c:	3e f4       	brtc	.+14     	; 0x282c <__fixunssfsi+0x5c>
    281e:	90 95       	com	r25
    2820:	80 95       	com	r24
    2822:	70 95       	com	r23
    2824:	61 95       	neg	r22
    2826:	7f 4f       	sbci	r23, 0xFF	; 255
    2828:	8f 4f       	sbci	r24, 0xFF	; 255
    282a:	9f 4f       	sbci	r25, 0xFF	; 255
    282c:	08 95       	ret

0000282e <__floatunsisf>:
    282e:	e8 94       	clt
    2830:	09 c0       	rjmp	.+18     	; 0x2844 <__floatsisf+0x12>

00002832 <__floatsisf>:
    2832:	97 fb       	bst	r25, 7
    2834:	3e f4       	brtc	.+14     	; 0x2844 <__floatsisf+0x12>
    2836:	90 95       	com	r25
    2838:	80 95       	com	r24
    283a:	70 95       	com	r23
    283c:	61 95       	neg	r22
    283e:	7f 4f       	sbci	r23, 0xFF	; 255
    2840:	8f 4f       	sbci	r24, 0xFF	; 255
    2842:	9f 4f       	sbci	r25, 0xFF	; 255
    2844:	99 23       	and	r25, r25
    2846:	a9 f0       	breq	.+42     	; 0x2872 <__floatsisf+0x40>
    2848:	f9 2f       	mov	r31, r25
    284a:	96 e9       	ldi	r25, 0x96	; 150
    284c:	bb 27       	eor	r27, r27
    284e:	93 95       	inc	r25
    2850:	f6 95       	lsr	r31
    2852:	87 95       	ror	r24
    2854:	77 95       	ror	r23
    2856:	67 95       	ror	r22
    2858:	b7 95       	ror	r27
    285a:	f1 11       	cpse	r31, r1
    285c:	f8 cf       	rjmp	.-16     	; 0x284e <__floatsisf+0x1c>
    285e:	fa f4       	brpl	.+62     	; 0x289e <__floatsisf+0x6c>
    2860:	bb 0f       	add	r27, r27
    2862:	11 f4       	brne	.+4      	; 0x2868 <__floatsisf+0x36>
    2864:	60 ff       	sbrs	r22, 0
    2866:	1b c0       	rjmp	.+54     	; 0x289e <__floatsisf+0x6c>
    2868:	6f 5f       	subi	r22, 0xFF	; 255
    286a:	7f 4f       	sbci	r23, 0xFF	; 255
    286c:	8f 4f       	sbci	r24, 0xFF	; 255
    286e:	9f 4f       	sbci	r25, 0xFF	; 255
    2870:	16 c0       	rjmp	.+44     	; 0x289e <__floatsisf+0x6c>
    2872:	88 23       	and	r24, r24
    2874:	11 f0       	breq	.+4      	; 0x287a <__floatsisf+0x48>
    2876:	96 e9       	ldi	r25, 0x96	; 150
    2878:	11 c0       	rjmp	.+34     	; 0x289c <__floatsisf+0x6a>
    287a:	77 23       	and	r23, r23
    287c:	21 f0       	breq	.+8      	; 0x2886 <__floatsisf+0x54>
    287e:	9e e8       	ldi	r25, 0x8E	; 142
    2880:	87 2f       	mov	r24, r23
    2882:	76 2f       	mov	r23, r22
    2884:	05 c0       	rjmp	.+10     	; 0x2890 <__floatsisf+0x5e>
    2886:	66 23       	and	r22, r22
    2888:	71 f0       	breq	.+28     	; 0x28a6 <__floatsisf+0x74>
    288a:	96 e8       	ldi	r25, 0x86	; 134
    288c:	86 2f       	mov	r24, r22
    288e:	70 e0       	ldi	r23, 0x00	; 0
    2890:	60 e0       	ldi	r22, 0x00	; 0
    2892:	2a f0       	brmi	.+10     	; 0x289e <__floatsisf+0x6c>
    2894:	9a 95       	dec	r25
    2896:	66 0f       	add	r22, r22
    2898:	77 1f       	adc	r23, r23
    289a:	88 1f       	adc	r24, r24
    289c:	da f7       	brpl	.-10     	; 0x2894 <__floatsisf+0x62>
    289e:	88 0f       	add	r24, r24
    28a0:	96 95       	lsr	r25
    28a2:	87 95       	ror	r24
    28a4:	97 f9       	bld	r25, 7
    28a6:	08 95       	ret

000028a8 <__fp_cmp>:
    28a8:	99 0f       	add	r25, r25
    28aa:	00 08       	sbc	r0, r0
    28ac:	55 0f       	add	r21, r21
    28ae:	aa 0b       	sbc	r26, r26
    28b0:	e0 e8       	ldi	r30, 0x80	; 128
    28b2:	fe ef       	ldi	r31, 0xFE	; 254
    28b4:	16 16       	cp	r1, r22
    28b6:	17 06       	cpc	r1, r23
    28b8:	e8 07       	cpc	r30, r24
    28ba:	f9 07       	cpc	r31, r25
    28bc:	c0 f0       	brcs	.+48     	; 0x28ee <__fp_cmp+0x46>
    28be:	12 16       	cp	r1, r18
    28c0:	13 06       	cpc	r1, r19
    28c2:	e4 07       	cpc	r30, r20
    28c4:	f5 07       	cpc	r31, r21
    28c6:	98 f0       	brcs	.+38     	; 0x28ee <__fp_cmp+0x46>
    28c8:	62 1b       	sub	r22, r18
    28ca:	73 0b       	sbc	r23, r19
    28cc:	84 0b       	sbc	r24, r20
    28ce:	95 0b       	sbc	r25, r21
    28d0:	39 f4       	brne	.+14     	; 0x28e0 <__fp_cmp+0x38>
    28d2:	0a 26       	eor	r0, r26
    28d4:	61 f0       	breq	.+24     	; 0x28ee <__fp_cmp+0x46>
    28d6:	23 2b       	or	r18, r19
    28d8:	24 2b       	or	r18, r20
    28da:	25 2b       	or	r18, r21
    28dc:	21 f4       	brne	.+8      	; 0x28e6 <__fp_cmp+0x3e>
    28de:	08 95       	ret
    28e0:	0a 26       	eor	r0, r26
    28e2:	09 f4       	brne	.+2      	; 0x28e6 <__fp_cmp+0x3e>
    28e4:	a1 40       	sbci	r26, 0x01	; 1
    28e6:	a6 95       	lsr	r26
    28e8:	8f ef       	ldi	r24, 0xFF	; 255
    28ea:	81 1d       	adc	r24, r1
    28ec:	81 1d       	adc	r24, r1
    28ee:	08 95       	ret

000028f0 <__fp_inf>:
    28f0:	97 f9       	bld	r25, 7
    28f2:	9f 67       	ori	r25, 0x7F	; 127
    28f4:	80 e8       	ldi	r24, 0x80	; 128
    28f6:	70 e0       	ldi	r23, 0x00	; 0
    28f8:	60 e0       	ldi	r22, 0x00	; 0
    28fa:	08 95       	ret

000028fc <__fp_nan>:
    28fc:	9f ef       	ldi	r25, 0xFF	; 255
    28fe:	80 ec       	ldi	r24, 0xC0	; 192
    2900:	08 95       	ret

00002902 <__fp_pscA>:
    2902:	00 24       	eor	r0, r0
    2904:	0a 94       	dec	r0
    2906:	16 16       	cp	r1, r22
    2908:	17 06       	cpc	r1, r23
    290a:	18 06       	cpc	r1, r24
    290c:	09 06       	cpc	r0, r25
    290e:	08 95       	ret

00002910 <__fp_pscB>:
    2910:	00 24       	eor	r0, r0
    2912:	0a 94       	dec	r0
    2914:	12 16       	cp	r1, r18
    2916:	13 06       	cpc	r1, r19
    2918:	14 06       	cpc	r1, r20
    291a:	05 06       	cpc	r0, r21
    291c:	08 95       	ret

0000291e <__fp_round>:
    291e:	09 2e       	mov	r0, r25
    2920:	03 94       	inc	r0
    2922:	00 0c       	add	r0, r0
    2924:	11 f4       	brne	.+4      	; 0x292a <__fp_round+0xc>
    2926:	88 23       	and	r24, r24
    2928:	52 f0       	brmi	.+20     	; 0x293e <__fp_round+0x20>
    292a:	bb 0f       	add	r27, r27
    292c:	40 f4       	brcc	.+16     	; 0x293e <__fp_round+0x20>
    292e:	bf 2b       	or	r27, r31
    2930:	11 f4       	brne	.+4      	; 0x2936 <__fp_round+0x18>
    2932:	60 ff       	sbrs	r22, 0
    2934:	04 c0       	rjmp	.+8      	; 0x293e <__fp_round+0x20>
    2936:	6f 5f       	subi	r22, 0xFF	; 255
    2938:	7f 4f       	sbci	r23, 0xFF	; 255
    293a:	8f 4f       	sbci	r24, 0xFF	; 255
    293c:	9f 4f       	sbci	r25, 0xFF	; 255
    293e:	08 95       	ret

00002940 <__fp_split3>:
    2940:	57 fd       	sbrc	r21, 7
    2942:	90 58       	subi	r25, 0x80	; 128
    2944:	44 0f       	add	r20, r20
    2946:	55 1f       	adc	r21, r21
    2948:	59 f0       	breq	.+22     	; 0x2960 <__fp_splitA+0x10>
    294a:	5f 3f       	cpi	r21, 0xFF	; 255
    294c:	71 f0       	breq	.+28     	; 0x296a <__fp_splitA+0x1a>
    294e:	47 95       	ror	r20

00002950 <__fp_splitA>:
    2950:	88 0f       	add	r24, r24
    2952:	97 fb       	bst	r25, 7
    2954:	99 1f       	adc	r25, r25
    2956:	61 f0       	breq	.+24     	; 0x2970 <__fp_splitA+0x20>
    2958:	9f 3f       	cpi	r25, 0xFF	; 255
    295a:	79 f0       	breq	.+30     	; 0x297a <__fp_splitA+0x2a>
    295c:	87 95       	ror	r24
    295e:	08 95       	ret
    2960:	12 16       	cp	r1, r18
    2962:	13 06       	cpc	r1, r19
    2964:	14 06       	cpc	r1, r20
    2966:	55 1f       	adc	r21, r21
    2968:	f2 cf       	rjmp	.-28     	; 0x294e <__fp_split3+0xe>
    296a:	46 95       	lsr	r20
    296c:	f1 df       	rcall	.-30     	; 0x2950 <__fp_splitA>
    296e:	08 c0       	rjmp	.+16     	; 0x2980 <__fp_splitA+0x30>
    2970:	16 16       	cp	r1, r22
    2972:	17 06       	cpc	r1, r23
    2974:	18 06       	cpc	r1, r24
    2976:	99 1f       	adc	r25, r25
    2978:	f1 cf       	rjmp	.-30     	; 0x295c <__fp_splitA+0xc>
    297a:	86 95       	lsr	r24
    297c:	71 05       	cpc	r23, r1
    297e:	61 05       	cpc	r22, r1
    2980:	08 94       	sec
    2982:	08 95       	ret

00002984 <__fp_zero>:
    2984:	e8 94       	clt

00002986 <__fp_szero>:
    2986:	bb 27       	eor	r27, r27
    2988:	66 27       	eor	r22, r22
    298a:	77 27       	eor	r23, r23
    298c:	cb 01       	movw	r24, r22
    298e:	97 f9       	bld	r25, 7
    2990:	08 95       	ret

00002992 <__gesf2>:
    2992:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__fp_cmp>
    2996:	08 f4       	brcc	.+2      	; 0x299a <__gesf2+0x8>
    2998:	8f ef       	ldi	r24, 0xFF	; 255
    299a:	08 95       	ret

0000299c <__mulsf3>:
    299c:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__mulsf3x>
    29a0:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__fp_round>
    29a4:	0e 94 81 14 	call	0x2902	; 0x2902 <__fp_pscA>
    29a8:	38 f0       	brcs	.+14     	; 0x29b8 <__mulsf3+0x1c>
    29aa:	0e 94 88 14 	call	0x2910	; 0x2910 <__fp_pscB>
    29ae:	20 f0       	brcs	.+8      	; 0x29b8 <__mulsf3+0x1c>
    29b0:	95 23       	and	r25, r21
    29b2:	11 f0       	breq	.+4      	; 0x29b8 <__mulsf3+0x1c>
    29b4:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__fp_inf>
    29b8:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__fp_nan>
    29bc:	11 24       	eor	r1, r1
    29be:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__fp_szero>

000029c2 <__mulsf3x>:
    29c2:	0e 94 a0 14 	call	0x2940	; 0x2940 <__fp_split3>
    29c6:	70 f3       	brcs	.-36     	; 0x29a4 <__mulsf3+0x8>

000029c8 <__mulsf3_pse>:
    29c8:	95 9f       	mul	r25, r21
    29ca:	c1 f3       	breq	.-16     	; 0x29bc <__mulsf3+0x20>
    29cc:	95 0f       	add	r25, r21
    29ce:	50 e0       	ldi	r21, 0x00	; 0
    29d0:	55 1f       	adc	r21, r21
    29d2:	62 9f       	mul	r22, r18
    29d4:	f0 01       	movw	r30, r0
    29d6:	72 9f       	mul	r23, r18
    29d8:	bb 27       	eor	r27, r27
    29da:	f0 0d       	add	r31, r0
    29dc:	b1 1d       	adc	r27, r1
    29de:	63 9f       	mul	r22, r19
    29e0:	aa 27       	eor	r26, r26
    29e2:	f0 0d       	add	r31, r0
    29e4:	b1 1d       	adc	r27, r1
    29e6:	aa 1f       	adc	r26, r26
    29e8:	64 9f       	mul	r22, r20
    29ea:	66 27       	eor	r22, r22
    29ec:	b0 0d       	add	r27, r0
    29ee:	a1 1d       	adc	r26, r1
    29f0:	66 1f       	adc	r22, r22
    29f2:	82 9f       	mul	r24, r18
    29f4:	22 27       	eor	r18, r18
    29f6:	b0 0d       	add	r27, r0
    29f8:	a1 1d       	adc	r26, r1
    29fa:	62 1f       	adc	r22, r18
    29fc:	73 9f       	mul	r23, r19
    29fe:	b0 0d       	add	r27, r0
    2a00:	a1 1d       	adc	r26, r1
    2a02:	62 1f       	adc	r22, r18
    2a04:	83 9f       	mul	r24, r19
    2a06:	a0 0d       	add	r26, r0
    2a08:	61 1d       	adc	r22, r1
    2a0a:	22 1f       	adc	r18, r18
    2a0c:	74 9f       	mul	r23, r20
    2a0e:	33 27       	eor	r19, r19
    2a10:	a0 0d       	add	r26, r0
    2a12:	61 1d       	adc	r22, r1
    2a14:	23 1f       	adc	r18, r19
    2a16:	84 9f       	mul	r24, r20
    2a18:	60 0d       	add	r22, r0
    2a1a:	21 1d       	adc	r18, r1
    2a1c:	82 2f       	mov	r24, r18
    2a1e:	76 2f       	mov	r23, r22
    2a20:	6a 2f       	mov	r22, r26
    2a22:	11 24       	eor	r1, r1
    2a24:	9f 57       	subi	r25, 0x7F	; 127
    2a26:	50 40       	sbci	r21, 0x00	; 0
    2a28:	9a f0       	brmi	.+38     	; 0x2a50 <__mulsf3_pse+0x88>
    2a2a:	f1 f0       	breq	.+60     	; 0x2a68 <__mulsf3_pse+0xa0>
    2a2c:	88 23       	and	r24, r24
    2a2e:	4a f0       	brmi	.+18     	; 0x2a42 <__mulsf3_pse+0x7a>
    2a30:	ee 0f       	add	r30, r30
    2a32:	ff 1f       	adc	r31, r31
    2a34:	bb 1f       	adc	r27, r27
    2a36:	66 1f       	adc	r22, r22
    2a38:	77 1f       	adc	r23, r23
    2a3a:	88 1f       	adc	r24, r24
    2a3c:	91 50       	subi	r25, 0x01	; 1
    2a3e:	50 40       	sbci	r21, 0x00	; 0
    2a40:	a9 f7       	brne	.-22     	; 0x2a2c <__mulsf3_pse+0x64>
    2a42:	9e 3f       	cpi	r25, 0xFE	; 254
    2a44:	51 05       	cpc	r21, r1
    2a46:	80 f0       	brcs	.+32     	; 0x2a68 <__mulsf3_pse+0xa0>
    2a48:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__fp_inf>
    2a4c:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__fp_szero>
    2a50:	5f 3f       	cpi	r21, 0xFF	; 255
    2a52:	e4 f3       	brlt	.-8      	; 0x2a4c <__mulsf3_pse+0x84>
    2a54:	98 3e       	cpi	r25, 0xE8	; 232
    2a56:	d4 f3       	brlt	.-12     	; 0x2a4c <__mulsf3_pse+0x84>
    2a58:	86 95       	lsr	r24
    2a5a:	77 95       	ror	r23
    2a5c:	67 95       	ror	r22
    2a5e:	b7 95       	ror	r27
    2a60:	f7 95       	ror	r31
    2a62:	e7 95       	ror	r30
    2a64:	9f 5f       	subi	r25, 0xFF	; 255
    2a66:	c1 f7       	brne	.-16     	; 0x2a58 <__mulsf3_pse+0x90>
    2a68:	fe 2b       	or	r31, r30
    2a6a:	88 0f       	add	r24, r24
    2a6c:	91 1d       	adc	r25, r1
    2a6e:	96 95       	lsr	r25
    2a70:	87 95       	ror	r24
    2a72:	97 f9       	bld	r25, 7
    2a74:	08 95       	ret

00002a76 <__udivmodhi4>:
    2a76:	aa 1b       	sub	r26, r26
    2a78:	bb 1b       	sub	r27, r27
    2a7a:	51 e1       	ldi	r21, 0x11	; 17
    2a7c:	07 c0       	rjmp	.+14     	; 0x2a8c <__udivmodhi4_ep>

00002a7e <__udivmodhi4_loop>:
    2a7e:	aa 1f       	adc	r26, r26
    2a80:	bb 1f       	adc	r27, r27
    2a82:	a6 17       	cp	r26, r22
    2a84:	b7 07       	cpc	r27, r23
    2a86:	10 f0       	brcs	.+4      	; 0x2a8c <__udivmodhi4_ep>
    2a88:	a6 1b       	sub	r26, r22
    2a8a:	b7 0b       	sbc	r27, r23

00002a8c <__udivmodhi4_ep>:
    2a8c:	88 1f       	adc	r24, r24
    2a8e:	99 1f       	adc	r25, r25
    2a90:	5a 95       	dec	r21
    2a92:	a9 f7       	brne	.-22     	; 0x2a7e <__udivmodhi4_loop>
    2a94:	80 95       	com	r24
    2a96:	90 95       	com	r25
    2a98:	bc 01       	movw	r22, r24
    2a9a:	cd 01       	movw	r24, r26
    2a9c:	08 95       	ret

00002a9e <__ashldi3>:
    2a9e:	0f 93       	push	r16
    2aa0:	08 30       	cpi	r16, 0x08	; 8
    2aa2:	90 f0       	brcs	.+36     	; 0x2ac8 <__ashldi3+0x2a>
    2aa4:	98 2f       	mov	r25, r24
    2aa6:	87 2f       	mov	r24, r23
    2aa8:	76 2f       	mov	r23, r22
    2aaa:	65 2f       	mov	r22, r21
    2aac:	54 2f       	mov	r21, r20
    2aae:	43 2f       	mov	r20, r19
    2ab0:	32 2f       	mov	r19, r18
    2ab2:	22 27       	eor	r18, r18
    2ab4:	08 50       	subi	r16, 0x08	; 8
    2ab6:	f4 cf       	rjmp	.-24     	; 0x2aa0 <__ashldi3+0x2>
    2ab8:	22 0f       	add	r18, r18
    2aba:	33 1f       	adc	r19, r19
    2abc:	44 1f       	adc	r20, r20
    2abe:	55 1f       	adc	r21, r21
    2ac0:	66 1f       	adc	r22, r22
    2ac2:	77 1f       	adc	r23, r23
    2ac4:	88 1f       	adc	r24, r24
    2ac6:	99 1f       	adc	r25, r25
    2ac8:	0a 95       	dec	r16
    2aca:	b2 f7       	brpl	.-20     	; 0x2ab8 <__ashldi3+0x1a>
    2acc:	0f 91       	pop	r16
    2ace:	08 95       	ret

00002ad0 <__ashrdi3>:
    2ad0:	97 fb       	bst	r25, 7
    2ad2:	10 f8       	bld	r1, 0

00002ad4 <__lshrdi3>:
    2ad4:	16 94       	lsr	r1
    2ad6:	00 08       	sbc	r0, r0
    2ad8:	0f 93       	push	r16
    2ada:	08 30       	cpi	r16, 0x08	; 8
    2adc:	98 f0       	brcs	.+38     	; 0x2b04 <__lshrdi3+0x30>
    2ade:	08 50       	subi	r16, 0x08	; 8
    2ae0:	23 2f       	mov	r18, r19
    2ae2:	34 2f       	mov	r19, r20
    2ae4:	45 2f       	mov	r20, r21
    2ae6:	56 2f       	mov	r21, r22
    2ae8:	67 2f       	mov	r22, r23
    2aea:	78 2f       	mov	r23, r24
    2aec:	89 2f       	mov	r24, r25
    2aee:	90 2d       	mov	r25, r0
    2af0:	f4 cf       	rjmp	.-24     	; 0x2ada <__lshrdi3+0x6>
    2af2:	05 94       	asr	r0
    2af4:	97 95       	ror	r25
    2af6:	87 95       	ror	r24
    2af8:	77 95       	ror	r23
    2afa:	67 95       	ror	r22
    2afc:	57 95       	ror	r21
    2afe:	47 95       	ror	r20
    2b00:	37 95       	ror	r19
    2b02:	27 95       	ror	r18
    2b04:	0a 95       	dec	r16
    2b06:	aa f7       	brpl	.-22     	; 0x2af2 <__lshrdi3+0x1e>
    2b08:	0f 91       	pop	r16
    2b0a:	08 95       	ret

00002b0c <__cmpdi2_s8>:
    2b0c:	00 24       	eor	r0, r0
    2b0e:	a7 fd       	sbrc	r26, 7
    2b10:	00 94       	com	r0
    2b12:	2a 17       	cp	r18, r26
    2b14:	30 05       	cpc	r19, r0
    2b16:	40 05       	cpc	r20, r0
    2b18:	50 05       	cpc	r21, r0
    2b1a:	60 05       	cpc	r22, r0
    2b1c:	70 05       	cpc	r23, r0
    2b1e:	80 05       	cpc	r24, r0
    2b20:	90 05       	cpc	r25, r0
    2b22:	08 95       	ret

00002b24 <__tablejump2__>:
    2b24:	ee 0f       	add	r30, r30
    2b26:	ff 1f       	adc	r31, r31
    2b28:	05 90       	lpm	r0, Z+
    2b2a:	f4 91       	lpm	r31, Z
    2b2c:	e0 2d       	mov	r30, r0
    2b2e:	09 94       	ijmp

00002b30 <malloc>:
    2b30:	0f 93       	push	r16
    2b32:	1f 93       	push	r17
    2b34:	cf 93       	push	r28
    2b36:	df 93       	push	r29
    2b38:	82 30       	cpi	r24, 0x02	; 2
    2b3a:	91 05       	cpc	r25, r1
    2b3c:	10 f4       	brcc	.+4      	; 0x2b42 <malloc+0x12>
    2b3e:	82 e0       	ldi	r24, 0x02	; 2
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	e0 91 07 04 	lds	r30, 0x0407	; 0x800407 <__flp>
    2b46:	f0 91 08 04 	lds	r31, 0x0408	; 0x800408 <__flp+0x1>
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	a0 e0       	ldi	r26, 0x00	; 0
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	30 97       	sbiw	r30, 0x00	; 0
    2b54:	19 f1       	breq	.+70     	; 0x2b9c <malloc+0x6c>
    2b56:	40 81       	ld	r20, Z
    2b58:	51 81       	ldd	r21, Z+1	; 0x01
    2b5a:	02 81       	ldd	r16, Z+2	; 0x02
    2b5c:	13 81       	ldd	r17, Z+3	; 0x03
    2b5e:	48 17       	cp	r20, r24
    2b60:	59 07       	cpc	r21, r25
    2b62:	c8 f0       	brcs	.+50     	; 0x2b96 <malloc+0x66>
    2b64:	84 17       	cp	r24, r20
    2b66:	95 07       	cpc	r25, r21
    2b68:	69 f4       	brne	.+26     	; 0x2b84 <malloc+0x54>
    2b6a:	10 97       	sbiw	r26, 0x00	; 0
    2b6c:	31 f0       	breq	.+12     	; 0x2b7a <malloc+0x4a>
    2b6e:	12 96       	adiw	r26, 0x02	; 2
    2b70:	0c 93       	st	X, r16
    2b72:	12 97       	sbiw	r26, 0x02	; 2
    2b74:	13 96       	adiw	r26, 0x03	; 3
    2b76:	1c 93       	st	X, r17
    2b78:	27 c0       	rjmp	.+78     	; 0x2bc8 <malloc+0x98>
    2b7a:	00 93 07 04 	sts	0x0407, r16	; 0x800407 <__flp>
    2b7e:	10 93 08 04 	sts	0x0408, r17	; 0x800408 <__flp+0x1>
    2b82:	22 c0       	rjmp	.+68     	; 0x2bc8 <malloc+0x98>
    2b84:	21 15       	cp	r18, r1
    2b86:	31 05       	cpc	r19, r1
    2b88:	19 f0       	breq	.+6      	; 0x2b90 <malloc+0x60>
    2b8a:	42 17       	cp	r20, r18
    2b8c:	53 07       	cpc	r21, r19
    2b8e:	18 f4       	brcc	.+6      	; 0x2b96 <malloc+0x66>
    2b90:	9a 01       	movw	r18, r20
    2b92:	bd 01       	movw	r22, r26
    2b94:	ef 01       	movw	r28, r30
    2b96:	df 01       	movw	r26, r30
    2b98:	f8 01       	movw	r30, r16
    2b9a:	db cf       	rjmp	.-74     	; 0x2b52 <malloc+0x22>
    2b9c:	21 15       	cp	r18, r1
    2b9e:	31 05       	cpc	r19, r1
    2ba0:	f9 f0       	breq	.+62     	; 0x2be0 <malloc+0xb0>
    2ba2:	28 1b       	sub	r18, r24
    2ba4:	39 0b       	sbc	r19, r25
    2ba6:	24 30       	cpi	r18, 0x04	; 4
    2ba8:	31 05       	cpc	r19, r1
    2baa:	80 f4       	brcc	.+32     	; 0x2bcc <malloc+0x9c>
    2bac:	8a 81       	ldd	r24, Y+2	; 0x02
    2bae:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb0:	61 15       	cp	r22, r1
    2bb2:	71 05       	cpc	r23, r1
    2bb4:	21 f0       	breq	.+8      	; 0x2bbe <malloc+0x8e>
    2bb6:	fb 01       	movw	r30, r22
    2bb8:	93 83       	std	Z+3, r25	; 0x03
    2bba:	82 83       	std	Z+2, r24	; 0x02
    2bbc:	04 c0       	rjmp	.+8      	; 0x2bc6 <malloc+0x96>
    2bbe:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <__flp+0x1>
    2bc2:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <__flp>
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	32 96       	adiw	r30, 0x02	; 2
    2bca:	44 c0       	rjmp	.+136    	; 0x2c54 <malloc+0x124>
    2bcc:	fe 01       	movw	r30, r28
    2bce:	e2 0f       	add	r30, r18
    2bd0:	f3 1f       	adc	r31, r19
    2bd2:	81 93       	st	Z+, r24
    2bd4:	91 93       	st	Z+, r25
    2bd6:	22 50       	subi	r18, 0x02	; 2
    2bd8:	31 09       	sbc	r19, r1
    2bda:	39 83       	std	Y+1, r19	; 0x01
    2bdc:	28 83       	st	Y, r18
    2bde:	3a c0       	rjmp	.+116    	; 0x2c54 <malloc+0x124>
    2be0:	20 91 05 04 	lds	r18, 0x0405	; 0x800405 <__brkval>
    2be4:	30 91 06 04 	lds	r19, 0x0406	; 0x800406 <__brkval+0x1>
    2be8:	23 2b       	or	r18, r19
    2bea:	41 f4       	brne	.+16     	; 0x2bfc <malloc+0xcc>
    2bec:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2bf0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2bf4:	30 93 06 04 	sts	0x0406, r19	; 0x800406 <__brkval+0x1>
    2bf8:	20 93 05 04 	sts	0x0405, r18	; 0x800405 <__brkval>
    2bfc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2c00:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2c04:	21 15       	cp	r18, r1
    2c06:	31 05       	cpc	r19, r1
    2c08:	41 f4       	brne	.+16     	; 0x2c1a <malloc+0xea>
    2c0a:	2d b7       	in	r18, 0x3d	; 61
    2c0c:	3e b7       	in	r19, 0x3e	; 62
    2c0e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2c12:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2c16:	24 1b       	sub	r18, r20
    2c18:	35 0b       	sbc	r19, r21
    2c1a:	e0 91 05 04 	lds	r30, 0x0405	; 0x800405 <__brkval>
    2c1e:	f0 91 06 04 	lds	r31, 0x0406	; 0x800406 <__brkval+0x1>
    2c22:	e2 17       	cp	r30, r18
    2c24:	f3 07       	cpc	r31, r19
    2c26:	a0 f4       	brcc	.+40     	; 0x2c50 <malloc+0x120>
    2c28:	2e 1b       	sub	r18, r30
    2c2a:	3f 0b       	sbc	r19, r31
    2c2c:	28 17       	cp	r18, r24
    2c2e:	39 07       	cpc	r19, r25
    2c30:	78 f0       	brcs	.+30     	; 0x2c50 <malloc+0x120>
    2c32:	ac 01       	movw	r20, r24
    2c34:	4e 5f       	subi	r20, 0xFE	; 254
    2c36:	5f 4f       	sbci	r21, 0xFF	; 255
    2c38:	24 17       	cp	r18, r20
    2c3a:	35 07       	cpc	r19, r21
    2c3c:	48 f0       	brcs	.+18     	; 0x2c50 <malloc+0x120>
    2c3e:	4e 0f       	add	r20, r30
    2c40:	5f 1f       	adc	r21, r31
    2c42:	50 93 06 04 	sts	0x0406, r21	; 0x800406 <__brkval+0x1>
    2c46:	40 93 05 04 	sts	0x0405, r20	; 0x800405 <__brkval>
    2c4a:	81 93       	st	Z+, r24
    2c4c:	91 93       	st	Z+, r25
    2c4e:	02 c0       	rjmp	.+4      	; 0x2c54 <malloc+0x124>
    2c50:	e0 e0       	ldi	r30, 0x00	; 0
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	cf 01       	movw	r24, r30
    2c56:	df 91       	pop	r29
    2c58:	cf 91       	pop	r28
    2c5a:	1f 91       	pop	r17
    2c5c:	0f 91       	pop	r16
    2c5e:	08 95       	ret

00002c60 <free>:
    2c60:	cf 93       	push	r28
    2c62:	df 93       	push	r29
    2c64:	00 97       	sbiw	r24, 0x00	; 0
    2c66:	09 f4       	brne	.+2      	; 0x2c6a <free+0xa>
    2c68:	81 c0       	rjmp	.+258    	; 0x2d6c <free+0x10c>
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	32 97       	sbiw	r30, 0x02	; 2
    2c6e:	13 82       	std	Z+3, r1	; 0x03
    2c70:	12 82       	std	Z+2, r1	; 0x02
    2c72:	a0 91 07 04 	lds	r26, 0x0407	; 0x800407 <__flp>
    2c76:	b0 91 08 04 	lds	r27, 0x0408	; 0x800408 <__flp+0x1>
    2c7a:	10 97       	sbiw	r26, 0x00	; 0
    2c7c:	81 f4       	brne	.+32     	; 0x2c9e <free+0x3e>
    2c7e:	20 81       	ld	r18, Z
    2c80:	31 81       	ldd	r19, Z+1	; 0x01
    2c82:	82 0f       	add	r24, r18
    2c84:	93 1f       	adc	r25, r19
    2c86:	20 91 05 04 	lds	r18, 0x0405	; 0x800405 <__brkval>
    2c8a:	30 91 06 04 	lds	r19, 0x0406	; 0x800406 <__brkval+0x1>
    2c8e:	28 17       	cp	r18, r24
    2c90:	39 07       	cpc	r19, r25
    2c92:	51 f5       	brne	.+84     	; 0x2ce8 <free+0x88>
    2c94:	f0 93 06 04 	sts	0x0406, r31	; 0x800406 <__brkval+0x1>
    2c98:	e0 93 05 04 	sts	0x0405, r30	; 0x800405 <__brkval>
    2c9c:	67 c0       	rjmp	.+206    	; 0x2d6c <free+0x10c>
    2c9e:	ed 01       	movw	r28, r26
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	ce 17       	cp	r28, r30
    2ca6:	df 07       	cpc	r29, r31
    2ca8:	40 f4       	brcc	.+16     	; 0x2cba <free+0x5a>
    2caa:	4a 81       	ldd	r20, Y+2	; 0x02
    2cac:	5b 81       	ldd	r21, Y+3	; 0x03
    2cae:	9e 01       	movw	r18, r28
    2cb0:	41 15       	cp	r20, r1
    2cb2:	51 05       	cpc	r21, r1
    2cb4:	f1 f0       	breq	.+60     	; 0x2cf2 <free+0x92>
    2cb6:	ea 01       	movw	r28, r20
    2cb8:	f5 cf       	rjmp	.-22     	; 0x2ca4 <free+0x44>
    2cba:	d3 83       	std	Z+3, r29	; 0x03
    2cbc:	c2 83       	std	Z+2, r28	; 0x02
    2cbe:	40 81       	ld	r20, Z
    2cc0:	51 81       	ldd	r21, Z+1	; 0x01
    2cc2:	84 0f       	add	r24, r20
    2cc4:	95 1f       	adc	r25, r21
    2cc6:	c8 17       	cp	r28, r24
    2cc8:	d9 07       	cpc	r29, r25
    2cca:	59 f4       	brne	.+22     	; 0x2ce2 <free+0x82>
    2ccc:	88 81       	ld	r24, Y
    2cce:	99 81       	ldd	r25, Y+1	; 0x01
    2cd0:	84 0f       	add	r24, r20
    2cd2:	95 1f       	adc	r25, r21
    2cd4:	02 96       	adiw	r24, 0x02	; 2
    2cd6:	91 83       	std	Z+1, r25	; 0x01
    2cd8:	80 83       	st	Z, r24
    2cda:	8a 81       	ldd	r24, Y+2	; 0x02
    2cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cde:	93 83       	std	Z+3, r25	; 0x03
    2ce0:	82 83       	std	Z+2, r24	; 0x02
    2ce2:	21 15       	cp	r18, r1
    2ce4:	31 05       	cpc	r19, r1
    2ce6:	29 f4       	brne	.+10     	; 0x2cf2 <free+0x92>
    2ce8:	f0 93 08 04 	sts	0x0408, r31	; 0x800408 <__flp+0x1>
    2cec:	e0 93 07 04 	sts	0x0407, r30	; 0x800407 <__flp>
    2cf0:	3d c0       	rjmp	.+122    	; 0x2d6c <free+0x10c>
    2cf2:	e9 01       	movw	r28, r18
    2cf4:	fb 83       	std	Y+3, r31	; 0x03
    2cf6:	ea 83       	std	Y+2, r30	; 0x02
    2cf8:	49 91       	ld	r20, Y+
    2cfa:	59 91       	ld	r21, Y+
    2cfc:	c4 0f       	add	r28, r20
    2cfe:	d5 1f       	adc	r29, r21
    2d00:	ec 17       	cp	r30, r28
    2d02:	fd 07       	cpc	r31, r29
    2d04:	61 f4       	brne	.+24     	; 0x2d1e <free+0xbe>
    2d06:	80 81       	ld	r24, Z
    2d08:	91 81       	ldd	r25, Z+1	; 0x01
    2d0a:	84 0f       	add	r24, r20
    2d0c:	95 1f       	adc	r25, r21
    2d0e:	02 96       	adiw	r24, 0x02	; 2
    2d10:	e9 01       	movw	r28, r18
    2d12:	99 83       	std	Y+1, r25	; 0x01
    2d14:	88 83       	st	Y, r24
    2d16:	82 81       	ldd	r24, Z+2	; 0x02
    2d18:	93 81       	ldd	r25, Z+3	; 0x03
    2d1a:	9b 83       	std	Y+3, r25	; 0x03
    2d1c:	8a 83       	std	Y+2, r24	; 0x02
    2d1e:	e0 e0       	ldi	r30, 0x00	; 0
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	12 96       	adiw	r26, 0x02	; 2
    2d24:	8d 91       	ld	r24, X+
    2d26:	9c 91       	ld	r25, X
    2d28:	13 97       	sbiw	r26, 0x03	; 3
    2d2a:	00 97       	sbiw	r24, 0x00	; 0
    2d2c:	19 f0       	breq	.+6      	; 0x2d34 <free+0xd4>
    2d2e:	fd 01       	movw	r30, r26
    2d30:	dc 01       	movw	r26, r24
    2d32:	f7 cf       	rjmp	.-18     	; 0x2d22 <free+0xc2>
    2d34:	8d 91       	ld	r24, X+
    2d36:	9c 91       	ld	r25, X
    2d38:	11 97       	sbiw	r26, 0x01	; 1
    2d3a:	9d 01       	movw	r18, r26
    2d3c:	2e 5f       	subi	r18, 0xFE	; 254
    2d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d40:	82 0f       	add	r24, r18
    2d42:	93 1f       	adc	r25, r19
    2d44:	20 91 05 04 	lds	r18, 0x0405	; 0x800405 <__brkval>
    2d48:	30 91 06 04 	lds	r19, 0x0406	; 0x800406 <__brkval+0x1>
    2d4c:	28 17       	cp	r18, r24
    2d4e:	39 07       	cpc	r19, r25
    2d50:	69 f4       	brne	.+26     	; 0x2d6c <free+0x10c>
    2d52:	30 97       	sbiw	r30, 0x00	; 0
    2d54:	29 f4       	brne	.+10     	; 0x2d60 <free+0x100>
    2d56:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__flp+0x1>
    2d5a:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <__flp>
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <free+0x104>
    2d60:	13 82       	std	Z+3, r1	; 0x03
    2d62:	12 82       	std	Z+2, r1	; 0x02
    2d64:	b0 93 06 04 	sts	0x0406, r27	; 0x800406 <__brkval+0x1>
    2d68:	a0 93 05 04 	sts	0x0405, r26	; 0x800405 <__brkval>
    2d6c:	df 91       	pop	r29
    2d6e:	cf 91       	pop	r28
    2d70:	08 95       	ret

00002d72 <do_rand>:
    2d72:	8f 92       	push	r8
    2d74:	9f 92       	push	r9
    2d76:	af 92       	push	r10
    2d78:	bf 92       	push	r11
    2d7a:	cf 92       	push	r12
    2d7c:	df 92       	push	r13
    2d7e:	ef 92       	push	r14
    2d80:	ff 92       	push	r15
    2d82:	cf 93       	push	r28
    2d84:	df 93       	push	r29
    2d86:	ec 01       	movw	r28, r24
    2d88:	68 81       	ld	r22, Y
    2d8a:	79 81       	ldd	r23, Y+1	; 0x01
    2d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d90:	61 15       	cp	r22, r1
    2d92:	71 05       	cpc	r23, r1
    2d94:	81 05       	cpc	r24, r1
    2d96:	91 05       	cpc	r25, r1
    2d98:	21 f4       	brne	.+8      	; 0x2da2 <do_rand+0x30>
    2d9a:	64 e2       	ldi	r22, 0x24	; 36
    2d9c:	79 ed       	ldi	r23, 0xD9	; 217
    2d9e:	8b e5       	ldi	r24, 0x5B	; 91
    2da0:	97 e0       	ldi	r25, 0x07	; 7
    2da2:	2d e1       	ldi	r18, 0x1D	; 29
    2da4:	33 ef       	ldi	r19, 0xF3	; 243
    2da6:	41 e0       	ldi	r20, 0x01	; 1
    2da8:	50 e0       	ldi	r21, 0x00	; 0
    2daa:	0e 94 a5 1a 	call	0x354a	; 0x354a <__divmodsi4>
    2dae:	49 01       	movw	r8, r18
    2db0:	5a 01       	movw	r10, r20
    2db2:	9b 01       	movw	r18, r22
    2db4:	ac 01       	movw	r20, r24
    2db6:	a7 ea       	ldi	r26, 0xA7	; 167
    2db8:	b1 e4       	ldi	r27, 0x41	; 65
    2dba:	0e 94 c4 1a 	call	0x3588	; 0x3588 <__muluhisi3>
    2dbe:	6b 01       	movw	r12, r22
    2dc0:	7c 01       	movw	r14, r24
    2dc2:	ac ee       	ldi	r26, 0xEC	; 236
    2dc4:	b4 ef       	ldi	r27, 0xF4	; 244
    2dc6:	a5 01       	movw	r20, r10
    2dc8:	94 01       	movw	r18, r8
    2dca:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <__mulohisi3>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	8c 0d       	add	r24, r12
    2dd4:	9d 1d       	adc	r25, r13
    2dd6:	ae 1d       	adc	r26, r14
    2dd8:	bf 1d       	adc	r27, r15
    2dda:	b7 ff       	sbrs	r27, 7
    2ddc:	03 c0       	rjmp	.+6      	; 0x2de4 <do_rand+0x72>
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	a1 09       	sbc	r26, r1
    2de2:	b0 48       	sbci	r27, 0x80	; 128
    2de4:	88 83       	st	Y, r24
    2de6:	99 83       	std	Y+1, r25	; 0x01
    2de8:	aa 83       	std	Y+2, r26	; 0x02
    2dea:	bb 83       	std	Y+3, r27	; 0x03
    2dec:	9f 77       	andi	r25, 0x7F	; 127
    2dee:	df 91       	pop	r29
    2df0:	cf 91       	pop	r28
    2df2:	ff 90       	pop	r15
    2df4:	ef 90       	pop	r14
    2df6:	df 90       	pop	r13
    2df8:	cf 90       	pop	r12
    2dfa:	bf 90       	pop	r11
    2dfc:	af 90       	pop	r10
    2dfe:	9f 90       	pop	r9
    2e00:	8f 90       	pop	r8
    2e02:	08 95       	ret

00002e04 <rand_r>:
    2e04:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <do_rand>
    2e08:	08 95       	ret

00002e0a <rand>:
    2e0a:	86 e0       	ldi	r24, 0x06	; 6
    2e0c:	91 e0       	ldi	r25, 0x01	; 1
    2e0e:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <do_rand>
    2e12:	08 95       	ret

00002e14 <srand>:
    2e14:	a0 e0       	ldi	r26, 0x00	; 0
    2e16:	b0 e0       	ldi	r27, 0x00	; 0
    2e18:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    2e1c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    2e20:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    2e24:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    2e28:	08 95       	ret

00002e2a <realloc>:
    2e2a:	a0 e0       	ldi	r26, 0x00	; 0
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	eb e1       	ldi	r30, 0x1B	; 27
    2e30:	f7 e1       	ldi	r31, 0x17	; 23
    2e32:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__prologue_saves__+0x8>
    2e36:	ec 01       	movw	r28, r24
    2e38:	00 97       	sbiw	r24, 0x00	; 0
    2e3a:	21 f4       	brne	.+8      	; 0x2e44 <realloc+0x1a>
    2e3c:	cb 01       	movw	r24, r22
    2e3e:	0e 94 98 15 	call	0x2b30	; 0x2b30 <malloc>
    2e42:	b4 c0       	rjmp	.+360    	; 0x2fac <realloc+0x182>
    2e44:	fc 01       	movw	r30, r24
    2e46:	e6 0f       	add	r30, r22
    2e48:	f7 1f       	adc	r31, r23
    2e4a:	9c 01       	movw	r18, r24
    2e4c:	22 50       	subi	r18, 0x02	; 2
    2e4e:	31 09       	sbc	r19, r1
    2e50:	e2 17       	cp	r30, r18
    2e52:	f3 07       	cpc	r31, r19
    2e54:	08 f4       	brcc	.+2      	; 0x2e58 <realloc+0x2e>
    2e56:	a8 c0       	rjmp	.+336    	; 0x2fa8 <realloc+0x17e>
    2e58:	d9 01       	movw	r26, r18
    2e5a:	0d 91       	ld	r16, X+
    2e5c:	1c 91       	ld	r17, X
    2e5e:	11 97       	sbiw	r26, 0x01	; 1
    2e60:	06 17       	cp	r16, r22
    2e62:	17 07       	cpc	r17, r23
    2e64:	b0 f0       	brcs	.+44     	; 0x2e92 <realloc+0x68>
    2e66:	05 30       	cpi	r16, 0x05	; 5
    2e68:	11 05       	cpc	r17, r1
    2e6a:	08 f4       	brcc	.+2      	; 0x2e6e <realloc+0x44>
    2e6c:	9b c0       	rjmp	.+310    	; 0x2fa4 <realloc+0x17a>
    2e6e:	c8 01       	movw	r24, r16
    2e70:	04 97       	sbiw	r24, 0x04	; 4
    2e72:	86 17       	cp	r24, r22
    2e74:	97 07       	cpc	r25, r23
    2e76:	08 f4       	brcc	.+2      	; 0x2e7a <realloc+0x50>
    2e78:	95 c0       	rjmp	.+298    	; 0x2fa4 <realloc+0x17a>
    2e7a:	02 50       	subi	r16, 0x02	; 2
    2e7c:	11 09       	sbc	r17, r1
    2e7e:	06 1b       	sub	r16, r22
    2e80:	17 0b       	sbc	r17, r23
    2e82:	01 93       	st	Z+, r16
    2e84:	11 93       	st	Z+, r17
    2e86:	6d 93       	st	X+, r22
    2e88:	7c 93       	st	X, r23
    2e8a:	cf 01       	movw	r24, r30
    2e8c:	0e 94 30 16 	call	0x2c60	; 0x2c60 <free>
    2e90:	89 c0       	rjmp	.+274    	; 0x2fa4 <realloc+0x17a>
    2e92:	5b 01       	movw	r10, r22
    2e94:	a0 1a       	sub	r10, r16
    2e96:	b1 0a       	sbc	r11, r17
    2e98:	4c 01       	movw	r8, r24
    2e9a:	80 0e       	add	r8, r16
    2e9c:	91 1e       	adc	r9, r17
    2e9e:	a0 91 07 04 	lds	r26, 0x0407	; 0x800407 <__flp>
    2ea2:	b0 91 08 04 	lds	r27, 0x0408	; 0x800408 <__flp+0x1>
    2ea6:	61 2c       	mov	r6, r1
    2ea8:	71 2c       	mov	r7, r1
    2eaa:	e1 2c       	mov	r14, r1
    2eac:	f1 2c       	mov	r15, r1
    2eae:	10 97       	sbiw	r26, 0x00	; 0
    2eb0:	09 f4       	brne	.+2      	; 0x2eb4 <realloc+0x8a>
    2eb2:	46 c0       	rjmp	.+140    	; 0x2f40 <realloc+0x116>
    2eb4:	8d 91       	ld	r24, X+
    2eb6:	9c 91       	ld	r25, X
    2eb8:	11 97       	sbiw	r26, 0x01	; 1
    2eba:	a8 15       	cp	r26, r8
    2ebc:	b9 05       	cpc	r27, r9
    2ebe:	b1 f5       	brne	.+108    	; 0x2f2c <realloc+0x102>
    2ec0:	6c 01       	movw	r12, r24
    2ec2:	42 e0       	ldi	r20, 0x02	; 2
    2ec4:	c4 0e       	add	r12, r20
    2ec6:	d1 1c       	adc	r13, r1
    2ec8:	ca 14       	cp	r12, r10
    2eca:	db 04       	cpc	r13, r11
    2ecc:	78 f1       	brcs	.+94     	; 0x2f2c <realloc+0x102>
    2ece:	4c 01       	movw	r8, r24
    2ed0:	8a 18       	sub	r8, r10
    2ed2:	9b 08       	sbc	r9, r11
    2ed4:	64 01       	movw	r12, r8
    2ed6:	42 e0       	ldi	r20, 0x02	; 2
    2ed8:	c4 0e       	add	r12, r20
    2eda:	d1 1c       	adc	r13, r1
    2edc:	12 96       	adiw	r26, 0x02	; 2
    2ede:	bc 90       	ld	r11, X
    2ee0:	12 97       	sbiw	r26, 0x02	; 2
    2ee2:	13 96       	adiw	r26, 0x03	; 3
    2ee4:	ac 91       	ld	r26, X
    2ee6:	b5 e0       	ldi	r27, 0x05	; 5
    2ee8:	cb 16       	cp	r12, r27
    2eea:	d1 04       	cpc	r13, r1
    2eec:	40 f0       	brcs	.+16     	; 0x2efe <realloc+0xd4>
    2eee:	b2 82       	std	Z+2, r11	; 0x02
    2ef0:	a3 83       	std	Z+3, r26	; 0x03
    2ef2:	91 82       	std	Z+1, r9	; 0x01
    2ef4:	80 82       	st	Z, r8
    2ef6:	d9 01       	movw	r26, r18
    2ef8:	6d 93       	st	X+, r22
    2efa:	7c 93       	st	X, r23
    2efc:	09 c0       	rjmp	.+18     	; 0x2f10 <realloc+0xe6>
    2efe:	0e 5f       	subi	r16, 0xFE	; 254
    2f00:	1f 4f       	sbci	r17, 0xFF	; 255
    2f02:	80 0f       	add	r24, r16
    2f04:	91 1f       	adc	r25, r17
    2f06:	f9 01       	movw	r30, r18
    2f08:	91 83       	std	Z+1, r25	; 0x01
    2f0a:	80 83       	st	Z, r24
    2f0c:	eb 2d       	mov	r30, r11
    2f0e:	fa 2f       	mov	r31, r26
    2f10:	e1 14       	cp	r14, r1
    2f12:	f1 04       	cpc	r15, r1
    2f14:	31 f0       	breq	.+12     	; 0x2f22 <realloc+0xf8>
    2f16:	d7 01       	movw	r26, r14
    2f18:	13 96       	adiw	r26, 0x03	; 3
    2f1a:	fc 93       	st	X, r31
    2f1c:	ee 93       	st	-X, r30
    2f1e:	12 97       	sbiw	r26, 0x02	; 2
    2f20:	41 c0       	rjmp	.+130    	; 0x2fa4 <realloc+0x17a>
    2f22:	f0 93 08 04 	sts	0x0408, r31	; 0x800408 <__flp+0x1>
    2f26:	e0 93 07 04 	sts	0x0407, r30	; 0x800407 <__flp>
    2f2a:	3c c0       	rjmp	.+120    	; 0x2fa4 <realloc+0x17a>
    2f2c:	68 16       	cp	r6, r24
    2f2e:	79 06       	cpc	r7, r25
    2f30:	08 f4       	brcc	.+2      	; 0x2f34 <realloc+0x10a>
    2f32:	3c 01       	movw	r6, r24
    2f34:	7d 01       	movw	r14, r26
    2f36:	12 96       	adiw	r26, 0x02	; 2
    2f38:	0d 90       	ld	r0, X+
    2f3a:	bc 91       	ld	r27, X
    2f3c:	a0 2d       	mov	r26, r0
    2f3e:	b7 cf       	rjmp	.-146    	; 0x2eae <realloc+0x84>
    2f40:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <__brkval>
    2f44:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <__brkval+0x1>
    2f48:	88 16       	cp	r8, r24
    2f4a:	99 06       	cpc	r9, r25
    2f4c:	e1 f4       	brne	.+56     	; 0x2f86 <realloc+0x15c>
    2f4e:	66 16       	cp	r6, r22
    2f50:	77 06       	cpc	r7, r23
    2f52:	c8 f4       	brcc	.+50     	; 0x2f86 <realloc+0x15c>
    2f54:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2f58:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2f5c:	00 97       	sbiw	r24, 0x00	; 0
    2f5e:	41 f4       	brne	.+16     	; 0x2f70 <realloc+0x146>
    2f60:	8d b7       	in	r24, 0x3d	; 61
    2f62:	9e b7       	in	r25, 0x3e	; 62
    2f64:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2f68:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2f6c:	84 1b       	sub	r24, r20
    2f6e:	95 0b       	sbc	r25, r21
    2f70:	e8 17       	cp	r30, r24
    2f72:	f9 07       	cpc	r31, r25
    2f74:	c8 f4       	brcc	.+50     	; 0x2fa8 <realloc+0x17e>
    2f76:	f0 93 06 04 	sts	0x0406, r31	; 0x800406 <__brkval+0x1>
    2f7a:	e0 93 05 04 	sts	0x0405, r30	; 0x800405 <__brkval>
    2f7e:	f9 01       	movw	r30, r18
    2f80:	71 83       	std	Z+1, r23	; 0x01
    2f82:	60 83       	st	Z, r22
    2f84:	0f c0       	rjmp	.+30     	; 0x2fa4 <realloc+0x17a>
    2f86:	cb 01       	movw	r24, r22
    2f88:	0e 94 98 15 	call	0x2b30	; 0x2b30 <malloc>
    2f8c:	7c 01       	movw	r14, r24
    2f8e:	00 97       	sbiw	r24, 0x00	; 0
    2f90:	59 f0       	breq	.+22     	; 0x2fa8 <realloc+0x17e>
    2f92:	a8 01       	movw	r20, r16
    2f94:	be 01       	movw	r22, r28
    2f96:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <memcpy>
    2f9a:	ce 01       	movw	r24, r28
    2f9c:	0e 94 30 16 	call	0x2c60	; 0x2c60 <free>
    2fa0:	c7 01       	movw	r24, r14
    2fa2:	04 c0       	rjmp	.+8      	; 0x2fac <realloc+0x182>
    2fa4:	ce 01       	movw	r24, r28
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <realloc+0x182>
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	cd b7       	in	r28, 0x3d	; 61
    2fae:	de b7       	in	r29, 0x3e	; 62
    2fb0:	ee e0       	ldi	r30, 0x0E	; 14
    2fb2:	0c 94 f7 1a 	jmp	0x35ee	; 0x35ee <__epilogue_restores__+0x8>

00002fb6 <memcpy>:
    2fb6:	fb 01       	movw	r30, r22
    2fb8:	dc 01       	movw	r26, r24
    2fba:	02 c0       	rjmp	.+4      	; 0x2fc0 <memcpy+0xa>
    2fbc:	01 90       	ld	r0, Z+
    2fbe:	0d 92       	st	X+, r0
    2fc0:	41 50       	subi	r20, 0x01	; 1
    2fc2:	50 40       	sbci	r21, 0x00	; 0
    2fc4:	d8 f7       	brcc	.-10     	; 0x2fbc <memcpy+0x6>
    2fc6:	08 95       	ret

00002fc8 <snprintf>:
    2fc8:	ae e0       	ldi	r26, 0x0E	; 14
    2fca:	b0 e0       	ldi	r27, 0x00	; 0
    2fcc:	ea ee       	ldi	r30, 0xEA	; 234
    2fce:	f7 e1       	ldi	r31, 0x17	; 23
    2fd0:	0c 94 e5 1a 	jmp	0x35ca	; 0x35ca <__prologue_saves__+0x1c>
    2fd4:	0d 89       	ldd	r16, Y+21	; 0x15
    2fd6:	1e 89       	ldd	r17, Y+22	; 0x16
    2fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2fda:	98 8d       	ldd	r25, Y+24	; 0x18
    2fdc:	26 e0       	ldi	r18, 0x06	; 6
    2fde:	2c 83       	std	Y+4, r18	; 0x04
    2fe0:	1a 83       	std	Y+2, r17	; 0x02
    2fe2:	09 83       	std	Y+1, r16	; 0x01
    2fe4:	97 ff       	sbrs	r25, 7
    2fe6:	02 c0       	rjmp	.+4      	; 0x2fec <snprintf+0x24>
    2fe8:	80 e0       	ldi	r24, 0x00	; 0
    2fea:	90 e8       	ldi	r25, 0x80	; 128
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	9e 83       	std	Y+6, r25	; 0x06
    2ff0:	8d 83       	std	Y+5, r24	; 0x05
    2ff2:	ae 01       	movw	r20, r28
    2ff4:	45 5e       	subi	r20, 0xE5	; 229
    2ff6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ff8:	69 8d       	ldd	r22, Y+25	; 0x19
    2ffa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ffc:	ce 01       	movw	r24, r28
    2ffe:	01 96       	adiw	r24, 0x01	; 1
    3000:	0e 94 14 18 	call	0x3028	; 0x3028 <vfprintf>
    3004:	4d 81       	ldd	r20, Y+5	; 0x05
    3006:	5e 81       	ldd	r21, Y+6	; 0x06
    3008:	57 fd       	sbrc	r21, 7
    300a:	0a c0       	rjmp	.+20     	; 0x3020 <snprintf+0x58>
    300c:	2f 81       	ldd	r18, Y+7	; 0x07
    300e:	38 85       	ldd	r19, Y+8	; 0x08
    3010:	42 17       	cp	r20, r18
    3012:	53 07       	cpc	r21, r19
    3014:	0c f4       	brge	.+2      	; 0x3018 <snprintf+0x50>
    3016:	9a 01       	movw	r18, r20
    3018:	f8 01       	movw	r30, r16
    301a:	e2 0f       	add	r30, r18
    301c:	f3 1f       	adc	r31, r19
    301e:	10 82       	st	Z, r1
    3020:	2e 96       	adiw	r28, 0x0e	; 14
    3022:	e4 e0       	ldi	r30, 0x04	; 4
    3024:	0c 94 01 1b 	jmp	0x3602	; 0x3602 <__epilogue_restores__+0x1c>

00003028 <vfprintf>:
    3028:	ab e0       	ldi	r26, 0x0B	; 11
    302a:	b0 e0       	ldi	r27, 0x00	; 0
    302c:	ea e1       	ldi	r30, 0x1A	; 26
    302e:	f8 e1       	ldi	r31, 0x18	; 24
    3030:	0c 94 d7 1a 	jmp	0x35ae	; 0x35ae <__prologue_saves__>
    3034:	6c 01       	movw	r12, r24
    3036:	7b 01       	movw	r14, r22
    3038:	8a 01       	movw	r16, r20
    303a:	fc 01       	movw	r30, r24
    303c:	17 82       	std	Z+7, r1	; 0x07
    303e:	16 82       	std	Z+6, r1	; 0x06
    3040:	83 81       	ldd	r24, Z+3	; 0x03
    3042:	81 ff       	sbrs	r24, 1
    3044:	cc c1       	rjmp	.+920    	; 0x33de <vfprintf+0x3b6>
    3046:	ce 01       	movw	r24, r28
    3048:	01 96       	adiw	r24, 0x01	; 1
    304a:	3c 01       	movw	r6, r24
    304c:	f6 01       	movw	r30, r12
    304e:	93 81       	ldd	r25, Z+3	; 0x03
    3050:	f7 01       	movw	r30, r14
    3052:	93 fd       	sbrc	r25, 3
    3054:	85 91       	lpm	r24, Z+
    3056:	93 ff       	sbrs	r25, 3
    3058:	81 91       	ld	r24, Z+
    305a:	7f 01       	movw	r14, r30
    305c:	88 23       	and	r24, r24
    305e:	09 f4       	brne	.+2      	; 0x3062 <vfprintf+0x3a>
    3060:	ba c1       	rjmp	.+884    	; 0x33d6 <vfprintf+0x3ae>
    3062:	85 32       	cpi	r24, 0x25	; 37
    3064:	39 f4       	brne	.+14     	; 0x3074 <vfprintf+0x4c>
    3066:	93 fd       	sbrc	r25, 3
    3068:	85 91       	lpm	r24, Z+
    306a:	93 ff       	sbrs	r25, 3
    306c:	81 91       	ld	r24, Z+
    306e:	7f 01       	movw	r14, r30
    3070:	85 32       	cpi	r24, 0x25	; 37
    3072:	29 f4       	brne	.+10     	; 0x307e <vfprintf+0x56>
    3074:	b6 01       	movw	r22, r12
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	0e 94 0b 1a 	call	0x3416	; 0x3416 <fputc>
    307c:	e7 cf       	rjmp	.-50     	; 0x304c <vfprintf+0x24>
    307e:	91 2c       	mov	r9, r1
    3080:	21 2c       	mov	r2, r1
    3082:	31 2c       	mov	r3, r1
    3084:	ff e1       	ldi	r31, 0x1F	; 31
    3086:	f3 15       	cp	r31, r3
    3088:	d8 f0       	brcs	.+54     	; 0x30c0 <vfprintf+0x98>
    308a:	8b 32       	cpi	r24, 0x2B	; 43
    308c:	79 f0       	breq	.+30     	; 0x30ac <vfprintf+0x84>
    308e:	38 f4       	brcc	.+14     	; 0x309e <vfprintf+0x76>
    3090:	80 32       	cpi	r24, 0x20	; 32
    3092:	79 f0       	breq	.+30     	; 0x30b2 <vfprintf+0x8a>
    3094:	83 32       	cpi	r24, 0x23	; 35
    3096:	a1 f4       	brne	.+40     	; 0x30c0 <vfprintf+0x98>
    3098:	23 2d       	mov	r18, r3
    309a:	20 61       	ori	r18, 0x10	; 16
    309c:	1d c0       	rjmp	.+58     	; 0x30d8 <vfprintf+0xb0>
    309e:	8d 32       	cpi	r24, 0x2D	; 45
    30a0:	61 f0       	breq	.+24     	; 0x30ba <vfprintf+0x92>
    30a2:	80 33       	cpi	r24, 0x30	; 48
    30a4:	69 f4       	brne	.+26     	; 0x30c0 <vfprintf+0x98>
    30a6:	23 2d       	mov	r18, r3
    30a8:	21 60       	ori	r18, 0x01	; 1
    30aa:	16 c0       	rjmp	.+44     	; 0x30d8 <vfprintf+0xb0>
    30ac:	83 2d       	mov	r24, r3
    30ae:	82 60       	ori	r24, 0x02	; 2
    30b0:	38 2e       	mov	r3, r24
    30b2:	e3 2d       	mov	r30, r3
    30b4:	e4 60       	ori	r30, 0x04	; 4
    30b6:	3e 2e       	mov	r3, r30
    30b8:	2a c0       	rjmp	.+84     	; 0x310e <vfprintf+0xe6>
    30ba:	f3 2d       	mov	r31, r3
    30bc:	f8 60       	ori	r31, 0x08	; 8
    30be:	1d c0       	rjmp	.+58     	; 0x30fa <vfprintf+0xd2>
    30c0:	37 fc       	sbrc	r3, 7
    30c2:	2d c0       	rjmp	.+90     	; 0x311e <vfprintf+0xf6>
    30c4:	20 ed       	ldi	r18, 0xD0	; 208
    30c6:	28 0f       	add	r18, r24
    30c8:	2a 30       	cpi	r18, 0x0A	; 10
    30ca:	40 f0       	brcs	.+16     	; 0x30dc <vfprintf+0xb4>
    30cc:	8e 32       	cpi	r24, 0x2E	; 46
    30ce:	b9 f4       	brne	.+46     	; 0x30fe <vfprintf+0xd6>
    30d0:	36 fc       	sbrc	r3, 6
    30d2:	81 c1       	rjmp	.+770    	; 0x33d6 <vfprintf+0x3ae>
    30d4:	23 2d       	mov	r18, r3
    30d6:	20 64       	ori	r18, 0x40	; 64
    30d8:	32 2e       	mov	r3, r18
    30da:	19 c0       	rjmp	.+50     	; 0x310e <vfprintf+0xe6>
    30dc:	36 fe       	sbrs	r3, 6
    30de:	06 c0       	rjmp	.+12     	; 0x30ec <vfprintf+0xc4>
    30e0:	8a e0       	ldi	r24, 0x0A	; 10
    30e2:	98 9e       	mul	r9, r24
    30e4:	20 0d       	add	r18, r0
    30e6:	11 24       	eor	r1, r1
    30e8:	92 2e       	mov	r9, r18
    30ea:	11 c0       	rjmp	.+34     	; 0x310e <vfprintf+0xe6>
    30ec:	ea e0       	ldi	r30, 0x0A	; 10
    30ee:	2e 9e       	mul	r2, r30
    30f0:	20 0d       	add	r18, r0
    30f2:	11 24       	eor	r1, r1
    30f4:	22 2e       	mov	r2, r18
    30f6:	f3 2d       	mov	r31, r3
    30f8:	f0 62       	ori	r31, 0x20	; 32
    30fa:	3f 2e       	mov	r3, r31
    30fc:	08 c0       	rjmp	.+16     	; 0x310e <vfprintf+0xe6>
    30fe:	8c 36       	cpi	r24, 0x6C	; 108
    3100:	21 f4       	brne	.+8      	; 0x310a <vfprintf+0xe2>
    3102:	83 2d       	mov	r24, r3
    3104:	80 68       	ori	r24, 0x80	; 128
    3106:	38 2e       	mov	r3, r24
    3108:	02 c0       	rjmp	.+4      	; 0x310e <vfprintf+0xe6>
    310a:	88 36       	cpi	r24, 0x68	; 104
    310c:	41 f4       	brne	.+16     	; 0x311e <vfprintf+0xf6>
    310e:	f7 01       	movw	r30, r14
    3110:	93 fd       	sbrc	r25, 3
    3112:	85 91       	lpm	r24, Z+
    3114:	93 ff       	sbrs	r25, 3
    3116:	81 91       	ld	r24, Z+
    3118:	7f 01       	movw	r14, r30
    311a:	81 11       	cpse	r24, r1
    311c:	b3 cf       	rjmp	.-154    	; 0x3084 <vfprintf+0x5c>
    311e:	98 2f       	mov	r25, r24
    3120:	9f 7d       	andi	r25, 0xDF	; 223
    3122:	95 54       	subi	r25, 0x45	; 69
    3124:	93 30       	cpi	r25, 0x03	; 3
    3126:	28 f4       	brcc	.+10     	; 0x3132 <vfprintf+0x10a>
    3128:	0c 5f       	subi	r16, 0xFC	; 252
    312a:	1f 4f       	sbci	r17, 0xFF	; 255
    312c:	9f e3       	ldi	r25, 0x3F	; 63
    312e:	99 83       	std	Y+1, r25	; 0x01
    3130:	0d c0       	rjmp	.+26     	; 0x314c <vfprintf+0x124>
    3132:	83 36       	cpi	r24, 0x63	; 99
    3134:	31 f0       	breq	.+12     	; 0x3142 <vfprintf+0x11a>
    3136:	83 37       	cpi	r24, 0x73	; 115
    3138:	71 f0       	breq	.+28     	; 0x3156 <vfprintf+0x12e>
    313a:	83 35       	cpi	r24, 0x53	; 83
    313c:	09 f0       	breq	.+2      	; 0x3140 <vfprintf+0x118>
    313e:	59 c0       	rjmp	.+178    	; 0x31f2 <vfprintf+0x1ca>
    3140:	21 c0       	rjmp	.+66     	; 0x3184 <vfprintf+0x15c>
    3142:	f8 01       	movw	r30, r16
    3144:	80 81       	ld	r24, Z
    3146:	89 83       	std	Y+1, r24	; 0x01
    3148:	0e 5f       	subi	r16, 0xFE	; 254
    314a:	1f 4f       	sbci	r17, 0xFF	; 255
    314c:	88 24       	eor	r8, r8
    314e:	83 94       	inc	r8
    3150:	91 2c       	mov	r9, r1
    3152:	53 01       	movw	r10, r6
    3154:	13 c0       	rjmp	.+38     	; 0x317c <vfprintf+0x154>
    3156:	28 01       	movw	r4, r16
    3158:	f2 e0       	ldi	r31, 0x02	; 2
    315a:	4f 0e       	add	r4, r31
    315c:	51 1c       	adc	r5, r1
    315e:	f8 01       	movw	r30, r16
    3160:	a0 80       	ld	r10, Z
    3162:	b1 80       	ldd	r11, Z+1	; 0x01
    3164:	36 fe       	sbrs	r3, 6
    3166:	03 c0       	rjmp	.+6      	; 0x316e <vfprintf+0x146>
    3168:	69 2d       	mov	r22, r9
    316a:	70 e0       	ldi	r23, 0x00	; 0
    316c:	02 c0       	rjmp	.+4      	; 0x3172 <vfprintf+0x14a>
    316e:	6f ef       	ldi	r22, 0xFF	; 255
    3170:	7f ef       	ldi	r23, 0xFF	; 255
    3172:	c5 01       	movw	r24, r10
    3174:	0e 94 00 1a 	call	0x3400	; 0x3400 <strnlen>
    3178:	4c 01       	movw	r8, r24
    317a:	82 01       	movw	r16, r4
    317c:	f3 2d       	mov	r31, r3
    317e:	ff 77       	andi	r31, 0x7F	; 127
    3180:	3f 2e       	mov	r3, r31
    3182:	16 c0       	rjmp	.+44     	; 0x31b0 <vfprintf+0x188>
    3184:	28 01       	movw	r4, r16
    3186:	22 e0       	ldi	r18, 0x02	; 2
    3188:	42 0e       	add	r4, r18
    318a:	51 1c       	adc	r5, r1
    318c:	f8 01       	movw	r30, r16
    318e:	a0 80       	ld	r10, Z
    3190:	b1 80       	ldd	r11, Z+1	; 0x01
    3192:	36 fe       	sbrs	r3, 6
    3194:	03 c0       	rjmp	.+6      	; 0x319c <vfprintf+0x174>
    3196:	69 2d       	mov	r22, r9
    3198:	70 e0       	ldi	r23, 0x00	; 0
    319a:	02 c0       	rjmp	.+4      	; 0x31a0 <vfprintf+0x178>
    319c:	6f ef       	ldi	r22, 0xFF	; 255
    319e:	7f ef       	ldi	r23, 0xFF	; 255
    31a0:	c5 01       	movw	r24, r10
    31a2:	0e 94 f5 19 	call	0x33ea	; 0x33ea <strnlen_P>
    31a6:	4c 01       	movw	r8, r24
    31a8:	f3 2d       	mov	r31, r3
    31aa:	f0 68       	ori	r31, 0x80	; 128
    31ac:	3f 2e       	mov	r3, r31
    31ae:	82 01       	movw	r16, r4
    31b0:	33 fc       	sbrc	r3, 3
    31b2:	1b c0       	rjmp	.+54     	; 0x31ea <vfprintf+0x1c2>
    31b4:	82 2d       	mov	r24, r2
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	88 16       	cp	r8, r24
    31ba:	99 06       	cpc	r9, r25
    31bc:	b0 f4       	brcc	.+44     	; 0x31ea <vfprintf+0x1c2>
    31be:	b6 01       	movw	r22, r12
    31c0:	80 e2       	ldi	r24, 0x20	; 32
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	0e 94 0b 1a 	call	0x3416	; 0x3416 <fputc>
    31c8:	2a 94       	dec	r2
    31ca:	f4 cf       	rjmp	.-24     	; 0x31b4 <vfprintf+0x18c>
    31cc:	f5 01       	movw	r30, r10
    31ce:	37 fc       	sbrc	r3, 7
    31d0:	85 91       	lpm	r24, Z+
    31d2:	37 fe       	sbrs	r3, 7
    31d4:	81 91       	ld	r24, Z+
    31d6:	5f 01       	movw	r10, r30
    31d8:	b6 01       	movw	r22, r12
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	0e 94 0b 1a 	call	0x3416	; 0x3416 <fputc>
    31e0:	21 10       	cpse	r2, r1
    31e2:	2a 94       	dec	r2
    31e4:	21 e0       	ldi	r18, 0x01	; 1
    31e6:	82 1a       	sub	r8, r18
    31e8:	91 08       	sbc	r9, r1
    31ea:	81 14       	cp	r8, r1
    31ec:	91 04       	cpc	r9, r1
    31ee:	71 f7       	brne	.-36     	; 0x31cc <vfprintf+0x1a4>
    31f0:	e8 c0       	rjmp	.+464    	; 0x33c2 <vfprintf+0x39a>
    31f2:	84 36       	cpi	r24, 0x64	; 100
    31f4:	11 f0       	breq	.+4      	; 0x31fa <vfprintf+0x1d2>
    31f6:	89 36       	cpi	r24, 0x69	; 105
    31f8:	41 f5       	brne	.+80     	; 0x324a <vfprintf+0x222>
    31fa:	f8 01       	movw	r30, r16
    31fc:	37 fe       	sbrs	r3, 7
    31fe:	07 c0       	rjmp	.+14     	; 0x320e <vfprintf+0x1e6>
    3200:	60 81       	ld	r22, Z
    3202:	71 81       	ldd	r23, Z+1	; 0x01
    3204:	82 81       	ldd	r24, Z+2	; 0x02
    3206:	93 81       	ldd	r25, Z+3	; 0x03
    3208:	0c 5f       	subi	r16, 0xFC	; 252
    320a:	1f 4f       	sbci	r17, 0xFF	; 255
    320c:	08 c0       	rjmp	.+16     	; 0x321e <vfprintf+0x1f6>
    320e:	60 81       	ld	r22, Z
    3210:	71 81       	ldd	r23, Z+1	; 0x01
    3212:	07 2e       	mov	r0, r23
    3214:	00 0c       	add	r0, r0
    3216:	88 0b       	sbc	r24, r24
    3218:	99 0b       	sbc	r25, r25
    321a:	0e 5f       	subi	r16, 0xFE	; 254
    321c:	1f 4f       	sbci	r17, 0xFF	; 255
    321e:	f3 2d       	mov	r31, r3
    3220:	ff 76       	andi	r31, 0x6F	; 111
    3222:	3f 2e       	mov	r3, r31
    3224:	97 ff       	sbrs	r25, 7
    3226:	09 c0       	rjmp	.+18     	; 0x323a <vfprintf+0x212>
    3228:	90 95       	com	r25
    322a:	80 95       	com	r24
    322c:	70 95       	com	r23
    322e:	61 95       	neg	r22
    3230:	7f 4f       	sbci	r23, 0xFF	; 255
    3232:	8f 4f       	sbci	r24, 0xFF	; 255
    3234:	9f 4f       	sbci	r25, 0xFF	; 255
    3236:	f0 68       	ori	r31, 0x80	; 128
    3238:	3f 2e       	mov	r3, r31
    323a:	2a e0       	ldi	r18, 0x0A	; 10
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	a3 01       	movw	r20, r6
    3240:	0e 94 47 1a 	call	0x348e	; 0x348e <__ultoa_invert>
    3244:	88 2e       	mov	r8, r24
    3246:	86 18       	sub	r8, r6
    3248:	45 c0       	rjmp	.+138    	; 0x32d4 <vfprintf+0x2ac>
    324a:	85 37       	cpi	r24, 0x75	; 117
    324c:	31 f4       	brne	.+12     	; 0x325a <vfprintf+0x232>
    324e:	23 2d       	mov	r18, r3
    3250:	2f 7e       	andi	r18, 0xEF	; 239
    3252:	b2 2e       	mov	r11, r18
    3254:	2a e0       	ldi	r18, 0x0A	; 10
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	25 c0       	rjmp	.+74     	; 0x32a4 <vfprintf+0x27c>
    325a:	93 2d       	mov	r25, r3
    325c:	99 7f       	andi	r25, 0xF9	; 249
    325e:	b9 2e       	mov	r11, r25
    3260:	8f 36       	cpi	r24, 0x6F	; 111
    3262:	c1 f0       	breq	.+48     	; 0x3294 <vfprintf+0x26c>
    3264:	18 f4       	brcc	.+6      	; 0x326c <vfprintf+0x244>
    3266:	88 35       	cpi	r24, 0x58	; 88
    3268:	79 f0       	breq	.+30     	; 0x3288 <vfprintf+0x260>
    326a:	b5 c0       	rjmp	.+362    	; 0x33d6 <vfprintf+0x3ae>
    326c:	80 37       	cpi	r24, 0x70	; 112
    326e:	19 f0       	breq	.+6      	; 0x3276 <vfprintf+0x24e>
    3270:	88 37       	cpi	r24, 0x78	; 120
    3272:	21 f0       	breq	.+8      	; 0x327c <vfprintf+0x254>
    3274:	b0 c0       	rjmp	.+352    	; 0x33d6 <vfprintf+0x3ae>
    3276:	e9 2f       	mov	r30, r25
    3278:	e0 61       	ori	r30, 0x10	; 16
    327a:	be 2e       	mov	r11, r30
    327c:	b4 fe       	sbrs	r11, 4
    327e:	0d c0       	rjmp	.+26     	; 0x329a <vfprintf+0x272>
    3280:	fb 2d       	mov	r31, r11
    3282:	f4 60       	ori	r31, 0x04	; 4
    3284:	bf 2e       	mov	r11, r31
    3286:	09 c0       	rjmp	.+18     	; 0x329a <vfprintf+0x272>
    3288:	34 fe       	sbrs	r3, 4
    328a:	0a c0       	rjmp	.+20     	; 0x32a0 <vfprintf+0x278>
    328c:	29 2f       	mov	r18, r25
    328e:	26 60       	ori	r18, 0x06	; 6
    3290:	b2 2e       	mov	r11, r18
    3292:	06 c0       	rjmp	.+12     	; 0x32a0 <vfprintf+0x278>
    3294:	28 e0       	ldi	r18, 0x08	; 8
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	05 c0       	rjmp	.+10     	; 0x32a4 <vfprintf+0x27c>
    329a:	20 e1       	ldi	r18, 0x10	; 16
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	02 c0       	rjmp	.+4      	; 0x32a4 <vfprintf+0x27c>
    32a0:	20 e1       	ldi	r18, 0x10	; 16
    32a2:	32 e0       	ldi	r19, 0x02	; 2
    32a4:	f8 01       	movw	r30, r16
    32a6:	b7 fe       	sbrs	r11, 7
    32a8:	07 c0       	rjmp	.+14     	; 0x32b8 <vfprintf+0x290>
    32aa:	60 81       	ld	r22, Z
    32ac:	71 81       	ldd	r23, Z+1	; 0x01
    32ae:	82 81       	ldd	r24, Z+2	; 0x02
    32b0:	93 81       	ldd	r25, Z+3	; 0x03
    32b2:	0c 5f       	subi	r16, 0xFC	; 252
    32b4:	1f 4f       	sbci	r17, 0xFF	; 255
    32b6:	06 c0       	rjmp	.+12     	; 0x32c4 <vfprintf+0x29c>
    32b8:	60 81       	ld	r22, Z
    32ba:	71 81       	ldd	r23, Z+1	; 0x01
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	0e 5f       	subi	r16, 0xFE	; 254
    32c2:	1f 4f       	sbci	r17, 0xFF	; 255
    32c4:	a3 01       	movw	r20, r6
    32c6:	0e 94 47 1a 	call	0x348e	; 0x348e <__ultoa_invert>
    32ca:	88 2e       	mov	r8, r24
    32cc:	86 18       	sub	r8, r6
    32ce:	fb 2d       	mov	r31, r11
    32d0:	ff 77       	andi	r31, 0x7F	; 127
    32d2:	3f 2e       	mov	r3, r31
    32d4:	36 fe       	sbrs	r3, 6
    32d6:	0d c0       	rjmp	.+26     	; 0x32f2 <vfprintf+0x2ca>
    32d8:	23 2d       	mov	r18, r3
    32da:	2e 7f       	andi	r18, 0xFE	; 254
    32dc:	a2 2e       	mov	r10, r18
    32de:	89 14       	cp	r8, r9
    32e0:	58 f4       	brcc	.+22     	; 0x32f8 <vfprintf+0x2d0>
    32e2:	34 fe       	sbrs	r3, 4
    32e4:	0b c0       	rjmp	.+22     	; 0x32fc <vfprintf+0x2d4>
    32e6:	32 fc       	sbrc	r3, 2
    32e8:	09 c0       	rjmp	.+18     	; 0x32fc <vfprintf+0x2d4>
    32ea:	83 2d       	mov	r24, r3
    32ec:	8e 7e       	andi	r24, 0xEE	; 238
    32ee:	a8 2e       	mov	r10, r24
    32f0:	05 c0       	rjmp	.+10     	; 0x32fc <vfprintf+0x2d4>
    32f2:	b8 2c       	mov	r11, r8
    32f4:	a3 2c       	mov	r10, r3
    32f6:	03 c0       	rjmp	.+6      	; 0x32fe <vfprintf+0x2d6>
    32f8:	b8 2c       	mov	r11, r8
    32fa:	01 c0       	rjmp	.+2      	; 0x32fe <vfprintf+0x2d6>
    32fc:	b9 2c       	mov	r11, r9
    32fe:	a4 fe       	sbrs	r10, 4
    3300:	0f c0       	rjmp	.+30     	; 0x3320 <vfprintf+0x2f8>
    3302:	fe 01       	movw	r30, r28
    3304:	e8 0d       	add	r30, r8
    3306:	f1 1d       	adc	r31, r1
    3308:	80 81       	ld	r24, Z
    330a:	80 33       	cpi	r24, 0x30	; 48
    330c:	21 f4       	brne	.+8      	; 0x3316 <vfprintf+0x2ee>
    330e:	9a 2d       	mov	r25, r10
    3310:	99 7e       	andi	r25, 0xE9	; 233
    3312:	a9 2e       	mov	r10, r25
    3314:	09 c0       	rjmp	.+18     	; 0x3328 <vfprintf+0x300>
    3316:	a2 fe       	sbrs	r10, 2
    3318:	06 c0       	rjmp	.+12     	; 0x3326 <vfprintf+0x2fe>
    331a:	b3 94       	inc	r11
    331c:	b3 94       	inc	r11
    331e:	04 c0       	rjmp	.+8      	; 0x3328 <vfprintf+0x300>
    3320:	8a 2d       	mov	r24, r10
    3322:	86 78       	andi	r24, 0x86	; 134
    3324:	09 f0       	breq	.+2      	; 0x3328 <vfprintf+0x300>
    3326:	b3 94       	inc	r11
    3328:	a3 fc       	sbrc	r10, 3
    332a:	11 c0       	rjmp	.+34     	; 0x334e <vfprintf+0x326>
    332c:	a0 fe       	sbrs	r10, 0
    332e:	06 c0       	rjmp	.+12     	; 0x333c <vfprintf+0x314>
    3330:	b2 14       	cp	r11, r2
    3332:	88 f4       	brcc	.+34     	; 0x3356 <vfprintf+0x32e>
    3334:	28 0c       	add	r2, r8
    3336:	92 2c       	mov	r9, r2
    3338:	9b 18       	sub	r9, r11
    333a:	0e c0       	rjmp	.+28     	; 0x3358 <vfprintf+0x330>
    333c:	b2 14       	cp	r11, r2
    333e:	60 f4       	brcc	.+24     	; 0x3358 <vfprintf+0x330>
    3340:	b6 01       	movw	r22, r12
    3342:	80 e2       	ldi	r24, 0x20	; 32
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	0e 94 0b 1a 	call	0x3416	; 0x3416 <fputc>
    334a:	b3 94       	inc	r11
    334c:	f7 cf       	rjmp	.-18     	; 0x333c <vfprintf+0x314>
    334e:	b2 14       	cp	r11, r2
    3350:	18 f4       	brcc	.+6      	; 0x3358 <vfprintf+0x330>
    3352:	2b 18       	sub	r2, r11
    3354:	02 c0       	rjmp	.+4      	; 0x335a <vfprintf+0x332>
    3356:	98 2c       	mov	r9, r8
    3358:	21 2c       	mov	r2, r1
    335a:	a4 fe       	sbrs	r10, 4
    335c:	10 c0       	rjmp	.+32     	; 0x337e <vfprintf+0x356>
    335e:	b6 01       	movw	r22, r12
    3360:	80 e3       	ldi	r24, 0x30	; 48
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	0e 94 0b 1a 	call	0x3416	; 0x3416 <fputc>
    3368:	a2 fe       	sbrs	r10, 2
    336a:	17 c0       	rjmp	.+46     	; 0x339a <vfprintf+0x372>
    336c:	a1 fc       	sbrc	r10, 1
    336e:	03 c0       	rjmp	.+6      	; 0x3376 <vfprintf+0x34e>
    3370:	88 e7       	ldi	r24, 0x78	; 120
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	02 c0       	rjmp	.+4      	; 0x337a <vfprintf+0x352>
    3376:	88 e5       	ldi	r24, 0x58	; 88
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	b6 01       	movw	r22, r12
    337c:	0c c0       	rjmp	.+24     	; 0x3396 <vfprintf+0x36e>
    337e:	8a 2d       	mov	r24, r10
    3380:	86 78       	andi	r24, 0x86	; 134
    3382:	59 f0       	breq	.+22     	; 0x339a <vfprintf+0x372>
    3384:	a1 fe       	sbrs	r10, 1
    3386:	02 c0       	rjmp	.+4      	; 0x338c <vfprintf+0x364>
    3388:	8b e2       	ldi	r24, 0x2B	; 43
    338a:	01 c0       	rjmp	.+2      	; 0x338e <vfprintf+0x366>
    338c:	80 e2       	ldi	r24, 0x20	; 32
    338e:	a7 fc       	sbrc	r10, 7
    3390:	8d e2       	ldi	r24, 0x2D	; 45
    3392:	b6 01       	movw	r22, r12
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	0e 94 0b 1a 	call	0x3416	; 0x3416 <fputc>
    339a:	89 14       	cp	r8, r9
    339c:	38 f4       	brcc	.+14     	; 0x33ac <vfprintf+0x384>
    339e:	b6 01       	movw	r22, r12
    33a0:	80 e3       	ldi	r24, 0x30	; 48
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	0e 94 0b 1a 	call	0x3416	; 0x3416 <fputc>
    33a8:	9a 94       	dec	r9
    33aa:	f7 cf       	rjmp	.-18     	; 0x339a <vfprintf+0x372>
    33ac:	8a 94       	dec	r8
    33ae:	f3 01       	movw	r30, r6
    33b0:	e8 0d       	add	r30, r8
    33b2:	f1 1d       	adc	r31, r1
    33b4:	80 81       	ld	r24, Z
    33b6:	b6 01       	movw	r22, r12
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	0e 94 0b 1a 	call	0x3416	; 0x3416 <fputc>
    33be:	81 10       	cpse	r8, r1
    33c0:	f5 cf       	rjmp	.-22     	; 0x33ac <vfprintf+0x384>
    33c2:	22 20       	and	r2, r2
    33c4:	09 f4       	brne	.+2      	; 0x33c8 <vfprintf+0x3a0>
    33c6:	42 ce       	rjmp	.-892    	; 0x304c <vfprintf+0x24>
    33c8:	b6 01       	movw	r22, r12
    33ca:	80 e2       	ldi	r24, 0x20	; 32
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	0e 94 0b 1a 	call	0x3416	; 0x3416 <fputc>
    33d2:	2a 94       	dec	r2
    33d4:	f6 cf       	rjmp	.-20     	; 0x33c2 <vfprintf+0x39a>
    33d6:	f6 01       	movw	r30, r12
    33d8:	86 81       	ldd	r24, Z+6	; 0x06
    33da:	97 81       	ldd	r25, Z+7	; 0x07
    33dc:	02 c0       	rjmp	.+4      	; 0x33e2 <vfprintf+0x3ba>
    33de:	8f ef       	ldi	r24, 0xFF	; 255
    33e0:	9f ef       	ldi	r25, 0xFF	; 255
    33e2:	2b 96       	adiw	r28, 0x0b	; 11
    33e4:	e2 e1       	ldi	r30, 0x12	; 18
    33e6:	0c 94 f3 1a 	jmp	0x35e6	; 0x35e6 <__epilogue_restores__>

000033ea <strnlen_P>:
    33ea:	fc 01       	movw	r30, r24
    33ec:	05 90       	lpm	r0, Z+
    33ee:	61 50       	subi	r22, 0x01	; 1
    33f0:	70 40       	sbci	r23, 0x00	; 0
    33f2:	01 10       	cpse	r0, r1
    33f4:	d8 f7       	brcc	.-10     	; 0x33ec <strnlen_P+0x2>
    33f6:	80 95       	com	r24
    33f8:	90 95       	com	r25
    33fa:	8e 0f       	add	r24, r30
    33fc:	9f 1f       	adc	r25, r31
    33fe:	08 95       	ret

00003400 <strnlen>:
    3400:	fc 01       	movw	r30, r24
    3402:	61 50       	subi	r22, 0x01	; 1
    3404:	70 40       	sbci	r23, 0x00	; 0
    3406:	01 90       	ld	r0, Z+
    3408:	01 10       	cpse	r0, r1
    340a:	d8 f7       	brcc	.-10     	; 0x3402 <strnlen+0x2>
    340c:	80 95       	com	r24
    340e:	90 95       	com	r25
    3410:	8e 0f       	add	r24, r30
    3412:	9f 1f       	adc	r25, r31
    3414:	08 95       	ret

00003416 <fputc>:
    3416:	0f 93       	push	r16
    3418:	1f 93       	push	r17
    341a:	cf 93       	push	r28
    341c:	df 93       	push	r29
    341e:	fb 01       	movw	r30, r22
    3420:	23 81       	ldd	r18, Z+3	; 0x03
    3422:	21 fd       	sbrc	r18, 1
    3424:	03 c0       	rjmp	.+6      	; 0x342c <fputc+0x16>
    3426:	8f ef       	ldi	r24, 0xFF	; 255
    3428:	9f ef       	ldi	r25, 0xFF	; 255
    342a:	2c c0       	rjmp	.+88     	; 0x3484 <fputc+0x6e>
    342c:	22 ff       	sbrs	r18, 2
    342e:	16 c0       	rjmp	.+44     	; 0x345c <fputc+0x46>
    3430:	46 81       	ldd	r20, Z+6	; 0x06
    3432:	57 81       	ldd	r21, Z+7	; 0x07
    3434:	24 81       	ldd	r18, Z+4	; 0x04
    3436:	35 81       	ldd	r19, Z+5	; 0x05
    3438:	42 17       	cp	r20, r18
    343a:	53 07       	cpc	r21, r19
    343c:	44 f4       	brge	.+16     	; 0x344e <fputc+0x38>
    343e:	a0 81       	ld	r26, Z
    3440:	b1 81       	ldd	r27, Z+1	; 0x01
    3442:	9d 01       	movw	r18, r26
    3444:	2f 5f       	subi	r18, 0xFF	; 255
    3446:	3f 4f       	sbci	r19, 0xFF	; 255
    3448:	31 83       	std	Z+1, r19	; 0x01
    344a:	20 83       	st	Z, r18
    344c:	8c 93       	st	X, r24
    344e:	26 81       	ldd	r18, Z+6	; 0x06
    3450:	37 81       	ldd	r19, Z+7	; 0x07
    3452:	2f 5f       	subi	r18, 0xFF	; 255
    3454:	3f 4f       	sbci	r19, 0xFF	; 255
    3456:	37 83       	std	Z+7, r19	; 0x07
    3458:	26 83       	std	Z+6, r18	; 0x06
    345a:	14 c0       	rjmp	.+40     	; 0x3484 <fputc+0x6e>
    345c:	8b 01       	movw	r16, r22
    345e:	ec 01       	movw	r28, r24
    3460:	fb 01       	movw	r30, r22
    3462:	00 84       	ldd	r0, Z+8	; 0x08
    3464:	f1 85       	ldd	r31, Z+9	; 0x09
    3466:	e0 2d       	mov	r30, r0
    3468:	09 95       	icall
    346a:	89 2b       	or	r24, r25
    346c:	e1 f6       	brne	.-72     	; 0x3426 <fputc+0x10>
    346e:	d8 01       	movw	r26, r16
    3470:	16 96       	adiw	r26, 0x06	; 6
    3472:	8d 91       	ld	r24, X+
    3474:	9c 91       	ld	r25, X
    3476:	17 97       	sbiw	r26, 0x07	; 7
    3478:	01 96       	adiw	r24, 0x01	; 1
    347a:	17 96       	adiw	r26, 0x07	; 7
    347c:	9c 93       	st	X, r25
    347e:	8e 93       	st	-X, r24
    3480:	16 97       	sbiw	r26, 0x06	; 6
    3482:	ce 01       	movw	r24, r28
    3484:	df 91       	pop	r29
    3486:	cf 91       	pop	r28
    3488:	1f 91       	pop	r17
    348a:	0f 91       	pop	r16
    348c:	08 95       	ret

0000348e <__ultoa_invert>:
    348e:	fa 01       	movw	r30, r20
    3490:	aa 27       	eor	r26, r26
    3492:	28 30       	cpi	r18, 0x08	; 8
    3494:	51 f1       	breq	.+84     	; 0x34ea <__ultoa_invert+0x5c>
    3496:	20 31       	cpi	r18, 0x10	; 16
    3498:	81 f1       	breq	.+96     	; 0x34fa <__ultoa_invert+0x6c>
    349a:	e8 94       	clt
    349c:	6f 93       	push	r22
    349e:	6e 7f       	andi	r22, 0xFE	; 254
    34a0:	6e 5f       	subi	r22, 0xFE	; 254
    34a2:	7f 4f       	sbci	r23, 0xFF	; 255
    34a4:	8f 4f       	sbci	r24, 0xFF	; 255
    34a6:	9f 4f       	sbci	r25, 0xFF	; 255
    34a8:	af 4f       	sbci	r26, 0xFF	; 255
    34aa:	b1 e0       	ldi	r27, 0x01	; 1
    34ac:	3e d0       	rcall	.+124    	; 0x352a <__ultoa_invert+0x9c>
    34ae:	b4 e0       	ldi	r27, 0x04	; 4
    34b0:	3c d0       	rcall	.+120    	; 0x352a <__ultoa_invert+0x9c>
    34b2:	67 0f       	add	r22, r23
    34b4:	78 1f       	adc	r23, r24
    34b6:	89 1f       	adc	r24, r25
    34b8:	9a 1f       	adc	r25, r26
    34ba:	a1 1d       	adc	r26, r1
    34bc:	68 0f       	add	r22, r24
    34be:	79 1f       	adc	r23, r25
    34c0:	8a 1f       	adc	r24, r26
    34c2:	91 1d       	adc	r25, r1
    34c4:	a1 1d       	adc	r26, r1
    34c6:	6a 0f       	add	r22, r26
    34c8:	71 1d       	adc	r23, r1
    34ca:	81 1d       	adc	r24, r1
    34cc:	91 1d       	adc	r25, r1
    34ce:	a1 1d       	adc	r26, r1
    34d0:	20 d0       	rcall	.+64     	; 0x3512 <__ultoa_invert+0x84>
    34d2:	09 f4       	brne	.+2      	; 0x34d6 <__ultoa_invert+0x48>
    34d4:	68 94       	set
    34d6:	3f 91       	pop	r19
    34d8:	2a e0       	ldi	r18, 0x0A	; 10
    34da:	26 9f       	mul	r18, r22
    34dc:	11 24       	eor	r1, r1
    34de:	30 19       	sub	r19, r0
    34e0:	30 5d       	subi	r19, 0xD0	; 208
    34e2:	31 93       	st	Z+, r19
    34e4:	de f6       	brtc	.-74     	; 0x349c <__ultoa_invert+0xe>
    34e6:	cf 01       	movw	r24, r30
    34e8:	08 95       	ret
    34ea:	46 2f       	mov	r20, r22
    34ec:	47 70       	andi	r20, 0x07	; 7
    34ee:	40 5d       	subi	r20, 0xD0	; 208
    34f0:	41 93       	st	Z+, r20
    34f2:	b3 e0       	ldi	r27, 0x03	; 3
    34f4:	0f d0       	rcall	.+30     	; 0x3514 <__ultoa_invert+0x86>
    34f6:	c9 f7       	brne	.-14     	; 0x34ea <__ultoa_invert+0x5c>
    34f8:	f6 cf       	rjmp	.-20     	; 0x34e6 <__ultoa_invert+0x58>
    34fa:	46 2f       	mov	r20, r22
    34fc:	4f 70       	andi	r20, 0x0F	; 15
    34fe:	40 5d       	subi	r20, 0xD0	; 208
    3500:	4a 33       	cpi	r20, 0x3A	; 58
    3502:	18 f0       	brcs	.+6      	; 0x350a <__ultoa_invert+0x7c>
    3504:	49 5d       	subi	r20, 0xD9	; 217
    3506:	31 fd       	sbrc	r19, 1
    3508:	40 52       	subi	r20, 0x20	; 32
    350a:	41 93       	st	Z+, r20
    350c:	02 d0       	rcall	.+4      	; 0x3512 <__ultoa_invert+0x84>
    350e:	a9 f7       	brne	.-22     	; 0x34fa <__ultoa_invert+0x6c>
    3510:	ea cf       	rjmp	.-44     	; 0x34e6 <__ultoa_invert+0x58>
    3512:	b4 e0       	ldi	r27, 0x04	; 4
    3514:	a6 95       	lsr	r26
    3516:	97 95       	ror	r25
    3518:	87 95       	ror	r24
    351a:	77 95       	ror	r23
    351c:	67 95       	ror	r22
    351e:	ba 95       	dec	r27
    3520:	c9 f7       	brne	.-14     	; 0x3514 <__ultoa_invert+0x86>
    3522:	00 97       	sbiw	r24, 0x00	; 0
    3524:	61 05       	cpc	r22, r1
    3526:	71 05       	cpc	r23, r1
    3528:	08 95       	ret
    352a:	9b 01       	movw	r18, r22
    352c:	ac 01       	movw	r20, r24
    352e:	0a 2e       	mov	r0, r26
    3530:	06 94       	lsr	r0
    3532:	57 95       	ror	r21
    3534:	47 95       	ror	r20
    3536:	37 95       	ror	r19
    3538:	27 95       	ror	r18
    353a:	ba 95       	dec	r27
    353c:	c9 f7       	brne	.-14     	; 0x3530 <__ultoa_invert+0xa2>
    353e:	62 0f       	add	r22, r18
    3540:	73 1f       	adc	r23, r19
    3542:	84 1f       	adc	r24, r20
    3544:	95 1f       	adc	r25, r21
    3546:	a0 1d       	adc	r26, r0
    3548:	08 95       	ret

0000354a <__divmodsi4>:
    354a:	05 2e       	mov	r0, r21
    354c:	97 fb       	bst	r25, 7
    354e:	1e f4       	brtc	.+6      	; 0x3556 <__divmodsi4+0xc>
    3550:	00 94       	com	r0
    3552:	0e 94 bc 1a 	call	0x3578	; 0x3578 <__negsi2>
    3556:	57 fd       	sbrc	r21, 7
    3558:	07 d0       	rcall	.+14     	; 0x3568 <__divmodsi4_neg2>
    355a:	0e 94 0e 1b 	call	0x361c	; 0x361c <__udivmodsi4>
    355e:	07 fc       	sbrc	r0, 7
    3560:	03 d0       	rcall	.+6      	; 0x3568 <__divmodsi4_neg2>
    3562:	4e f4       	brtc	.+18     	; 0x3576 <__divmodsi4_exit>
    3564:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <__negsi2>

00003568 <__divmodsi4_neg2>:
    3568:	50 95       	com	r21
    356a:	40 95       	com	r20
    356c:	30 95       	com	r19
    356e:	21 95       	neg	r18
    3570:	3f 4f       	sbci	r19, 0xFF	; 255
    3572:	4f 4f       	sbci	r20, 0xFF	; 255
    3574:	5f 4f       	sbci	r21, 0xFF	; 255

00003576 <__divmodsi4_exit>:
    3576:	08 95       	ret

00003578 <__negsi2>:
    3578:	90 95       	com	r25
    357a:	80 95       	com	r24
    357c:	70 95       	com	r23
    357e:	61 95       	neg	r22
    3580:	7f 4f       	sbci	r23, 0xFF	; 255
    3582:	8f 4f       	sbci	r24, 0xFF	; 255
    3584:	9f 4f       	sbci	r25, 0xFF	; 255
    3586:	08 95       	ret

00003588 <__muluhisi3>:
    3588:	0e 94 30 1b 	call	0x3660	; 0x3660 <__umulhisi3>
    358c:	a5 9f       	mul	r26, r21
    358e:	90 0d       	add	r25, r0
    3590:	b4 9f       	mul	r27, r20
    3592:	90 0d       	add	r25, r0
    3594:	a4 9f       	mul	r26, r20
    3596:	80 0d       	add	r24, r0
    3598:	91 1d       	adc	r25, r1
    359a:	11 24       	eor	r1, r1
    359c:	08 95       	ret

0000359e <__mulshisi3>:
    359e:	b7 ff       	sbrs	r27, 7
    35a0:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <__muluhisi3>

000035a4 <__mulohisi3>:
    35a4:	0e 94 c4 1a 	call	0x3588	; 0x3588 <__muluhisi3>
    35a8:	82 1b       	sub	r24, r18
    35aa:	93 0b       	sbc	r25, r19
    35ac:	08 95       	ret

000035ae <__prologue_saves__>:
    35ae:	2f 92       	push	r2
    35b0:	3f 92       	push	r3
    35b2:	4f 92       	push	r4
    35b4:	5f 92       	push	r5
    35b6:	6f 92       	push	r6
    35b8:	7f 92       	push	r7
    35ba:	8f 92       	push	r8
    35bc:	9f 92       	push	r9
    35be:	af 92       	push	r10
    35c0:	bf 92       	push	r11
    35c2:	cf 92       	push	r12
    35c4:	df 92       	push	r13
    35c6:	ef 92       	push	r14
    35c8:	ff 92       	push	r15
    35ca:	0f 93       	push	r16
    35cc:	1f 93       	push	r17
    35ce:	cf 93       	push	r28
    35d0:	df 93       	push	r29
    35d2:	cd b7       	in	r28, 0x3d	; 61
    35d4:	de b7       	in	r29, 0x3e	; 62
    35d6:	ca 1b       	sub	r28, r26
    35d8:	db 0b       	sbc	r29, r27
    35da:	0f b6       	in	r0, 0x3f	; 63
    35dc:	f8 94       	cli
    35de:	de bf       	out	0x3e, r29	; 62
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	cd bf       	out	0x3d, r28	; 61
    35e4:	09 94       	ijmp

000035e6 <__epilogue_restores__>:
    35e6:	2a 88       	ldd	r2, Y+18	; 0x12
    35e8:	39 88       	ldd	r3, Y+17	; 0x11
    35ea:	48 88       	ldd	r4, Y+16	; 0x10
    35ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    35ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    35f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    35f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    35f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    35f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    35f8:	b9 84       	ldd	r11, Y+9	; 0x09
    35fa:	c8 84       	ldd	r12, Y+8	; 0x08
    35fc:	df 80       	ldd	r13, Y+7	; 0x07
    35fe:	ee 80       	ldd	r14, Y+6	; 0x06
    3600:	fd 80       	ldd	r15, Y+5	; 0x05
    3602:	0c 81       	ldd	r16, Y+4	; 0x04
    3604:	1b 81       	ldd	r17, Y+3	; 0x03
    3606:	aa 81       	ldd	r26, Y+2	; 0x02
    3608:	b9 81       	ldd	r27, Y+1	; 0x01
    360a:	ce 0f       	add	r28, r30
    360c:	d1 1d       	adc	r29, r1
    360e:	0f b6       	in	r0, 0x3f	; 63
    3610:	f8 94       	cli
    3612:	de bf       	out	0x3e, r29	; 62
    3614:	0f be       	out	0x3f, r0	; 63
    3616:	cd bf       	out	0x3d, r28	; 61
    3618:	ed 01       	movw	r28, r26
    361a:	08 95       	ret

0000361c <__udivmodsi4>:
    361c:	a1 e2       	ldi	r26, 0x21	; 33
    361e:	1a 2e       	mov	r1, r26
    3620:	aa 1b       	sub	r26, r26
    3622:	bb 1b       	sub	r27, r27
    3624:	fd 01       	movw	r30, r26
    3626:	0d c0       	rjmp	.+26     	; 0x3642 <__udivmodsi4_ep>

00003628 <__udivmodsi4_loop>:
    3628:	aa 1f       	adc	r26, r26
    362a:	bb 1f       	adc	r27, r27
    362c:	ee 1f       	adc	r30, r30
    362e:	ff 1f       	adc	r31, r31
    3630:	a2 17       	cp	r26, r18
    3632:	b3 07       	cpc	r27, r19
    3634:	e4 07       	cpc	r30, r20
    3636:	f5 07       	cpc	r31, r21
    3638:	20 f0       	brcs	.+8      	; 0x3642 <__udivmodsi4_ep>
    363a:	a2 1b       	sub	r26, r18
    363c:	b3 0b       	sbc	r27, r19
    363e:	e4 0b       	sbc	r30, r20
    3640:	f5 0b       	sbc	r31, r21

00003642 <__udivmodsi4_ep>:
    3642:	66 1f       	adc	r22, r22
    3644:	77 1f       	adc	r23, r23
    3646:	88 1f       	adc	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	1a 94       	dec	r1
    364c:	69 f7       	brne	.-38     	; 0x3628 <__udivmodsi4_loop>
    364e:	60 95       	com	r22
    3650:	70 95       	com	r23
    3652:	80 95       	com	r24
    3654:	90 95       	com	r25
    3656:	9b 01       	movw	r18, r22
    3658:	ac 01       	movw	r20, r24
    365a:	bd 01       	movw	r22, r26
    365c:	cf 01       	movw	r24, r30
    365e:	08 95       	ret

00003660 <__umulhisi3>:
    3660:	a2 9f       	mul	r26, r18
    3662:	b0 01       	movw	r22, r0
    3664:	b3 9f       	mul	r27, r19
    3666:	c0 01       	movw	r24, r0
    3668:	a3 9f       	mul	r26, r19
    366a:	70 0d       	add	r23, r0
    366c:	81 1d       	adc	r24, r1
    366e:	11 24       	eor	r1, r1
    3670:	91 1d       	adc	r25, r1
    3672:	b2 9f       	mul	r27, r18
    3674:	70 0d       	add	r23, r0
    3676:	81 1d       	adc	r24, r1
    3678:	11 24       	eor	r1, r1
    367a:	91 1d       	adc	r25, r1
    367c:	08 95       	ret

0000367e <atexit_fini>:
    367e:	0e 94 63 00 	call	0xc6	; 0xc6 <atexit_finido>

00003682 <__do_global_dtors>:
    3682:	10 e0       	ldi	r17, 0x00	; 0
    3684:	c7 e3       	ldi	r28, 0x37	; 55
    3686:	d0 e0       	ldi	r29, 0x00	; 0
    3688:	04 c0       	rjmp	.+8      	; 0x3692 <__do_global_dtors+0x10>
    368a:	fe 01       	movw	r30, r28
    368c:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__tablejump2__>
    3690:	21 96       	adiw	r28, 0x01	; 1
    3692:	c9 33       	cpi	r28, 0x39	; 57
    3694:	d1 07       	cpc	r29, r17
    3696:	c9 f7       	brne	.-14     	; 0x368a <__do_global_dtors+0x8>
    3698:	f8 94       	cli

0000369a <__stop_program>:
    369a:	ff cf       	rjmp	.-2      	; 0x369a <__stop_program>
